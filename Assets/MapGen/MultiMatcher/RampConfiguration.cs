using System.Xml.Linq;
using UnityEngine;

public class RampConfiguration<T> : ContentConfiguration<T> where T : IContent, new()
{
    //big look up table
    static readonly byte[] rampblut =
    // generated by blutmaker.py
    {
        1 ,  2 ,  8 ,  2 ,  4 , 12 ,  4 , 12 ,  9 ,  2 , 21 ,  2 ,  4 , 12 ,  4 , 12 ,
        5 , 16 ,  5 , 16 , 13 , 13 , 13 , 12 ,  5 , 16 ,  5 , 16 , 13 , 13 , 13 , 16 ,
        7 ,  2 , 14 ,  2 ,  4 , 12 ,  4 , 12 , 20 , 26 , 25 , 26 ,  4 , 12 ,  4 , 12 ,
        5 , 16 ,  5 , 16 , 13 , 16 , 13 , 16 ,  5 , 16 ,  5 , 16 , 13 , 16 , 13 , 16 ,
        3 , 10 ,  3 , 10 , 17 , 12 , 17 , 12 ,  3 , 10 , 26 , 10 , 17 , 17 , 17 , 17 ,
        11 , 10 , 11 , 16 , 11 , 26 , 17 , 12 , 11 , 16 , 11 , 16 , 13 , 13 , 17 , 16 ,
        3 , 10 ,  3 , 10 , 17 , 17 , 17 , 17 ,  3 , 10 , 26 , 10 , 17 , 17 , 17 , 17 ,
        11 , 11 , 11 , 16 , 11 , 11 , 17 , 14 , 11 , 16 , 11 , 16 , 17 , 17 , 17 , 13 ,
        6 ,  2 , 19 ,  2 ,  4 , 12 ,  4 , 12 , 15 ,  2 , 24 ,  2 ,  4 , 12 ,  4 , 12 ,
        5 , 16 , 26 , 16 , 13 , 16 , 13 , 16 ,  5 , 16 , 26 , 16 , 13 , 16 , 13 , 16 ,
        18 ,  2 , 22 ,  2 , 26 , 12 , 26 , 12 , 23 , 26 , 26 , 26 , 26 , 12 , 26 , 12 ,
        5 , 16 , 26 , 16 , 13 , 16 , 13 , 16 ,  5 , 16 , 26 , 16 , 13 , 16 , 13 , 16 ,
        3 , 10 ,  3 , 10 , 17 , 10 , 17 , 17 ,  3 , 10 , 26 , 10 , 17 , 17 , 17 , 17 ,
        11 , 10 , 11 , 16 , 17 , 10 , 17 , 17 , 11 , 16 , 11 , 16 , 17 , 15 , 17 , 12 ,
        3 , 10 ,  3 , 10 , 17 , 17 , 17 , 17 ,  3 , 10 , 26 , 10 , 17 , 17 , 17 , 17 ,
        11 , 16 , 11 , 16 , 17 , 16 , 17 , 10 , 11 , 16 , 11 , 16 , 17 , 11 , 17 , 26
    };
    static int CalculateRampType(MapDataStore.Tile tile)
    {
        int ramplookup = 0;
        if (tile.North != null &&
            tile.North.Value.Up != null &&
            tile.North.Value.isWall &&
            tile.North.Value.Up.Value.isFloor)
        {
            ramplookup ^= 1;
        }
        if (tile.North != null &&
            tile.North.Value.East != null &&
            tile.North.Value.East.Value.Up != null &&
            tile.North.Value.East.Value.isWall &&
            tile.North.Value.East.Value.Up.Value.isFloor)
        {
            ramplookup ^= 2;
        }
        if (tile.East != null &&
            tile.East.Value.Up != null &&
            tile.East.Value.isWall &&
            tile.East.Value.Up.Value.isFloor)
        {
            ramplookup ^= 4;
        }
        if (tile.South != null &&
            tile.South.Value.East != null &&
            tile.South.Value.East.Value.Up != null &&
            tile.South.Value.East.Value.isWall &&
            tile.South.Value.East.Value.Up.Value.isFloor)
        {
            ramplookup ^= 8;
        }
        if (tile.South != null &&
            tile.South.Value.Up != null &&
            tile.South.Value.isWall &&
            tile.South.Value.Up.Value.isFloor)
        {
            ramplookup ^= 16;
        }
        if (tile.South != null &&
            tile.South.Value.West != null &&
            tile.South.Value.West.Value.Up != null &&
            tile.South.Value.West.Value.isWall &&
            tile.South.Value.West.Value.Up.Value.isFloor)
        {
            ramplookup ^= 32;
        }
        if (tile.West != null &&
            tile.West.Value.Up != null &&
            tile.West.Value.isWall &&
            tile.West.Value.Up.Value.isFloor)
        {
            ramplookup ^= 64;
        }
        if (tile.North != null &&
            tile.North.Value.West != null &&
            tile.North.Value.West.Value.Up != null &&
            tile.North.Value.West.Value.isWall &&
            tile.North.Value.West.Value.Up.Value.isFloor)
        {
            ramplookup ^= 128;
        }
        // creation should ensure in range
        if (ramplookup > 0)
        {
            return rampblut[ramplookup];
        }

        if (tile.North != null &&
            tile.North.Value.isWall)
        {
            ramplookup ^= 1;
        }
        if (tile.North != null &&
            tile.North.Value.East != null &&
            tile.North.Value.East.Value.isWall)
        {
            ramplookup ^= 2;
        }
        if (tile.East != null &&
            tile.East.Value.isWall)
        {
            ramplookup ^= 4;
        }
        if (tile.South != null &&
            tile.South.Value.East != null &&
            tile.South.Value.East.Value.isWall)
        {
            ramplookup ^= 8;
        }
        if (tile.South != null &&
            tile.South.Value.isWall)
        {
            ramplookup ^= 16;
        }
        if (tile.South != null &&
            tile.South.Value.West != null &&
            tile.South.Value.West.Value.isWall)
        {
            ramplookup ^= 32;
        }
        if (tile.West != null &&
            tile.West.Value.isWall)
        {
            ramplookup ^= 64;
        }
        if (tile.North != null &&
            tile.North.Value.West != null &&
            tile.North.Value.West.Value.isWall)
        {
            ramplookup ^= 128;
        }
        return rampblut[ramplookup];
    }
    Content[] rampList = new Content[26];
    public override bool GetValue(MapDataStore.Tile tile, MeshLayer layer, out T value)
    {
        if (tile.shape != RemoteFortressReader.TiletypeShape.RAMP)
        {
            value = default(T);
            return false;
        }
        int index = CalculateRampType(tile)-1;
        if(rampList[index] == null)
        {
            value = default(T);
            return false;
        }
        value = rampList[index].GetValue(tile, layer);
        return true;
    }

    protected override void ParseElementConditions(XElement elemtype, ContentConfiguration<T>.Content content)
    {
        var elemRamps = elemtype.Elements("ramp");
        foreach (XElement elemRamp in elemRamps)
        {
            XAttribute indexAttr = elemRamp.Attribute("index");
            if (indexAttr == null)
                continue;
            int index = 0;
            if (!int.TryParse(indexAttr.Value, out index))
                continue;
            if (index > 26)
                continue;
            rampList[index - 1] = content;
        }
    }

}
