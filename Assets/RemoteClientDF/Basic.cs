// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Basic.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Dfproto {

  /// <summary>Holder for reflection information generated from Basic.proto</summary>
  public static partial class BasicReflection {

    #region Descriptor
    /// <summary>File descriptor for Basic.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BasicReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtCYXNpYy5wcm90bxIHZGZwcm90byI9CgxFbnVtSXRlbU5hbWUSDQoFdmFs",
            "dWUYASABKAUSDAoEbmFtZRgCIAEoCRIQCghiaXRfc2l6ZRgDIAEoBSIuCg9C",
            "YXNpY01hdGVyaWFsSWQSDAoEdHlwZRgBIAEoBRINCgVpbmRleBgCIAEoESKO",
            "AwoRQmFzaWNNYXRlcmlhbEluZm8SDAoEdHlwZRgBIAEoBRINCgVpbmRleBgC",
            "IAEoERINCgV0b2tlbhgDIAEoCRINCgVmbGFncxgEIAMoBRIPCgdzdWJ0eXBl",
            "GAUgASgFEhMKC2NyZWF0dXJlX2lkGAYgASgFEhAKCHBsYW50X2lkGAcgASgF",
            "EhIKCmhpc3RmaWdfaWQYCCABKAUSEwoLbmFtZV9wcmVmaXgYCSABKAkSEwoL",
            "c3RhdGVfY29sb3IYCiADKAcSEgoKc3RhdGVfbmFtZRgLIAMoCRIRCglzdGF0",
            "ZV9hZGoYDCADKAkSFgoOcmVhY3Rpb25fY2xhc3MYDSADKAkSPAoQcmVhY3Rp",
            "b25fcHJvZHVjdBgOIAMoCzIiLmRmcHJvdG8uQmFzaWNNYXRlcmlhbEluZm8u",
            "UHJvZHVjdBIXCg9pbm9yZ2FuaWNfZmxhZ3MYDyADKAUaMgoHUHJvZHVjdBIK",
            "CgJpZBgBIAEoCRIMCgR0eXBlGAIgASgFEg0KBWluZGV4GAMgASgRItgBChVC",
            "YXNpY01hdGVyaWFsSW5mb01hc2sSOAoGc3RhdGVzGAEgAygOMiguZGZwcm90",
            "by5CYXNpY01hdGVyaWFsSW5mb01hc2suU3RhdGVUeXBlEhMKC3RlbXBlcmF0",
            "dXJlGAQgASgFEg0KBWZsYWdzGAIgASgIEhAKCHJlYWN0aW9uGAMgASgIIk8K",
            "CVN0YXRlVHlwZRIJCgVTb2xpZBAAEgoKBkxpcXVpZBABEgcKA0dhcxACEgoK",
            "BlBvd2RlchADEgkKBVBhc3RlEAQSCwoHUHJlc3NlZBAFIn8KDEpvYlNraWxs",
            "QXR0chIKCgJpZBgBIAEoBRILCgNrZXkYAiABKAkSDwoHY2FwdGlvbhgDIAEo",
            "CRIUCgxjYXB0aW9uX25vdW4YBCABKAkSEgoKcHJvZmVzc2lvbhgFIAEoBRIN",
            "CgVsYWJvchgGIAEoBRIMCgR0eXBlGAcgASgJInYKDlByb2Zlc3Npb25BdHRy",
            "EgoKAmlkGAEgASgFEgsKA2tleRgCIAEoCRIPCgdjYXB0aW9uGAMgASgJEhAK",
            "CG1pbGl0YXJ5GAQgASgIEhgKEGNhbl9hc3NpZ25fbGFib3IYBSABKAgSDgoG",
            "cGFyZW50GAYgASgFIjkKDVVuaXRMYWJvckF0dHISCgoCaWQYASABKAUSCwoD",
            "a2V5GAIgASgJEg8KB2NhcHRpb24YAyABKAkibgoITmFtZUluZm8SEgoKZmly",
            "c3RfbmFtZRgBIAEoCRIQCghuaWNrbmFtZRgCIAEoCRITCgtsYW5ndWFnZV9p",
            "ZBgDIAEoBRIRCglsYXN0X25hbWUYBCABKAkSFAoMZW5nbGlzaF9uYW1lGAUg",
            "ASgJIj8KCk5hbWVUcmlwbGUSDgoGbm9ybWFsGAEgASgJEg4KBnBsdXJhbBgC",
            "IAEoCRIRCglhZGplY3RpdmUYAyABKAkifgoNVW5pdEN1cnNlSW5mbxIRCglh",
            "ZGRfdGFnczEYASABKAcSEQoJcmVtX3RhZ3MxGAIgASgHEhEKCWFkZF90YWdz",
            "MhgDIAEoBxIRCglyZW1fdGFnczIYBCABKAcSIQoEbmFtZRgFIAEoCzITLmRm",
            "cHJvdG8uTmFtZVRyaXBsZSI6CglTa2lsbEluZm8SCgoCaWQYASABKAUSDQoF",
            "bGV2ZWwYAiABKAUSEgoKZXhwZXJpZW5jZRgDIAEoBSIqCg1Vbml0TWlzY1Ry",
            "YWl0EgoKAmlkGAEgASgFEg0KBXZhbHVlGAIgASgFIogECg1CYXNpY1VuaXRJ",
            "bmZvEg8KB3VuaXRfaWQYASABKAUSDQoFcG9zX3gYDSABKAUSDQoFcG9zX3kY",
            "DiABKAUSDQoFcG9zX3oYDyABKAUSHwoEbmFtZRgCIAEoCzIRLmRmcHJvdG8u",
            "TmFtZUluZm8SDgoGZmxhZ3MxGAMgASgHEg4KBmZsYWdzMhgEIAEoBxIOCgZm",
            "bGFnczMYBSABKAcSDAoEcmFjZRgGIAEoBRINCgVjYXN0ZRgHIAEoBRIOCgZn",
            "ZW5kZXIYCCABKAUSDgoGY2l2X2lkGAkgASgFEhIKCmhpc3RmaWdfaWQYCiAB",
            "KAUSEAoIZGVhdGhfaWQYESABKAUSEwoLZGVhdGhfZmxhZ3MYEiABKA0SEAoI",
            "c3F1YWRfaWQYEyABKAUSFgoOc3F1YWRfcG9zaXRpb24YFCABKAUSEgoKcHJv",
            "ZmVzc2lvbhgWIAEoBRIZChFjdXN0b21fcHJvZmVzc2lvbhgXIAEoCRIOCgZs",
            "YWJvcnMYCyADKAUSIgoGc2tpbGxzGAwgAygLMhIuZGZwcm90by5Ta2lsbElu",
            "Zm8SKwoLbWlzY190cmFpdHMYGCADKAsyFi5kZnByb3RvLlVuaXRNaXNjVHJh",
            "aXQSJQoFY3Vyc2UYECABKAsyFi5kZnByb3RvLlVuaXRDdXJzZUluZm8SDwoH",
            "YnVycm93cxgVIAMoBSJcChFCYXNpY1VuaXRJbmZvTWFzaxIOCgZsYWJvcnMY",
            "ASABKAgSDgoGc2tpbGxzGAIgASgIEhIKCnByb2Zlc3Npb24YAyABKAgSEwoL",
            "bWlzY190cmFpdHMYBCABKAgiYwoOQmFzaWNTcXVhZEluZm8SEAoIc3F1YWRf",
            "aWQYASABKAUSHwoEbmFtZRgCIAEoCzIRLmRmcHJvdG8uTmFtZUluZm8SDQoF",
            "YWxpYXMYAyABKAkSDwoHbWVtYmVycxgEIAMoESI/Cg5Vbml0TGFib3JTdGF0",
            "ZRIPCgd1bml0X2lkGAEgASgFEg0KBWxhYm9yGAIgASgFEg0KBXZhbHVlGAMg",
            "ASgIQgJIA2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Dfproto.EnumItemName), global::Dfproto.EnumItemName.Parser, new[]{ "Value", "Name", "BitSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Dfproto.BasicMaterialId), global::Dfproto.BasicMaterialId.Parser, new[]{ "Type", "Index" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Dfproto.BasicMaterialInfo), global::Dfproto.BasicMaterialInfo.Parser, new[]{ "Type", "Index", "Token", "Flags", "Subtype", "CreatureId", "PlantId", "HistfigId", "NamePrefix", "StateColor", "StateName", "StateAdj", "ReactionClass", "ReactionProduct", "InorganicFlags" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Dfproto.BasicMaterialInfo.Types.Product), global::Dfproto.BasicMaterialInfo.Types.Product.Parser, new[]{ "Id", "Type", "Index" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Dfproto.BasicMaterialInfoMask), global::Dfproto.BasicMaterialInfoMask.Parser, new[]{ "States", "Temperature", "Flags", "Reaction" }, null, new[]{ typeof(global::Dfproto.BasicMaterialInfoMask.Types.StateType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Dfproto.JobSkillAttr), global::Dfproto.JobSkillAttr.Parser, new[]{ "Id", "Key", "Caption", "CaptionNoun", "Profession", "Labor", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Dfproto.ProfessionAttr), global::Dfproto.ProfessionAttr.Parser, new[]{ "Id", "Key", "Caption", "Military", "CanAssignLabor", "Parent" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Dfproto.UnitLaborAttr), global::Dfproto.UnitLaborAttr.Parser, new[]{ "Id", "Key", "Caption" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Dfproto.NameInfo), global::Dfproto.NameInfo.Parser, new[]{ "FirstName", "Nickname", "LanguageId", "LastName", "EnglishName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Dfproto.NameTriple), global::Dfproto.NameTriple.Parser, new[]{ "Normal", "Plural", "Adjective" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Dfproto.UnitCurseInfo), global::Dfproto.UnitCurseInfo.Parser, new[]{ "AddTags1", "RemTags1", "AddTags2", "RemTags2", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Dfproto.SkillInfo), global::Dfproto.SkillInfo.Parser, new[]{ "Id", "Level", "Experience" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Dfproto.UnitMiscTrait), global::Dfproto.UnitMiscTrait.Parser, new[]{ "Id", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Dfproto.BasicUnitInfo), global::Dfproto.BasicUnitInfo.Parser, new[]{ "UnitId", "PosX", "PosY", "PosZ", "Name", "Flags1", "Flags2", "Flags3", "Race", "Caste", "Gender", "CivId", "HistfigId", "DeathId", "DeathFlags", "SquadId", "SquadPosition", "Profession", "CustomProfession", "Labors", "Skills", "MiscTraits", "Curse", "Burrows" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Dfproto.BasicUnitInfoMask), global::Dfproto.BasicUnitInfoMask.Parser, new[]{ "Labors", "Skills", "Profession", "MiscTraits" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Dfproto.BasicSquadInfo), global::Dfproto.BasicSquadInfo.Parser, new[]{ "SquadId", "Name", "Alias", "Members" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Dfproto.UnitLaborState), global::Dfproto.UnitLaborState.Parser, new[]{ "UnitId", "Labor", "Value" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class EnumItemName : pb::IMessage<EnumItemName> {
    private static readonly pb::MessageParser<EnumItemName> _parser = new pb::MessageParser<EnumItemName>(() => new EnumItemName());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnumItemName> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dfproto.BasicReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnumItemName() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnumItemName(EnumItemName other) : this() {
      value_ = other.value_;
      name_ = other.name_;
      bitSize_ = other.bitSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnumItemName Clone() {
      return new EnumItemName(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bit_size" field.</summary>
    public const int BitSizeFieldNumber = 3;
    private int bitSize_;
    /// <summary>
    /// For bitfield members
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BitSize {
      get { return bitSize_; }
      set {
        bitSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnumItemName);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnumItemName other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      if (Name != other.Name) return false;
      if (BitSize != other.BitSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0) hash ^= Value.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (BitSize != 0) hash ^= BitSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Value);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (BitSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BitSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (BitSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BitSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnumItemName other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.BitSize != 0) {
        BitSize = other.BitSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Value = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            BitSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BasicMaterialId : pb::IMessage<BasicMaterialId> {
    private static readonly pb::MessageParser<BasicMaterialId> _parser = new pb::MessageParser<BasicMaterialId>(() => new BasicMaterialId());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BasicMaterialId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dfproto.BasicReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasicMaterialId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasicMaterialId(BasicMaterialId other) : this() {
      type_ = other.type_;
      index_ = other.index_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasicMaterialId Clone() {
      return new BasicMaterialId(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BasicMaterialId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BasicMaterialId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Index != other.Index) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BasicMaterialId other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            Index = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BasicMaterialInfo : pb::IMessage<BasicMaterialInfo> {
    private static readonly pb::MessageParser<BasicMaterialInfo> _parser = new pb::MessageParser<BasicMaterialInfo>(() => new BasicMaterialInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BasicMaterialInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dfproto.BasicReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasicMaterialInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasicMaterialInfo(BasicMaterialInfo other) : this() {
      type_ = other.type_;
      index_ = other.index_;
      token_ = other.token_;
      flags_ = other.flags_.Clone();
      subtype_ = other.subtype_;
      creatureId_ = other.creatureId_;
      plantId_ = other.plantId_;
      histfigId_ = other.histfigId_;
      namePrefix_ = other.namePrefix_;
      stateColor_ = other.stateColor_.Clone();
      stateName_ = other.stateName_.Clone();
      stateAdj_ = other.stateAdj_.Clone();
      reactionClass_ = other.reactionClass_.Clone();
      reactionProduct_ = other.reactionProduct_.Clone();
      inorganicFlags_ = other.inorganicFlags_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasicMaterialInfo Clone() {
      return new BasicMaterialInfo(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 3;
    private string token_ = "";
    /// <summary>
    /// The raw token
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_flags_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> flags_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// IF mask.flags:
    /// List of material_flags indices
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Flags {
      get { return flags_; }
    }

    /// <summary>Field number for the "subtype" field.</summary>
    public const int SubtypeFieldNumber = 5;
    private int subtype_;
    /// <summary>
    /// Material type/index expanded:
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Subtype {
      get { return subtype_; }
      set {
        subtype_ = value;
      }
    }

    /// <summary>Field number for the "creature_id" field.</summary>
    public const int CreatureIdFieldNumber = 6;
    private int creatureId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CreatureId {
      get { return creatureId_; }
      set {
        creatureId_ = value;
      }
    }

    /// <summary>Field number for the "plant_id" field.</summary>
    public const int PlantIdFieldNumber = 7;
    private int plantId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlantId {
      get { return plantId_; }
      set {
        plantId_ = value;
      }
    }

    /// <summary>Field number for the "histfig_id" field.</summary>
    public const int HistfigIdFieldNumber = 8;
    private int histfigId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HistfigId {
      get { return histfigId_; }
      set {
        histfigId_ = value;
      }
    }

    /// <summary>Field number for the "name_prefix" field.</summary>
    public const int NamePrefixFieldNumber = 9;
    private string namePrefix_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NamePrefix {
      get { return namePrefix_; }
      set {
        namePrefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state_color" field.</summary>
    public const int StateColorFieldNumber = 10;
    private static readonly pb::FieldCodec<uint> _repeated_stateColor_codec
        = pb::FieldCodec.ForFixed32(82);
    private readonly pbc::RepeatedField<uint> stateColor_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// IF mask.states: in listed order;
    /// ELSE: one state matching mask.temperature
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> StateColor {
      get { return stateColor_; }
    }

    /// <summary>Field number for the "state_name" field.</summary>
    public const int StateNameFieldNumber = 11;
    private static readonly pb::FieldCodec<string> _repeated_stateName_codec
        = pb::FieldCodec.ForString(90);
    private readonly pbc::RepeatedField<string> stateName_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> StateName {
      get { return stateName_; }
    }

    /// <summary>Field number for the "state_adj" field.</summary>
    public const int StateAdjFieldNumber = 12;
    private static readonly pb::FieldCodec<string> _repeated_stateAdj_codec
        = pb::FieldCodec.ForString(98);
    private readonly pbc::RepeatedField<string> stateAdj_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> StateAdj {
      get { return stateAdj_; }
    }

    /// <summary>Field number for the "reaction_class" field.</summary>
    public const int ReactionClassFieldNumber = 13;
    private static readonly pb::FieldCodec<string> _repeated_reactionClass_codec
        = pb::FieldCodec.ForString(106);
    private readonly pbc::RepeatedField<string> reactionClass_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ReactionClass {
      get { return reactionClass_; }
    }

    /// <summary>Field number for the "reaction_product" field.</summary>
    public const int ReactionProductFieldNumber = 14;
    private static readonly pb::FieldCodec<global::Dfproto.BasicMaterialInfo.Types.Product> _repeated_reactionProduct_codec
        = pb::FieldCodec.ForMessage(114, global::Dfproto.BasicMaterialInfo.Types.Product.Parser);
    private readonly pbc::RepeatedField<global::Dfproto.BasicMaterialInfo.Types.Product> reactionProduct_ = new pbc::RepeatedField<global::Dfproto.BasicMaterialInfo.Types.Product>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Dfproto.BasicMaterialInfo.Types.Product> ReactionProduct {
      get { return reactionProduct_; }
    }

    /// <summary>Field number for the "inorganic_flags" field.</summary>
    public const int InorganicFlagsFieldNumber = 15;
    private static readonly pb::FieldCodec<int> _repeated_inorganicFlags_codec
        = pb::FieldCodec.ForInt32(122);
    private readonly pbc::RepeatedField<int> inorganicFlags_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// IF mask.flags:
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> InorganicFlags {
      get { return inorganicFlags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BasicMaterialInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BasicMaterialInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Index != other.Index) return false;
      if (Token != other.Token) return false;
      if(!flags_.Equals(other.flags_)) return false;
      if (Subtype != other.Subtype) return false;
      if (CreatureId != other.CreatureId) return false;
      if (PlantId != other.PlantId) return false;
      if (HistfigId != other.HistfigId) return false;
      if (NamePrefix != other.NamePrefix) return false;
      if(!stateColor_.Equals(other.stateColor_)) return false;
      if(!stateName_.Equals(other.stateName_)) return false;
      if(!stateAdj_.Equals(other.stateAdj_)) return false;
      if(!reactionClass_.Equals(other.reactionClass_)) return false;
      if(!reactionProduct_.Equals(other.reactionProduct_)) return false;
      if(!inorganicFlags_.Equals(other.inorganicFlags_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      hash ^= flags_.GetHashCode();
      if (Subtype != 0) hash ^= Subtype.GetHashCode();
      if (CreatureId != 0) hash ^= CreatureId.GetHashCode();
      if (PlantId != 0) hash ^= PlantId.GetHashCode();
      if (HistfigId != 0) hash ^= HistfigId.GetHashCode();
      if (NamePrefix.Length != 0) hash ^= NamePrefix.GetHashCode();
      hash ^= stateColor_.GetHashCode();
      hash ^= stateName_.GetHashCode();
      hash ^= stateAdj_.GetHashCode();
      hash ^= reactionClass_.GetHashCode();
      hash ^= reactionProduct_.GetHashCode();
      hash ^= inorganicFlags_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Index);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Token);
      }
      flags_.WriteTo(output, _repeated_flags_codec);
      if (Subtype != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Subtype);
      }
      if (CreatureId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CreatureId);
      }
      if (PlantId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PlantId);
      }
      if (HistfigId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(HistfigId);
      }
      if (NamePrefix.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(NamePrefix);
      }
      stateColor_.WriteTo(output, _repeated_stateColor_codec);
      stateName_.WriteTo(output, _repeated_stateName_codec);
      stateAdj_.WriteTo(output, _repeated_stateAdj_codec);
      reactionClass_.WriteTo(output, _repeated_reactionClass_codec);
      reactionProduct_.WriteTo(output, _repeated_reactionProduct_codec);
      inorganicFlags_.WriteTo(output, _repeated_inorganicFlags_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Index);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      size += flags_.CalculateSize(_repeated_flags_codec);
      if (Subtype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Subtype);
      }
      if (CreatureId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CreatureId);
      }
      if (PlantId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlantId);
      }
      if (HistfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HistfigId);
      }
      if (NamePrefix.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NamePrefix);
      }
      size += stateColor_.CalculateSize(_repeated_stateColor_codec);
      size += stateName_.CalculateSize(_repeated_stateName_codec);
      size += stateAdj_.CalculateSize(_repeated_stateAdj_codec);
      size += reactionClass_.CalculateSize(_repeated_reactionClass_codec);
      size += reactionProduct_.CalculateSize(_repeated_reactionProduct_codec);
      size += inorganicFlags_.CalculateSize(_repeated_inorganicFlags_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BasicMaterialInfo other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      flags_.Add(other.flags_);
      if (other.Subtype != 0) {
        Subtype = other.Subtype;
      }
      if (other.CreatureId != 0) {
        CreatureId = other.CreatureId;
      }
      if (other.PlantId != 0) {
        PlantId = other.PlantId;
      }
      if (other.HistfigId != 0) {
        HistfigId = other.HistfigId;
      }
      if (other.NamePrefix.Length != 0) {
        NamePrefix = other.NamePrefix;
      }
      stateColor_.Add(other.stateColor_);
      stateName_.Add(other.stateName_);
      stateAdj_.Add(other.stateAdj_);
      reactionClass_.Add(other.reactionClass_);
      reactionProduct_.Add(other.reactionProduct_);
      inorganicFlags_.Add(other.inorganicFlags_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            Index = input.ReadSInt32();
            break;
          }
          case 26: {
            Token = input.ReadString();
            break;
          }
          case 34:
          case 32: {
            flags_.AddEntriesFrom(input, _repeated_flags_codec);
            break;
          }
          case 40: {
            Subtype = input.ReadInt32();
            break;
          }
          case 48: {
            CreatureId = input.ReadInt32();
            break;
          }
          case 56: {
            PlantId = input.ReadInt32();
            break;
          }
          case 64: {
            HistfigId = input.ReadInt32();
            break;
          }
          case 74: {
            NamePrefix = input.ReadString();
            break;
          }
          case 82:
          case 85: {
            stateColor_.AddEntriesFrom(input, _repeated_stateColor_codec);
            break;
          }
          case 90: {
            stateName_.AddEntriesFrom(input, _repeated_stateName_codec);
            break;
          }
          case 98: {
            stateAdj_.AddEntriesFrom(input, _repeated_stateAdj_codec);
            break;
          }
          case 106: {
            reactionClass_.AddEntriesFrom(input, _repeated_reactionClass_codec);
            break;
          }
          case 114: {
            reactionProduct_.AddEntriesFrom(input, _repeated_reactionProduct_codec);
            break;
          }
          case 122:
          case 120: {
            inorganicFlags_.AddEntriesFrom(input, _repeated_inorganicFlags_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BasicMaterialInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// IF mask.reaction:
      /// </summary>
      public sealed partial class Product : pb::IMessage<Product> {
        private static readonly pb::MessageParser<Product> _parser = new pb::MessageParser<Product>(() => new Product());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Product> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Dfproto.BasicMaterialInfo.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Product() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Product(Product other) : this() {
          id_ = other.id_;
          type_ = other.type_;
          index_ = other.index_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Product Clone() {
          return new Product(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 2;
        private int type_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "index" field.</summary>
        public const int IndexFieldNumber = 3;
        private int index_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Index {
          get { return index_; }
          set {
            index_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Product);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Product other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Type != other.Type) return false;
          if (Index != other.Index) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (Type != 0) hash ^= Type.GetHashCode();
          if (Index != 0) hash ^= Index.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (Type != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Type);
          }
          if (Index != 0) {
            output.WriteRawTag(24);
            output.WriteSInt32(Index);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
          }
          if (Index != 0) {
            size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Index);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Product other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          if (other.Type != 0) {
            Type = other.Type;
          }
          if (other.Index != 0) {
            Index = other.Index;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 16: {
                Type = input.ReadInt32();
                break;
              }
              case 24: {
                Index = input.ReadSInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class BasicMaterialInfoMask : pb::IMessage<BasicMaterialInfoMask> {
    private static readonly pb::MessageParser<BasicMaterialInfoMask> _parser = new pb::MessageParser<BasicMaterialInfoMask>(() => new BasicMaterialInfoMask());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BasicMaterialInfoMask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dfproto.BasicReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasicMaterialInfoMask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasicMaterialInfoMask(BasicMaterialInfoMask other) : this() {
      states_ = other.states_.Clone();
      temperature_ = other.temperature_;
      flags_ = other.flags_;
      reaction_ = other.reaction_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasicMaterialInfoMask Clone() {
      return new BasicMaterialInfoMask(this);
    }

    /// <summary>Field number for the "states" field.</summary>
    public const int StatesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Dfproto.BasicMaterialInfoMask.Types.StateType> _repeated_states_codec
        = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::Dfproto.BasicMaterialInfoMask.Types.StateType) x);
    private readonly pbc::RepeatedField<global::Dfproto.BasicMaterialInfoMask.Types.StateType> states_ = new pbc::RepeatedField<global::Dfproto.BasicMaterialInfoMask.Types.StateType>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Dfproto.BasicMaterialInfoMask.Types.StateType> States {
      get { return states_; }
    }

    /// <summary>Field number for the "temperature" field.</summary>
    public const int TemperatureFieldNumber = 4;
    private int temperature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Temperature {
      get { return temperature_; }
      set {
        temperature_ = value;
      }
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 2;
    private bool flags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    /// <summary>Field number for the "reaction" field.</summary>
    public const int ReactionFieldNumber = 3;
    private bool reaction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Reaction {
      get { return reaction_; }
      set {
        reaction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BasicMaterialInfoMask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BasicMaterialInfoMask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!states_.Equals(other.states_)) return false;
      if (Temperature != other.Temperature) return false;
      if (Flags != other.Flags) return false;
      if (Reaction != other.Reaction) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= states_.GetHashCode();
      if (Temperature != 0) hash ^= Temperature.GetHashCode();
      if (Flags != false) hash ^= Flags.GetHashCode();
      if (Reaction != false) hash ^= Reaction.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      states_.WriteTo(output, _repeated_states_codec);
      if (Flags != false) {
        output.WriteRawTag(16);
        output.WriteBool(Flags);
      }
      if (Reaction != false) {
        output.WriteRawTag(24);
        output.WriteBool(Reaction);
      }
      if (Temperature != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Temperature);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += states_.CalculateSize(_repeated_states_codec);
      if (Temperature != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Temperature);
      }
      if (Flags != false) {
        size += 1 + 1;
      }
      if (Reaction != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BasicMaterialInfoMask other) {
      if (other == null) {
        return;
      }
      states_.Add(other.states_);
      if (other.Temperature != 0) {
        Temperature = other.Temperature;
      }
      if (other.Flags != false) {
        Flags = other.Flags;
      }
      if (other.Reaction != false) {
        Reaction = other.Reaction;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            states_.AddEntriesFrom(input, _repeated_states_codec);
            break;
          }
          case 16: {
            Flags = input.ReadBool();
            break;
          }
          case 24: {
            Reaction = input.ReadBool();
            break;
          }
          case 32: {
            Temperature = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BasicMaterialInfoMask message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum StateType {
        [pbr::OriginalName("Solid")] Solid = 0,
        [pbr::OriginalName("Liquid")] Liquid = 1,
        [pbr::OriginalName("Gas")] Gas = 2,
        [pbr::OriginalName("Powder")] Powder = 3,
        [pbr::OriginalName("Paste")] Paste = 4,
        [pbr::OriginalName("Pressed")] Pressed = 5,
      }

    }
    #endregion

  }

  public sealed partial class JobSkillAttr : pb::IMessage<JobSkillAttr> {
    private static readonly pb::MessageParser<JobSkillAttr> _parser = new pb::MessageParser<JobSkillAttr>(() => new JobSkillAttr());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JobSkillAttr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dfproto.BasicReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JobSkillAttr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JobSkillAttr(JobSkillAttr other) : this() {
      id_ = other.id_;
      key_ = other.key_;
      caption_ = other.caption_;
      captionNoun_ = other.captionNoun_;
      profession_ = other.profession_;
      labor_ = other.labor_;
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JobSkillAttr Clone() {
      return new JobSkillAttr(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "caption" field.</summary>
    public const int CaptionFieldNumber = 3;
    private string caption_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Caption {
      get { return caption_; }
      set {
        caption_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "caption_noun" field.</summary>
    public const int CaptionNounFieldNumber = 4;
    private string captionNoun_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CaptionNoun {
      get { return captionNoun_; }
      set {
        captionNoun_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "profession" field.</summary>
    public const int ProfessionFieldNumber = 5;
    private int profession_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Profession {
      get { return profession_; }
      set {
        profession_ = value;
      }
    }

    /// <summary>Field number for the "labor" field.</summary>
    public const int LaborFieldNumber = 6;
    private int labor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Labor {
      get { return labor_; }
      set {
        labor_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 7;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JobSkillAttr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JobSkillAttr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Key != other.Key) return false;
      if (Caption != other.Caption) return false;
      if (CaptionNoun != other.CaptionNoun) return false;
      if (Profession != other.Profession) return false;
      if (Labor != other.Labor) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Caption.Length != 0) hash ^= Caption.GetHashCode();
      if (CaptionNoun.Length != 0) hash ^= CaptionNoun.GetHashCode();
      if (Profession != 0) hash ^= Profession.GetHashCode();
      if (Labor != 0) hash ^= Labor.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
      if (Caption.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Caption);
      }
      if (CaptionNoun.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CaptionNoun);
      }
      if (Profession != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Profession);
      }
      if (Labor != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Labor);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Caption.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Caption);
      }
      if (CaptionNoun.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CaptionNoun);
      }
      if (Profession != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Profession);
      }
      if (Labor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Labor);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JobSkillAttr other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Caption.Length != 0) {
        Caption = other.Caption;
      }
      if (other.CaptionNoun.Length != 0) {
        CaptionNoun = other.CaptionNoun;
      }
      if (other.Profession != 0) {
        Profession = other.Profession;
      }
      if (other.Labor != 0) {
        Labor = other.Labor;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
          case 26: {
            Caption = input.ReadString();
            break;
          }
          case 34: {
            CaptionNoun = input.ReadString();
            break;
          }
          case 40: {
            Profession = input.ReadInt32();
            break;
          }
          case 48: {
            Labor = input.ReadInt32();
            break;
          }
          case 58: {
            Type = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProfessionAttr : pb::IMessage<ProfessionAttr> {
    private static readonly pb::MessageParser<ProfessionAttr> _parser = new pb::MessageParser<ProfessionAttr>(() => new ProfessionAttr());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProfessionAttr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dfproto.BasicReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfessionAttr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfessionAttr(ProfessionAttr other) : this() {
      id_ = other.id_;
      key_ = other.key_;
      caption_ = other.caption_;
      military_ = other.military_;
      canAssignLabor_ = other.canAssignLabor_;
      parent_ = other.parent_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfessionAttr Clone() {
      return new ProfessionAttr(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "caption" field.</summary>
    public const int CaptionFieldNumber = 3;
    private string caption_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Caption {
      get { return caption_; }
      set {
        caption_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "military" field.</summary>
    public const int MilitaryFieldNumber = 4;
    private bool military_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Military {
      get { return military_; }
      set {
        military_ = value;
      }
    }

    /// <summary>Field number for the "can_assign_labor" field.</summary>
    public const int CanAssignLaborFieldNumber = 5;
    private bool canAssignLabor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanAssignLabor {
      get { return canAssignLabor_; }
      set {
        canAssignLabor_ = value;
      }
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 6;
    private int parent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Parent {
      get { return parent_; }
      set {
        parent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProfessionAttr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProfessionAttr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Key != other.Key) return false;
      if (Caption != other.Caption) return false;
      if (Military != other.Military) return false;
      if (CanAssignLabor != other.CanAssignLabor) return false;
      if (Parent != other.Parent) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Caption.Length != 0) hash ^= Caption.GetHashCode();
      if (Military != false) hash ^= Military.GetHashCode();
      if (CanAssignLabor != false) hash ^= CanAssignLabor.GetHashCode();
      if (Parent != 0) hash ^= Parent.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
      if (Caption.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Caption);
      }
      if (Military != false) {
        output.WriteRawTag(32);
        output.WriteBool(Military);
      }
      if (CanAssignLabor != false) {
        output.WriteRawTag(40);
        output.WriteBool(CanAssignLabor);
      }
      if (Parent != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Parent);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Caption.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Caption);
      }
      if (Military != false) {
        size += 1 + 1;
      }
      if (CanAssignLabor != false) {
        size += 1 + 1;
      }
      if (Parent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Parent);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProfessionAttr other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Caption.Length != 0) {
        Caption = other.Caption;
      }
      if (other.Military != false) {
        Military = other.Military;
      }
      if (other.CanAssignLabor != false) {
        CanAssignLabor = other.CanAssignLabor;
      }
      if (other.Parent != 0) {
        Parent = other.Parent;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
          case 26: {
            Caption = input.ReadString();
            break;
          }
          case 32: {
            Military = input.ReadBool();
            break;
          }
          case 40: {
            CanAssignLabor = input.ReadBool();
            break;
          }
          case 48: {
            Parent = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnitLaborAttr : pb::IMessage<UnitLaborAttr> {
    private static readonly pb::MessageParser<UnitLaborAttr> _parser = new pb::MessageParser<UnitLaborAttr>(() => new UnitLaborAttr());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnitLaborAttr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dfproto.BasicReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitLaborAttr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitLaborAttr(UnitLaborAttr other) : this() {
      id_ = other.id_;
      key_ = other.key_;
      caption_ = other.caption_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitLaborAttr Clone() {
      return new UnitLaborAttr(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "caption" field.</summary>
    public const int CaptionFieldNumber = 3;
    private string caption_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Caption {
      get { return caption_; }
      set {
        caption_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnitLaborAttr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnitLaborAttr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Key != other.Key) return false;
      if (Caption != other.Caption) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Caption.Length != 0) hash ^= Caption.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
      if (Caption.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Caption);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Caption.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Caption);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnitLaborAttr other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Caption.Length != 0) {
        Caption = other.Caption;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
          case 26: {
            Caption = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NameInfo : pb::IMessage<NameInfo> {
    private static readonly pb::MessageParser<NameInfo> _parser = new pb::MessageParser<NameInfo>(() => new NameInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NameInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dfproto.BasicReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NameInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NameInfo(NameInfo other) : this() {
      firstName_ = other.firstName_;
      nickname_ = other.nickname_;
      languageId_ = other.languageId_;
      lastName_ = other.lastName_;
      englishName_ = other.englishName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NameInfo Clone() {
      return new NameInfo(this);
    }

    /// <summary>Field number for the "first_name" field.</summary>
    public const int FirstNameFieldNumber = 1;
    private string firstName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FirstName {
      get { return firstName_; }
      set {
        firstName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 2;
    private string nickname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "language_id" field.</summary>
    public const int LanguageIdFieldNumber = 3;
    private int languageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LanguageId {
      get { return languageId_; }
      set {
        languageId_ = value;
      }
    }

    /// <summary>Field number for the "last_name" field.</summary>
    public const int LastNameFieldNumber = 4;
    private string lastName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LastName {
      get { return lastName_; }
      set {
        lastName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "english_name" field.</summary>
    public const int EnglishNameFieldNumber = 5;
    private string englishName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EnglishName {
      get { return englishName_; }
      set {
        englishName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NameInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NameInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FirstName != other.FirstName) return false;
      if (Nickname != other.Nickname) return false;
      if (LanguageId != other.LanguageId) return false;
      if (LastName != other.LastName) return false;
      if (EnglishName != other.EnglishName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FirstName.Length != 0) hash ^= FirstName.GetHashCode();
      if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
      if (LanguageId != 0) hash ^= LanguageId.GetHashCode();
      if (LastName.Length != 0) hash ^= LastName.GetHashCode();
      if (EnglishName.Length != 0) hash ^= EnglishName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FirstName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FirstName);
      }
      if (Nickname.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Nickname);
      }
      if (LanguageId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LanguageId);
      }
      if (LastName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(LastName);
      }
      if (EnglishName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(EnglishName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FirstName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirstName);
      }
      if (Nickname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      if (LanguageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LanguageId);
      }
      if (LastName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LastName);
      }
      if (EnglishName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EnglishName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NameInfo other) {
      if (other == null) {
        return;
      }
      if (other.FirstName.Length != 0) {
        FirstName = other.FirstName;
      }
      if (other.Nickname.Length != 0) {
        Nickname = other.Nickname;
      }
      if (other.LanguageId != 0) {
        LanguageId = other.LanguageId;
      }
      if (other.LastName.Length != 0) {
        LastName = other.LastName;
      }
      if (other.EnglishName.Length != 0) {
        EnglishName = other.EnglishName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FirstName = input.ReadString();
            break;
          }
          case 18: {
            Nickname = input.ReadString();
            break;
          }
          case 24: {
            LanguageId = input.ReadInt32();
            break;
          }
          case 34: {
            LastName = input.ReadString();
            break;
          }
          case 42: {
            EnglishName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NameTriple : pb::IMessage<NameTriple> {
    private static readonly pb::MessageParser<NameTriple> _parser = new pb::MessageParser<NameTriple>(() => new NameTriple());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NameTriple> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dfproto.BasicReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NameTriple() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NameTriple(NameTriple other) : this() {
      normal_ = other.normal_;
      plural_ = other.plural_;
      adjective_ = other.adjective_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NameTriple Clone() {
      return new NameTriple(this);
    }

    /// <summary>Field number for the "normal" field.</summary>
    public const int NormalFieldNumber = 1;
    private string normal_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Normal {
      get { return normal_; }
      set {
        normal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "plural" field.</summary>
    public const int PluralFieldNumber = 2;
    private string plural_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Plural {
      get { return plural_; }
      set {
        plural_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "adjective" field.</summary>
    public const int AdjectiveFieldNumber = 3;
    private string adjective_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Adjective {
      get { return adjective_; }
      set {
        adjective_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NameTriple);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NameTriple other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Normal != other.Normal) return false;
      if (Plural != other.Plural) return false;
      if (Adjective != other.Adjective) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Normal.Length != 0) hash ^= Normal.GetHashCode();
      if (Plural.Length != 0) hash ^= Plural.GetHashCode();
      if (Adjective.Length != 0) hash ^= Adjective.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Normal.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Normal);
      }
      if (Plural.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Plural);
      }
      if (Adjective.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Adjective);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Normal.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Normal);
      }
      if (Plural.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Plural);
      }
      if (Adjective.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Adjective);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NameTriple other) {
      if (other == null) {
        return;
      }
      if (other.Normal.Length != 0) {
        Normal = other.Normal;
      }
      if (other.Plural.Length != 0) {
        Plural = other.Plural;
      }
      if (other.Adjective.Length != 0) {
        Adjective = other.Adjective;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Normal = input.ReadString();
            break;
          }
          case 18: {
            Plural = input.ReadString();
            break;
          }
          case 26: {
            Adjective = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnitCurseInfo : pb::IMessage<UnitCurseInfo> {
    private static readonly pb::MessageParser<UnitCurseInfo> _parser = new pb::MessageParser<UnitCurseInfo>(() => new UnitCurseInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnitCurseInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dfproto.BasicReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitCurseInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitCurseInfo(UnitCurseInfo other) : this() {
      addTags1_ = other.addTags1_;
      remTags1_ = other.remTags1_;
      addTags2_ = other.addTags2_;
      remTags2_ = other.remTags2_;
      Name = other.name_ != null ? other.Name.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitCurseInfo Clone() {
      return new UnitCurseInfo(this);
    }

    /// <summary>Field number for the "add_tags1" field.</summary>
    public const int AddTags1FieldNumber = 1;
    private uint addTags1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AddTags1 {
      get { return addTags1_; }
      set {
        addTags1_ = value;
      }
    }

    /// <summary>Field number for the "rem_tags1" field.</summary>
    public const int RemTags1FieldNumber = 2;
    private uint remTags1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RemTags1 {
      get { return remTags1_; }
      set {
        remTags1_ = value;
      }
    }

    /// <summary>Field number for the "add_tags2" field.</summary>
    public const int AddTags2FieldNumber = 3;
    private uint addTags2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AddTags2 {
      get { return addTags2_; }
      set {
        addTags2_ = value;
      }
    }

    /// <summary>Field number for the "rem_tags2" field.</summary>
    public const int RemTags2FieldNumber = 4;
    private uint remTags2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RemTags2 {
      get { return remTags2_; }
      set {
        remTags2_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 5;
    private global::Dfproto.NameTriple name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Dfproto.NameTriple Name {
      get { return name_; }
      set {
        name_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnitCurseInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnitCurseInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AddTags1 != other.AddTags1) return false;
      if (RemTags1 != other.RemTags1) return false;
      if (AddTags2 != other.AddTags2) return false;
      if (RemTags2 != other.RemTags2) return false;
      if (!object.Equals(Name, other.Name)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AddTags1 != 0) hash ^= AddTags1.GetHashCode();
      if (RemTags1 != 0) hash ^= RemTags1.GetHashCode();
      if (AddTags2 != 0) hash ^= AddTags2.GetHashCode();
      if (RemTags2 != 0) hash ^= RemTags2.GetHashCode();
      if (name_ != null) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AddTags1 != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(AddTags1);
      }
      if (RemTags1 != 0) {
        output.WriteRawTag(21);
        output.WriteFixed32(RemTags1);
      }
      if (AddTags2 != 0) {
        output.WriteRawTag(29);
        output.WriteFixed32(AddTags2);
      }
      if (RemTags2 != 0) {
        output.WriteRawTag(37);
        output.WriteFixed32(RemTags2);
      }
      if (name_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AddTags1 != 0) {
        size += 1 + 4;
      }
      if (RemTags1 != 0) {
        size += 1 + 4;
      }
      if (AddTags2 != 0) {
        size += 1 + 4;
      }
      if (RemTags2 != 0) {
        size += 1 + 4;
      }
      if (name_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnitCurseInfo other) {
      if (other == null) {
        return;
      }
      if (other.AddTags1 != 0) {
        AddTags1 = other.AddTags1;
      }
      if (other.RemTags1 != 0) {
        RemTags1 = other.RemTags1;
      }
      if (other.AddTags2 != 0) {
        AddTags2 = other.AddTags2;
      }
      if (other.RemTags2 != 0) {
        RemTags2 = other.RemTags2;
      }
      if (other.name_ != null) {
        if (name_ == null) {
          name_ = new global::Dfproto.NameTriple();
        }
        Name.MergeFrom(other.Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            AddTags1 = input.ReadFixed32();
            break;
          }
          case 21: {
            RemTags1 = input.ReadFixed32();
            break;
          }
          case 29: {
            AddTags2 = input.ReadFixed32();
            break;
          }
          case 37: {
            RemTags2 = input.ReadFixed32();
            break;
          }
          case 42: {
            if (name_ == null) {
              name_ = new global::Dfproto.NameTriple();
            }
            input.ReadMessage(name_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SkillInfo : pb::IMessage<SkillInfo> {
    private static readonly pb::MessageParser<SkillInfo> _parser = new pb::MessageParser<SkillInfo>(() => new SkillInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dfproto.BasicReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillInfo(SkillInfo other) : this() {
      id_ = other.id_;
      level_ = other.level_;
      experience_ = other.experience_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillInfo Clone() {
      return new SkillInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "experience" field.</summary>
    public const int ExperienceFieldNumber = 3;
    private int experience_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Experience {
      get { return experience_; }
      set {
        experience_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkillInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkillInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Level != other.Level) return false;
      if (Experience != other.Experience) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Experience != 0) hash ^= Experience.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      if (Experience != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Experience);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Experience != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Experience);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkillInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Experience != 0) {
        Experience = other.Experience;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
          case 24: {
            Experience = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnitMiscTrait : pb::IMessage<UnitMiscTrait> {
    private static readonly pb::MessageParser<UnitMiscTrait> _parser = new pb::MessageParser<UnitMiscTrait>(() => new UnitMiscTrait());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnitMiscTrait> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dfproto.BasicReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitMiscTrait() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitMiscTrait(UnitMiscTrait other) : this() {
      id_ = other.id_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitMiscTrait Clone() {
      return new UnitMiscTrait(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnitMiscTrait);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnitMiscTrait other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnitMiscTrait other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BasicUnitInfo : pb::IMessage<BasicUnitInfo> {
    private static readonly pb::MessageParser<BasicUnitInfo> _parser = new pb::MessageParser<BasicUnitInfo>(() => new BasicUnitInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BasicUnitInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dfproto.BasicReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasicUnitInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasicUnitInfo(BasicUnitInfo other) : this() {
      unitId_ = other.unitId_;
      posX_ = other.posX_;
      posY_ = other.posY_;
      posZ_ = other.posZ_;
      Name = other.name_ != null ? other.Name.Clone() : null;
      flags1_ = other.flags1_;
      flags2_ = other.flags2_;
      flags3_ = other.flags3_;
      race_ = other.race_;
      caste_ = other.caste_;
      gender_ = other.gender_;
      civId_ = other.civId_;
      histfigId_ = other.histfigId_;
      deathId_ = other.deathId_;
      deathFlags_ = other.deathFlags_;
      squadId_ = other.squadId_;
      squadPosition_ = other.squadPosition_;
      profession_ = other.profession_;
      customProfession_ = other.customProfession_;
      labors_ = other.labors_.Clone();
      skills_ = other.skills_.Clone();
      miscTraits_ = other.miscTraits_.Clone();
      Curse = other.curse_ != null ? other.Curse.Clone() : null;
      burrows_ = other.burrows_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasicUnitInfo Clone() {
      return new BasicUnitInfo(this);
    }

    /// <summary>Field number for the "unit_id" field.</summary>
    public const int UnitIdFieldNumber = 1;
    private int unitId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    /// <summary>Field number for the "pos_x" field.</summary>
    public const int PosXFieldNumber = 13;
    private int posX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "pos_y" field.</summary>
    public const int PosYFieldNumber = 14;
    private int posY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "pos_z" field.</summary>
    public const int PosZFieldNumber = 15;
    private int posZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosZ {
      get { return posZ_; }
      set {
        posZ_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private global::Dfproto.NameInfo name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Dfproto.NameInfo Name {
      get { return name_; }
      set {
        name_ = value;
      }
    }

    /// <summary>Field number for the "flags1" field.</summary>
    public const int Flags1FieldNumber = 3;
    private uint flags1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flags1 {
      get { return flags1_; }
      set {
        flags1_ = value;
      }
    }

    /// <summary>Field number for the "flags2" field.</summary>
    public const int Flags2FieldNumber = 4;
    private uint flags2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flags2 {
      get { return flags2_; }
      set {
        flags2_ = value;
      }
    }

    /// <summary>Field number for the "flags3" field.</summary>
    public const int Flags3FieldNumber = 5;
    private uint flags3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flags3 {
      get { return flags3_; }
      set {
        flags3_ = value;
      }
    }

    /// <summary>Field number for the "race" field.</summary>
    public const int RaceFieldNumber = 6;
    private int race_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Race {
      get { return race_; }
      set {
        race_ = value;
      }
    }

    /// <summary>Field number for the "caste" field.</summary>
    public const int CasteFieldNumber = 7;
    private int caste_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Caste {
      get { return caste_; }
      set {
        caste_ = value;
      }
    }

    /// <summary>Field number for the "gender" field.</summary>
    public const int GenderFieldNumber = 8;
    private int gender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gender {
      get { return gender_; }
      set {
        gender_ = value;
      }
    }

    /// <summary>Field number for the "civ_id" field.</summary>
    public const int CivIdFieldNumber = 9;
    private int civId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CivId {
      get { return civId_; }
      set {
        civId_ = value;
      }
    }

    /// <summary>Field number for the "histfig_id" field.</summary>
    public const int HistfigIdFieldNumber = 10;
    private int histfigId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HistfigId {
      get { return histfigId_; }
      set {
        histfigId_ = value;
      }
    }

    /// <summary>Field number for the "death_id" field.</summary>
    public const int DeathIdFieldNumber = 17;
    private int deathId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeathId {
      get { return deathId_; }
      set {
        deathId_ = value;
      }
    }

    /// <summary>Field number for the "death_flags" field.</summary>
    public const int DeathFlagsFieldNumber = 18;
    private uint deathFlags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DeathFlags {
      get { return deathFlags_; }
      set {
        deathFlags_ = value;
      }
    }

    /// <summary>Field number for the "squad_id" field.</summary>
    public const int SquadIdFieldNumber = 19;
    private int squadId_;
    /// <summary>
    /// IF mask.profession:
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SquadId {
      get { return squadId_; }
      set {
        squadId_ = value;
      }
    }

    /// <summary>Field number for the "squad_position" field.</summary>
    public const int SquadPositionFieldNumber = 20;
    private int squadPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SquadPosition {
      get { return squadPosition_; }
      set {
        squadPosition_ = value;
      }
    }

    /// <summary>Field number for the "profession" field.</summary>
    public const int ProfessionFieldNumber = 22;
    private int profession_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Profession {
      get { return profession_; }
      set {
        profession_ = value;
      }
    }

    /// <summary>Field number for the "custom_profession" field.</summary>
    public const int CustomProfessionFieldNumber = 23;
    private string customProfession_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomProfession {
      get { return customProfession_; }
      set {
        customProfession_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "labors" field.</summary>
    public const int LaborsFieldNumber = 11;
    private static readonly pb::FieldCodec<int> _repeated_labors_codec
        = pb::FieldCodec.ForInt32(90);
    private readonly pbc::RepeatedField<int> labors_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// IF mask.labors:
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Labors {
      get { return labors_; }
    }

    /// <summary>Field number for the "skills" field.</summary>
    public const int SkillsFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Dfproto.SkillInfo> _repeated_skills_codec
        = pb::FieldCodec.ForMessage(98, global::Dfproto.SkillInfo.Parser);
    private readonly pbc::RepeatedField<global::Dfproto.SkillInfo> skills_ = new pbc::RepeatedField<global::Dfproto.SkillInfo>();
    /// <summary>
    /// IF mask.skills:
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Dfproto.SkillInfo> Skills {
      get { return skills_; }
    }

    /// <summary>Field number for the "misc_traits" field.</summary>
    public const int MiscTraitsFieldNumber = 24;
    private static readonly pb::FieldCodec<global::Dfproto.UnitMiscTrait> _repeated_miscTraits_codec
        = pb::FieldCodec.ForMessage(194, global::Dfproto.UnitMiscTrait.Parser);
    private readonly pbc::RepeatedField<global::Dfproto.UnitMiscTrait> miscTraits_ = new pbc::RepeatedField<global::Dfproto.UnitMiscTrait>();
    /// <summary>
    /// IF mask.misc_traits:
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Dfproto.UnitMiscTrait> MiscTraits {
      get { return miscTraits_; }
    }

    /// <summary>Field number for the "curse" field.</summary>
    public const int CurseFieldNumber = 16;
    private global::Dfproto.UnitCurseInfo curse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Dfproto.UnitCurseInfo Curse {
      get { return curse_; }
      set {
        curse_ = value;
      }
    }

    /// <summary>Field number for the "burrows" field.</summary>
    public const int BurrowsFieldNumber = 21;
    private static readonly pb::FieldCodec<int> _repeated_burrows_codec
        = pb::FieldCodec.ForInt32(170);
    private readonly pbc::RepeatedField<int> burrows_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Burrows {
      get { return burrows_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BasicUnitInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BasicUnitInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnitId != other.UnitId) return false;
      if (PosX != other.PosX) return false;
      if (PosY != other.PosY) return false;
      if (PosZ != other.PosZ) return false;
      if (!object.Equals(Name, other.Name)) return false;
      if (Flags1 != other.Flags1) return false;
      if (Flags2 != other.Flags2) return false;
      if (Flags3 != other.Flags3) return false;
      if (Race != other.Race) return false;
      if (Caste != other.Caste) return false;
      if (Gender != other.Gender) return false;
      if (CivId != other.CivId) return false;
      if (HistfigId != other.HistfigId) return false;
      if (DeathId != other.DeathId) return false;
      if (DeathFlags != other.DeathFlags) return false;
      if (SquadId != other.SquadId) return false;
      if (SquadPosition != other.SquadPosition) return false;
      if (Profession != other.Profession) return false;
      if (CustomProfession != other.CustomProfession) return false;
      if(!labors_.Equals(other.labors_)) return false;
      if(!skills_.Equals(other.skills_)) return false;
      if(!miscTraits_.Equals(other.miscTraits_)) return false;
      if (!object.Equals(Curse, other.Curse)) return false;
      if(!burrows_.Equals(other.burrows_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnitId != 0) hash ^= UnitId.GetHashCode();
      if (PosX != 0) hash ^= PosX.GetHashCode();
      if (PosY != 0) hash ^= PosY.GetHashCode();
      if (PosZ != 0) hash ^= PosZ.GetHashCode();
      if (name_ != null) hash ^= Name.GetHashCode();
      if (Flags1 != 0) hash ^= Flags1.GetHashCode();
      if (Flags2 != 0) hash ^= Flags2.GetHashCode();
      if (Flags3 != 0) hash ^= Flags3.GetHashCode();
      if (Race != 0) hash ^= Race.GetHashCode();
      if (Caste != 0) hash ^= Caste.GetHashCode();
      if (Gender != 0) hash ^= Gender.GetHashCode();
      if (CivId != 0) hash ^= CivId.GetHashCode();
      if (HistfigId != 0) hash ^= HistfigId.GetHashCode();
      if (DeathId != 0) hash ^= DeathId.GetHashCode();
      if (DeathFlags != 0) hash ^= DeathFlags.GetHashCode();
      if (SquadId != 0) hash ^= SquadId.GetHashCode();
      if (SquadPosition != 0) hash ^= SquadPosition.GetHashCode();
      if (Profession != 0) hash ^= Profession.GetHashCode();
      if (CustomProfession.Length != 0) hash ^= CustomProfession.GetHashCode();
      hash ^= labors_.GetHashCode();
      hash ^= skills_.GetHashCode();
      hash ^= miscTraits_.GetHashCode();
      if (curse_ != null) hash ^= Curse.GetHashCode();
      hash ^= burrows_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnitId);
      }
      if (name_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Name);
      }
      if (Flags1 != 0) {
        output.WriteRawTag(29);
        output.WriteFixed32(Flags1);
      }
      if (Flags2 != 0) {
        output.WriteRawTag(37);
        output.WriteFixed32(Flags2);
      }
      if (Flags3 != 0) {
        output.WriteRawTag(45);
        output.WriteFixed32(Flags3);
      }
      if (Race != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Race);
      }
      if (Caste != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Caste);
      }
      if (Gender != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Gender);
      }
      if (CivId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CivId);
      }
      if (HistfigId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(HistfigId);
      }
      labors_.WriteTo(output, _repeated_labors_codec);
      skills_.WriteTo(output, _repeated_skills_codec);
      if (PosX != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(PosX);
      }
      if (PosY != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(PosY);
      }
      if (PosZ != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(PosZ);
      }
      if (curse_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Curse);
      }
      if (DeathId != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(DeathId);
      }
      if (DeathFlags != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(DeathFlags);
      }
      if (SquadId != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(SquadId);
      }
      if (SquadPosition != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(SquadPosition);
      }
      burrows_.WriteTo(output, _repeated_burrows_codec);
      if (Profession != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(Profession);
      }
      if (CustomProfession.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(CustomProfession);
      }
      miscTraits_.WriteTo(output, _repeated_miscTraits_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnitId);
      }
      if (PosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosX);
      }
      if (PosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosY);
      }
      if (PosZ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosZ);
      }
      if (name_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Name);
      }
      if (Flags1 != 0) {
        size += 1 + 4;
      }
      if (Flags2 != 0) {
        size += 1 + 4;
      }
      if (Flags3 != 0) {
        size += 1 + 4;
      }
      if (Race != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Race);
      }
      if (Caste != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Caste);
      }
      if (Gender != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gender);
      }
      if (CivId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CivId);
      }
      if (HistfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HistfigId);
      }
      if (DeathId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DeathId);
      }
      if (DeathFlags != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DeathFlags);
      }
      if (SquadId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SquadId);
      }
      if (SquadPosition != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SquadPosition);
      }
      if (Profession != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Profession);
      }
      if (CustomProfession.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CustomProfession);
      }
      size += labors_.CalculateSize(_repeated_labors_codec);
      size += skills_.CalculateSize(_repeated_skills_codec);
      size += miscTraits_.CalculateSize(_repeated_miscTraits_codec);
      if (curse_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Curse);
      }
      size += burrows_.CalculateSize(_repeated_burrows_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BasicUnitInfo other) {
      if (other == null) {
        return;
      }
      if (other.UnitId != 0) {
        UnitId = other.UnitId;
      }
      if (other.PosX != 0) {
        PosX = other.PosX;
      }
      if (other.PosY != 0) {
        PosY = other.PosY;
      }
      if (other.PosZ != 0) {
        PosZ = other.PosZ;
      }
      if (other.name_ != null) {
        if (name_ == null) {
          name_ = new global::Dfproto.NameInfo();
        }
        Name.MergeFrom(other.Name);
      }
      if (other.Flags1 != 0) {
        Flags1 = other.Flags1;
      }
      if (other.Flags2 != 0) {
        Flags2 = other.Flags2;
      }
      if (other.Flags3 != 0) {
        Flags3 = other.Flags3;
      }
      if (other.Race != 0) {
        Race = other.Race;
      }
      if (other.Caste != 0) {
        Caste = other.Caste;
      }
      if (other.Gender != 0) {
        Gender = other.Gender;
      }
      if (other.CivId != 0) {
        CivId = other.CivId;
      }
      if (other.HistfigId != 0) {
        HistfigId = other.HistfigId;
      }
      if (other.DeathId != 0) {
        DeathId = other.DeathId;
      }
      if (other.DeathFlags != 0) {
        DeathFlags = other.DeathFlags;
      }
      if (other.SquadId != 0) {
        SquadId = other.SquadId;
      }
      if (other.SquadPosition != 0) {
        SquadPosition = other.SquadPosition;
      }
      if (other.Profession != 0) {
        Profession = other.Profession;
      }
      if (other.CustomProfession.Length != 0) {
        CustomProfession = other.CustomProfession;
      }
      labors_.Add(other.labors_);
      skills_.Add(other.skills_);
      miscTraits_.Add(other.miscTraits_);
      if (other.curse_ != null) {
        if (curse_ == null) {
          curse_ = new global::Dfproto.UnitCurseInfo();
        }
        Curse.MergeFrom(other.Curse);
      }
      burrows_.Add(other.burrows_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnitId = input.ReadInt32();
            break;
          }
          case 18: {
            if (name_ == null) {
              name_ = new global::Dfproto.NameInfo();
            }
            input.ReadMessage(name_);
            break;
          }
          case 29: {
            Flags1 = input.ReadFixed32();
            break;
          }
          case 37: {
            Flags2 = input.ReadFixed32();
            break;
          }
          case 45: {
            Flags3 = input.ReadFixed32();
            break;
          }
          case 48: {
            Race = input.ReadInt32();
            break;
          }
          case 56: {
            Caste = input.ReadInt32();
            break;
          }
          case 64: {
            Gender = input.ReadInt32();
            break;
          }
          case 72: {
            CivId = input.ReadInt32();
            break;
          }
          case 80: {
            HistfigId = input.ReadInt32();
            break;
          }
          case 90:
          case 88: {
            labors_.AddEntriesFrom(input, _repeated_labors_codec);
            break;
          }
          case 98: {
            skills_.AddEntriesFrom(input, _repeated_skills_codec);
            break;
          }
          case 104: {
            PosX = input.ReadInt32();
            break;
          }
          case 112: {
            PosY = input.ReadInt32();
            break;
          }
          case 120: {
            PosZ = input.ReadInt32();
            break;
          }
          case 130: {
            if (curse_ == null) {
              curse_ = new global::Dfproto.UnitCurseInfo();
            }
            input.ReadMessage(curse_);
            break;
          }
          case 136: {
            DeathId = input.ReadInt32();
            break;
          }
          case 144: {
            DeathFlags = input.ReadUInt32();
            break;
          }
          case 152: {
            SquadId = input.ReadInt32();
            break;
          }
          case 160: {
            SquadPosition = input.ReadInt32();
            break;
          }
          case 170:
          case 168: {
            burrows_.AddEntriesFrom(input, _repeated_burrows_codec);
            break;
          }
          case 176: {
            Profession = input.ReadInt32();
            break;
          }
          case 186: {
            CustomProfession = input.ReadString();
            break;
          }
          case 194: {
            miscTraits_.AddEntriesFrom(input, _repeated_miscTraits_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BasicUnitInfoMask : pb::IMessage<BasicUnitInfoMask> {
    private static readonly pb::MessageParser<BasicUnitInfoMask> _parser = new pb::MessageParser<BasicUnitInfoMask>(() => new BasicUnitInfoMask());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BasicUnitInfoMask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dfproto.BasicReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasicUnitInfoMask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasicUnitInfoMask(BasicUnitInfoMask other) : this() {
      labors_ = other.labors_;
      skills_ = other.skills_;
      profession_ = other.profession_;
      miscTraits_ = other.miscTraits_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasicUnitInfoMask Clone() {
      return new BasicUnitInfoMask(this);
    }

    /// <summary>Field number for the "labors" field.</summary>
    public const int LaborsFieldNumber = 1;
    private bool labors_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Labors {
      get { return labors_; }
      set {
        labors_ = value;
      }
    }

    /// <summary>Field number for the "skills" field.</summary>
    public const int SkillsFieldNumber = 2;
    private bool skills_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Skills {
      get { return skills_; }
      set {
        skills_ = value;
      }
    }

    /// <summary>Field number for the "profession" field.</summary>
    public const int ProfessionFieldNumber = 3;
    private bool profession_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Profession {
      get { return profession_; }
      set {
        profession_ = value;
      }
    }

    /// <summary>Field number for the "misc_traits" field.</summary>
    public const int MiscTraitsFieldNumber = 4;
    private bool miscTraits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MiscTraits {
      get { return miscTraits_; }
      set {
        miscTraits_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BasicUnitInfoMask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BasicUnitInfoMask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Labors != other.Labors) return false;
      if (Skills != other.Skills) return false;
      if (Profession != other.Profession) return false;
      if (MiscTraits != other.MiscTraits) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Labors != false) hash ^= Labors.GetHashCode();
      if (Skills != false) hash ^= Skills.GetHashCode();
      if (Profession != false) hash ^= Profession.GetHashCode();
      if (MiscTraits != false) hash ^= MiscTraits.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Labors != false) {
        output.WriteRawTag(8);
        output.WriteBool(Labors);
      }
      if (Skills != false) {
        output.WriteRawTag(16);
        output.WriteBool(Skills);
      }
      if (Profession != false) {
        output.WriteRawTag(24);
        output.WriteBool(Profession);
      }
      if (MiscTraits != false) {
        output.WriteRawTag(32);
        output.WriteBool(MiscTraits);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Labors != false) {
        size += 1 + 1;
      }
      if (Skills != false) {
        size += 1 + 1;
      }
      if (Profession != false) {
        size += 1 + 1;
      }
      if (MiscTraits != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BasicUnitInfoMask other) {
      if (other == null) {
        return;
      }
      if (other.Labors != false) {
        Labors = other.Labors;
      }
      if (other.Skills != false) {
        Skills = other.Skills;
      }
      if (other.Profession != false) {
        Profession = other.Profession;
      }
      if (other.MiscTraits != false) {
        MiscTraits = other.MiscTraits;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Labors = input.ReadBool();
            break;
          }
          case 16: {
            Skills = input.ReadBool();
            break;
          }
          case 24: {
            Profession = input.ReadBool();
            break;
          }
          case 32: {
            MiscTraits = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BasicSquadInfo : pb::IMessage<BasicSquadInfo> {
    private static readonly pb::MessageParser<BasicSquadInfo> _parser = new pb::MessageParser<BasicSquadInfo>(() => new BasicSquadInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BasicSquadInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dfproto.BasicReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasicSquadInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasicSquadInfo(BasicSquadInfo other) : this() {
      squadId_ = other.squadId_;
      Name = other.name_ != null ? other.Name.Clone() : null;
      alias_ = other.alias_;
      members_ = other.members_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasicSquadInfo Clone() {
      return new BasicSquadInfo(this);
    }

    /// <summary>Field number for the "squad_id" field.</summary>
    public const int SquadIdFieldNumber = 1;
    private int squadId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SquadId {
      get { return squadId_; }
      set {
        squadId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private global::Dfproto.NameInfo name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Dfproto.NameInfo Name {
      get { return name_; }
      set {
        name_ = value;
      }
    }

    /// <summary>Field number for the "alias" field.</summary>
    public const int AliasFieldNumber = 3;
    private string alias_ = "";
    /// <summary>
    /// A special field completely overriding the name:
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Alias {
      get { return alias_; }
      set {
        alias_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_members_codec
        = pb::FieldCodec.ForSInt32(34);
    private readonly pbc::RepeatedField<int> members_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// Member histfig ids:
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Members {
      get { return members_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BasicSquadInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BasicSquadInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SquadId != other.SquadId) return false;
      if (!object.Equals(Name, other.Name)) return false;
      if (Alias != other.Alias) return false;
      if(!members_.Equals(other.members_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SquadId != 0) hash ^= SquadId.GetHashCode();
      if (name_ != null) hash ^= Name.GetHashCode();
      if (Alias.Length != 0) hash ^= Alias.GetHashCode();
      hash ^= members_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SquadId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SquadId);
      }
      if (name_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Name);
      }
      if (Alias.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Alias);
      }
      members_.WriteTo(output, _repeated_members_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SquadId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SquadId);
      }
      if (name_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Name);
      }
      if (Alias.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Alias);
      }
      size += members_.CalculateSize(_repeated_members_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BasicSquadInfo other) {
      if (other == null) {
        return;
      }
      if (other.SquadId != 0) {
        SquadId = other.SquadId;
      }
      if (other.name_ != null) {
        if (name_ == null) {
          name_ = new global::Dfproto.NameInfo();
        }
        Name.MergeFrom(other.Name);
      }
      if (other.Alias.Length != 0) {
        Alias = other.Alias;
      }
      members_.Add(other.members_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SquadId = input.ReadInt32();
            break;
          }
          case 18: {
            if (name_ == null) {
              name_ = new global::Dfproto.NameInfo();
            }
            input.ReadMessage(name_);
            break;
          }
          case 26: {
            Alias = input.ReadString();
            break;
          }
          case 34:
          case 32: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnitLaborState : pb::IMessage<UnitLaborState> {
    private static readonly pb::MessageParser<UnitLaborState> _parser = new pb::MessageParser<UnitLaborState>(() => new UnitLaborState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnitLaborState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dfproto.BasicReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitLaborState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitLaborState(UnitLaborState other) : this() {
      unitId_ = other.unitId_;
      labor_ = other.labor_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitLaborState Clone() {
      return new UnitLaborState(this);
    }

    /// <summary>Field number for the "unit_id" field.</summary>
    public const int UnitIdFieldNumber = 1;
    private int unitId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    /// <summary>Field number for the "labor" field.</summary>
    public const int LaborFieldNumber = 2;
    private int labor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Labor {
      get { return labor_; }
      set {
        labor_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private bool value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnitLaborState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnitLaborState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnitId != other.UnitId) return false;
      if (Labor != other.Labor) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnitId != 0) hash ^= UnitId.GetHashCode();
      if (Labor != 0) hash ^= Labor.GetHashCode();
      if (Value != false) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnitId);
      }
      if (Labor != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Labor);
      }
      if (Value != false) {
        output.WriteRawTag(24);
        output.WriteBool(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnitId);
      }
      if (Labor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Labor);
      }
      if (Value != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnitLaborState other) {
      if (other == null) {
        return;
      }
      if (other.UnitId != 0) {
        UnitId = other.UnitId;
      }
      if (other.Labor != 0) {
        Labor = other.Labor;
      }
      if (other.Value != false) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnitId = input.ReadInt32();
            break;
          }
          case 16: {
            Labor = input.ReadInt32();
            break;
          }
          case 24: {
            Value = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
