// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RemoteFortressReader.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace RemoteFortressReader {

  /// <summary>Holder for reflection information generated from RemoteFortressReader.proto</summary>
  public static partial class RemoteFortressReaderReflection {

    #region Descriptor
    /// <summary>File descriptor for RemoteFortressReader.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RemoteFortressReaderReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChpSZW1vdGVGb3J0cmVzc1JlYWRlci5wcm90bxIUUmVtb3RlRm9ydHJlc3NS",
            "ZWFkZXIiKAoFQ29vcmQSCQoBeBgBIAEoBRIJCgF5GAIgASgFEgkKAXoYAyAB",
            "KAUipgIKCFRpbGV0eXBlEgoKAmlkGAEgASgFEgwKBG5hbWUYAiABKAkSDwoH",
            "Y2FwdGlvbhgDIAEoCRIyCgVzaGFwZRgEIAEoDjIjLlJlbW90ZUZvcnRyZXNz",
            "UmVhZGVyLlRpbGV0eXBlU2hhcGUSNgoHc3BlY2lhbBgFIAEoDjIlLlJlbW90",
            "ZUZvcnRyZXNzUmVhZGVyLlRpbGV0eXBlU3BlY2lhbBI4CghtYXRlcmlhbBgG",
            "IAEoDjImLlJlbW90ZUZvcnRyZXNzUmVhZGVyLlRpbGV0eXBlTWF0ZXJpYWwS",
            "NgoHdmFyaWFudBgHIAEoDjIlLlJlbW90ZUZvcnRyZXNzUmVhZGVyLlRpbGV0",
            "eXBlVmFyaWFudBIRCglkaXJlY3Rpb24YCCABKAkiRQoMVGlsZXR5cGVMaXN0",
            "EjUKDXRpbGV0eXBlX2xpc3QYASADKAsyHi5SZW1vdGVGb3J0cmVzc1JlYWRl",
            "ci5UaWxldHlwZSJfCg9CdWlsZGluZ0V4dGVudHMSDQoFcG9zX3gYASABKAUS",
            "DQoFcG9zX3kYAiABKAUSDQoFd2lkdGgYAyABKAUSDgoGaGVpZ2h0GAQgASgF",
            "Eg8KB2V4dGVudHMYBSADKAUiRgoMQnVpbGRpbmdJdGVtEigKBGl0ZW0YASAB",
            "KAsyGi5SZW1vdGVGb3J0cmVzc1JlYWRlci5JdGVtEgwKBG1vZGUYAiABKAUi",
            "zAMKEEJ1aWxkaW5nSW5zdGFuY2USDQoFaW5kZXgYASABKAUSEQoJcG9zX3hf",
            "bWluGAIgASgFEhEKCXBvc195X21pbhgDIAEoBRIRCglwb3Nfel9taW4YBCAB",
            "KAUSEQoJcG9zX3hfbWF4GAUgASgFEhEKCXBvc195X21heBgGIAEoBRIRCglw",
            "b3Nfel9tYXgYByABKAUSOQoNYnVpbGRpbmdfdHlwZRgIIAEoCzIiLlJlbW90",
            "ZUZvcnRyZXNzUmVhZGVyLkJ1aWxkaW5nVHlwZRIvCghtYXRlcmlhbBgJIAEo",
            "CzIdLlJlbW90ZUZvcnRyZXNzUmVhZGVyLk1hdFBhaXISFgoOYnVpbGRpbmdf",
            "ZmxhZ3MYCiABKA0SDwoHaXNfcm9vbRgLIAEoCBIzCgRyb29tGAwgASgLMiUu",
            "UmVtb3RlRm9ydHJlc3NSZWFkZXIuQnVpbGRpbmdFeHRlbnRzEjoKCWRpcmVj",
            "dGlvbhgNIAEoDjInLlJlbW90ZUZvcnRyZXNzUmVhZGVyLkJ1aWxkaW5nRGly",
            "ZWN0aW9uEjEKBWl0ZW1zGA4gAygLMiIuUmVtb3RlRm9ydHJlc3NSZWFkZXIu",
            "QnVpbGRpbmdJdGVtIlAKCVJpdmVyRWRnZRIPCgdtaW5fcG9zGAEgASgFEg8K",
            "B21heF9wb3MYAiABKAUSDgoGYWN0aXZlGAMgASgFEhEKCWVsZXZhdGlvbhgE",
            "IAEoBSLJAQoJUml2ZXJUaWxlEi4KBW5vcnRoGAEgASgLMh8uUmVtb3RlRm9y",
            "dHJlc3NSZWFkZXIuUml2ZXJFZGdlEi4KBXNvdXRoGAIgASgLMh8uUmVtb3Rl",
            "Rm9ydHJlc3NSZWFkZXIuUml2ZXJFZGdlEi0KBGVhc3QYAyABKAsyHy5SZW1v",
            "dGVGb3J0cmVzc1JlYWRlci5SaXZlckVkZ2USLQoEd2VzdBgEIAEoCzIfLlJl",
            "bW90ZUZvcnRyZXNzUmVhZGVyLlJpdmVyRWRnZSKpAQoHU3BhdHRlchIvCght",
            "YXRlcmlhbBgBIAEoCzIdLlJlbW90ZUZvcnRyZXNzUmVhZGVyLk1hdFBhaXIS",
            "DgoGYW1vdW50GAIgASgFEjAKBXN0YXRlGAMgASgOMiEuUmVtb3RlRm9ydHJl",
            "c3NSZWFkZXIuTWF0dGVyU3RhdGUSKwoEaXRlbRgEIAEoCzIdLlJlbW90ZUZv",
            "cnRyZXNzUmVhZGVyLk1hdFBhaXIiPgoLU3BhdHRlclBpbGUSLwoIc3BhdHRl",
            "cnMYASADKAsyHS5SZW1vdGVGb3J0cmVzc1JlYWRlci5TcGF0dGVyIu4BCgRJ",
            "dGVtEgoKAmlkGAEgASgFEigKA3BvcxgCIAEoCzIbLlJlbW90ZUZvcnRyZXNz",
            "UmVhZGVyLkNvb3JkEg4KBmZsYWdzMRgDIAEoDRIOCgZmbGFnczIYBCABKA0S",
            "KwoEdHlwZRgFIAEoCzIdLlJlbW90ZUZvcnRyZXNzUmVhZGVyLk1hdFBhaXIS",
            "LwoIbWF0ZXJpYWwYBiABKAsyHS5SZW1vdGVGb3J0cmVzc1JlYWRlci5NYXRQ",
            "YWlyEjIKA2R5ZRgHIAEoCzIlLlJlbW90ZUZvcnRyZXNzUmVhZGVyLkNvbG9y",
            "RGVmaW5pdGlvbiKmBgoITWFwQmxvY2sSDQoFbWFwX3gYASABKAUSDQoFbWFw",
            "X3kYAiABKAUSDQoFbWFwX3oYAyABKAUSDQoFdGlsZXMYBCADKAUSMAoJbWF0",
            "ZXJpYWxzGAUgAygLMh0uUmVtb3RlRm9ydHJlc3NSZWFkZXIuTWF0UGFpchI2",
            "Cg9sYXllcl9tYXRlcmlhbHMYBiADKAsyHS5SZW1vdGVGb3J0cmVzc1JlYWRl",
            "ci5NYXRQYWlyEjUKDnZlaW5fbWF0ZXJpYWxzGAcgAygLMh0uUmVtb3RlRm9y",
            "dHJlc3NSZWFkZXIuTWF0UGFpchI1Cg5iYXNlX21hdGVyaWFscxgIIAMoCzId",
            "LlJlbW90ZUZvcnRyZXNzUmVhZGVyLk1hdFBhaXISDQoFbWFnbWEYCSADKAUS",
            "DQoFd2F0ZXIYCiADKAUSDgoGaGlkZGVuGAsgAygIEg0KBWxpZ2h0GAwgAygI",
            "EhQKDHN1YnRlcnJhbmVhbhgNIAMoCBIPCgdvdXRzaWRlGA4gAygIEg8KB2Fx",
            "dWlmZXIYDyADKAgSFgoOd2F0ZXJfc3RhZ25hbnQYECADKAgSEgoKd2F0ZXJf",
            "c2FsdBgRIAMoCBI5ChJjb25zdHJ1Y3Rpb25faXRlbXMYEiADKAsyHS5SZW1v",
            "dGVGb3J0cmVzc1JlYWRlci5NYXRQYWlyEjkKCWJ1aWxkaW5ncxgTIAMoCzIm",
            "LlJlbW90ZUZvcnRyZXNzUmVhZGVyLkJ1aWxkaW5nSW5zdGFuY2USFAoMdHJl",
            "ZV9wZXJjZW50GBQgAygFEg4KBnRyZWVfeBgVIAMoBRIOCgZ0cmVlX3kYFiAD",
            "KAUSDgoGdHJlZV96GBcgAygFEkYKFHRpbGVfZGlnX2Rlc2lnbmF0aW9uGBgg",
            "AygOMiguUmVtb3RlRm9ydHJlc3NSZWFkZXIuVGlsZURpZ0Rlc2lnbmF0aW9u",
            "EjYKC3NwYXR0ZXJQaWxlGBkgAygLMiEuUmVtb3RlRm9ydHJlc3NSZWFkZXIu",
            "U3BhdHRlclBpbGUSKQoFaXRlbXMYGiADKAsyGi5SZW1vdGVGb3J0cmVzc1Jl",
            "YWRlci5JdGVtIi4KB01hdFBhaXISEAoIbWF0X3R5cGUYASABKAUSEQoJbWF0",
            "X2luZGV4GAIgASgFIjsKD0NvbG9yRGVmaW5pdGlvbhILCgNyZWQYASABKAUS",
            "DQoFZ3JlZW4YAiABKAUSDAoEYmx1ZRgDIAEoBSKbAQoSTWF0ZXJpYWxEZWZp",
            "bml0aW9uEi8KCG1hdF9wYWlyGAEgASgLMh0uUmVtb3RlRm9ydHJlc3NSZWFk",
            "ZXIuTWF0UGFpchIKCgJpZBgCIAEoCRIMCgRuYW1lGAMgASgJEjoKC3N0YXRl",
            "X2NvbG9yGAQgASgLMiUuUmVtb3RlRm9ydHJlc3NSZWFkZXIuQ29sb3JEZWZp",
            "bml0aW9uIlgKDEJ1aWxkaW5nVHlwZRIVCg1idWlsZGluZ190eXBlGAEgASgF",
            "EhgKEGJ1aWxkaW5nX3N1YnR5cGUYAiABKAUSFwoPYnVpbGRpbmdfY3VzdG9t",
            "GAMgASgFImkKEkJ1aWxkaW5nRGVmaW5pdGlvbhI5Cg1idWlsZGluZ190eXBl",
            "GAEgASgLMiIuUmVtb3RlRm9ydHJlc3NSZWFkZXIuQnVpbGRpbmdUeXBlEgoK",
            "AmlkGAIgASgJEgwKBG5hbWUYAyABKAkiTwoMQnVpbGRpbmdMaXN0Ej8KDWJ1",
            "aWxkaW5nX2xpc3QYASADKAsyKC5SZW1vdGVGb3J0cmVzc1JlYWRlci5CdWls",
            "ZGluZ0RlZmluaXRpb24iTwoMTWF0ZXJpYWxMaXN0Ej8KDW1hdGVyaWFsX2xp",
            "c3QYASADKAsyKC5SZW1vdGVGb3J0cmVzc1JlYWRlci5NYXRlcmlhbERlZmlu",
            "aXRpb24igQEKDEJvZHlTaXplSW5mbxIQCghzaXplX2N1chgBIAEoBRIRCglz",
            "aXplX2Jhc2UYAiABKAUSEAoIYXJlYV9jdXIYAyABKAUSEQoJYXJlYV9iYXNl",
            "GAQgASgFEhIKCmxlbmd0aF9jdXIYBSABKAUSEwoLbGVuZ3RoX2Jhc2UYBiAB",
            "KAUiZQoOVW5pdEFwcGVhcmFuY2USFgoOYm9keV9tb2RpZmllcnMYASADKAUS",
            "FAoMYnBfbW9kaWZpZXJzGAIgAygFEhUKDXNpemVfbW9kaWZpZXIYAyABKAUS",
            "DgoGY29sb3JzGAQgAygFIuMDCg5Vbml0RGVmaW5pdGlvbhIKCgJpZBgBIAEo",
            "BRIPCgdpc1ZhbGlkGAIgASgIEg0KBXBvc194GAMgASgFEg0KBXBvc195GAQg",
            "ASgFEg0KBXBvc196GAUgASgFEisKBHJhY2UYBiABKAsyHS5SZW1vdGVGb3J0",
            "cmVzc1JlYWRlci5NYXRQYWlyEj8KEHByb2Zlc3Npb25fY29sb3IYByABKAsy",
            "JS5SZW1vdGVGb3J0cmVzc1JlYWRlci5Db2xvckRlZmluaXRpb24SDgoGZmxh",
            "Z3MxGAggASgNEg4KBmZsYWdzMhgJIAEoDRIOCgZmbGFnczMYCiABKA0SEgoK",
            "aXNfc29sZGllchgLIAEoCBI1CglzaXplX2luZm8YDCABKAsyIi5SZW1vdGVG",
            "b3J0cmVzc1JlYWRlci5Cb2R5U2l6ZUluZm8SDAoEbmFtZRgNIAEoCRIRCgli",
            "bG9vZF9tYXgYDiABKAUSEwoLYmxvb2RfY291bnQYDyABKAUSOAoKYXBwZWFy",
            "YW5jZRgQIAEoCzIkLlJlbW90ZUZvcnRyZXNzUmVhZGVyLlVuaXRBcHBlYXJh",
            "bmNlEhUKDXByb2Zlc3Npb25faWQYESABKAUSFwoPbm9ibGVfcG9zaXRpb25z",
            "GBIgAygJIkcKCFVuaXRMaXN0EjsKDWNyZWF0dXJlX2xpc3QYASADKAsyJC5S",
            "ZW1vdGVGb3J0cmVzc1JlYWRlci5Vbml0RGVmaW5pdGlvbiJ/CgxCbG9ja1Jl",
            "cXVlc3QSFQoNYmxvY2tzX25lZWRlZBgBIAEoBRINCgVtaW5feBgCIAEoBRIN",
            "CgVtYXhfeBgDIAEoBRINCgVtaW5feRgEIAEoBRINCgVtYXhfeRgFIAEoBRIN",
            "CgVtaW5fehgGIAEoBRINCgVtYXhfehgHIAEoBSJdCglCbG9ja0xpc3QSMgoK",
            "bWFwX2Jsb2NrcxgBIAMoCzIeLlJlbW90ZUZvcnRyZXNzUmVhZGVyLk1hcEJs",
            "b2NrEg0KBW1hcF94GAIgASgFEg0KBW1hcF95GAMgASgFIkYKCFBsYW50RGVm",
            "Eg0KBXBvc194GAEgASgFEg0KBXBvc195GAIgASgFEg0KBXBvc196GAMgASgF",
            "Eg0KBWluZGV4GAQgASgFIj8KCVBsYW50TGlzdBIyCgpwbGFudF9saXN0GAEg",
            "AygLMh4uUmVtb3RlRm9ydHJlc3NSZWFkZXIuUGxhbnREZWYi4gEKCFZpZXdJ",
            "bmZvEhIKCnZpZXdfcG9zX3gYASABKAUSEgoKdmlld19wb3NfeRgCIAEoBRIS",
            "Cgp2aWV3X3Bvc196GAMgASgFEhMKC3ZpZXdfc2l6ZV94GAQgASgFEhMKC3Zp",
            "ZXdfc2l6ZV95GAUgASgFEhQKDGN1cnNvcl9wb3NfeBgGIAEoBRIUCgxjdXJz",
            "b3JfcG9zX3kYByABKAUSFAoMY3Vyc29yX3Bvc196GAggASgFEhYKDmZvbGxv",
            "d191bml0X2lkGAkgASgFEhYKDmZvbGxvd19pdGVtX2lkGAogASgFIs0BCgdN",
            "YXBJbmZvEhQKDGJsb2NrX3NpemVfeBgBIAEoBRIUCgxibG9ja19zaXplX3kY",
            "AiABKAUSFAoMYmxvY2tfc2l6ZV96GAMgASgFEhMKC2Jsb2NrX3Bvc194GAQg",
            "ASgFEhMKC2Jsb2NrX3Bvc195GAUgASgFEhMKC2Jsb2NrX3Bvc196GAYgASgF",
            "EhIKCndvcmxkX25hbWUYByABKAkSGgoSd29ybGRfbmFtZV9lbmdsaXNoGAgg",
            "ASgJEhEKCXNhdmVfbmFtZRgJIAEoCSLbAQoFQ2xvdWQSLgoFZnJvbnQYASAB",
            "KA4yHy5SZW1vdGVGb3J0cmVzc1JlYWRlci5Gcm9udFR5cGUSMgoHY3VtdWx1",
            "cxgCIAEoDjIhLlJlbW90ZUZvcnRyZXNzUmVhZGVyLkN1bXVsdXNUeXBlEg4K",
            "BmNpcnJ1cxgDIAEoCBIyCgdzdHJhdHVzGAQgASgOMiEuUmVtb3RlRm9ydHJl",
            "c3NSZWFkZXIuU3RyYXR1c1R5cGUSKgoDZm9nGAUgASgOMh0uUmVtb3RlRm9y",
            "dHJlc3NSZWFkZXIuRm9nVHlwZSLqBAoIV29ybGRNYXASEwoLd29ybGRfd2lk",
            "dGgYASABKAUSFAoMd29ybGRfaGVpZ2h0GAIgASgFEgwKBG5hbWUYAyABKAkS",
            "FAoMbmFtZV9lbmdsaXNoGAQgASgJEhEKCWVsZXZhdGlvbhgFIAMoBRIQCghy",
            "YWluZmFsbBgGIAMoBRISCgp2ZWdldGF0aW9uGAcgAygFEhMKC3RlbXBlcmF0",
            "dXJlGAggAygFEhAKCGV2aWxuZXNzGAkgAygFEhAKCGRyYWluYWdlGAogAygF",
            "EhEKCXZvbGNhbmlzbRgLIAMoBRIQCghzYXZhZ2VyeRgMIAMoBRIrCgZjbG91",
            "ZHMYDSADKAsyGy5SZW1vdGVGb3J0cmVzc1JlYWRlci5DbG91ZBIQCghzYWxp",
            "bml0eRgOIAMoBRINCgVtYXBfeBgPIAEoBRINCgVtYXBfeRgQIAEoBRIQCghj",
            "ZW50ZXJfeBgRIAEoBRIQCghjZW50ZXJfeRgSIAEoBRIQCghjZW50ZXJfehgT",
            "IAEoBRIQCghjdXJfeWVhchgUIAEoBRIVCg1jdXJfeWVhcl90aWNrGBUgASgF",
            "EjUKC3dvcmxkX3BvbGVzGBYgASgOMiAuUmVtb3RlRm9ydHJlc3NSZWFkZXIu",
            "V29ybGRQb2xlcxI0CgtyaXZlcl90aWxlcxgXIAMoCzIfLlJlbW90ZUZvcnRy",
            "ZXNzUmVhZGVyLlJpdmVyVGlsZRIXCg93YXRlcl9lbGV2YXRpb24YGCADKAUS",
            "NgoMcmVnaW9uX3RpbGVzGBkgAygLMiAuUmVtb3RlRm9ydHJlc3NSZWFkZXIu",
            "UmVnaW9uVGlsZSJ9ChtTaXRlUmVhbGl6YXRpb25CdWlsZGluZ1dhbGwSDwoH",
            "c3RhcnRfeBgBIAEoBRIPCgdzdGFydF95GAIgASgFEg8KB3N0YXJ0X3oYAyAB",
            "KAUSDQoFZW5kX3gYBCABKAUSDQoFZW5kX3kYBSABKAUSDQoFZW5kX3oYBiAB",
            "KAUiTQocU2l0ZVJlYWxpemF0aW9uQnVpbGRpbmdUb3dlchIOCgZyb29mX3oY",
            "ASABKAUSDQoFcm91bmQYAiABKAgSDgoGZ29ibGluGAMgASgIIl8KC1RyZW5j",
            "aFNwb2tlEhMKC21vdW5kX3N0YXJ0GAEgASgFEhQKDHRyZW5jaF9zdGFydBgC",
            "IAEoBRISCgp0cmVuY2hfZW5kGAMgASgFEhEKCW1vdW5kX2VuZBgEIAEoBSJU",
            "Ch9TaXRlUmVhbGl6YXRpb25CdWlsZGluZ1RyZW5jaGVzEjEKBnNwb2tlcxgB",
            "IAMoCzIhLlJlbW90ZUZvcnRyZXNzUmVhZGVyLlRyZW5jaFNwb2tlIq0DChdT",
            "aXRlUmVhbGl6YXRpb25CdWlsZGluZxIKCgJpZBgBIAEoBRI/CgR0eXBlGAIg",
            "ASgOMjEuUmVtb3RlRm9ydHJlc3NSZWFkZXIuU2l0ZVJlYWxpemF0aW9uQnVp",
            "bGRpbmdUeXBlEg0KBW1pbl94GAMgASgFEg0KBW1pbl95GAQgASgFEg0KBW1h",
            "eF94GAUgASgFEg0KBW1heF95GAYgASgFEi8KCG1hdGVyaWFsGAcgASgLMh0u",
            "UmVtb3RlRm9ydHJlc3NSZWFkZXIuTWF0UGFpchJECgl3YWxsX2luZm8YCCAB",
            "KAsyMS5SZW1vdGVGb3J0cmVzc1JlYWRlci5TaXRlUmVhbGl6YXRpb25CdWls",
            "ZGluZ1dhbGwSRgoKdG93ZXJfaW5mbxgJIAEoCzIyLlJlbW90ZUZvcnRyZXNz",
            "UmVhZGVyLlNpdGVSZWFsaXphdGlvbkJ1aWxkaW5nVG93ZXISSgoLdHJlbmNo",
            "X2luZm8YCiABKAsyNS5SZW1vdGVGb3J0cmVzc1JlYWRlci5TaXRlUmVhbGl6",
            "YXRpb25CdWlsZGluZ1RyZW5jaGVzIrQECgpSZWdpb25UaWxlEhEKCWVsZXZh",
            "dGlvbhgBIAEoBRIQCghyYWluZmFsbBgCIAEoBRISCgp2ZWdldGF0aW9uGAMg",
            "ASgFEhMKC3RlbXBlcmF0dXJlGAQgASgFEhAKCGV2aWxuZXNzGAUgASgFEhAK",
            "CGRyYWluYWdlGAYgASgFEhEKCXZvbGNhbmlzbRgHIAEoBRIQCghzYXZhZ2Vy",
            "eRgIIAEoBRIQCghzYWxpbml0eRgJIAEoBRI0CgtyaXZlcl90aWxlcxgKIAEo",
            "CzIfLlJlbW90ZUZvcnRyZXNzUmVhZGVyLlJpdmVyVGlsZRIXCg93YXRlcl9l",
            "bGV2YXRpb24YCyABKAUSNwoQc3VyZmFjZV9tYXRlcmlhbBgMIAEoCzIdLlJl",
            "bW90ZUZvcnRyZXNzUmVhZGVyLk1hdFBhaXISNgoPcGxhbnRfbWF0ZXJpYWxz",
            "GA0gAygLMh0uUmVtb3RlRm9ydHJlc3NSZWFkZXIuTWF0UGFpchJACglidWls",
            "ZGluZ3MYDiADKAsyLS5SZW1vdGVGb3J0cmVzc1JlYWRlci5TaXRlUmVhbGl6",
            "YXRpb25CdWlsZGluZxI2Cg9zdG9uZV9tYXRlcmlhbHMYDyADKAsyHS5SZW1v",
            "dGVGb3J0cmVzc1JlYWRlci5NYXRQYWlyEjUKDnRyZWVfbWF0ZXJpYWxzGBAg",
            "AygLMh0uUmVtb3RlRm9ydHJlc3NSZWFkZXIuTWF0UGFpchIMCgRzbm93GBEg",
            "ASgFIn4KCVJlZ2lvbk1hcBINCgVtYXBfeBgBIAEoBRINCgVtYXBfeRgCIAEo",
            "BRIMCgRuYW1lGAMgASgJEhQKDG5hbWVfZW5nbGlzaBgEIAEoCRIvCgV0aWxl",
            "cxgFIAMoCzIgLlJlbW90ZUZvcnRyZXNzUmVhZGVyLlJlZ2lvblRpbGUidgoK",
            "UmVnaW9uTWFwcxIyCgp3b3JsZF9tYXBzGAEgAygLMh4uUmVtb3RlRm9ydHJl",
            "c3NSZWFkZXIuV29ybGRNYXASNAoLcmVnaW9uX21hcHMYAiADKAsyHy5SZW1v",
            "dGVGb3J0cmVzc1JlYWRlci5SZWdpb25NYXAiigEKEVBhdHRlcm5EZXNjcmlw",
            "dG9yEgoKAmlkGAEgASgJEjUKBmNvbG9ycxgCIAMoCzIlLlJlbW90ZUZvcnRy",
            "ZXNzUmVhZGVyLkNvbG9yRGVmaW5pdGlvbhIyCgdwYXR0ZXJuGAMgASgOMiEu",
            "UmVtb3RlRm9ydHJlc3NSZWFkZXIuUGF0dGVyblR5cGUisAEKEENvbG9yTW9k",
            "aWZpZXJSYXcSOQoIcGF0dGVybnMYASADKAsyJy5SZW1vdGVGb3J0cmVzc1Jl",
            "YWRlci5QYXR0ZXJuRGVzY3JpcHRvchIUCgxib2R5X3BhcnRfaWQYAiADKAUS",
            "FwoPdGlzc3VlX2xheWVyX2lkGAMgAygFEhIKCnN0YXJ0X2RhdGUYBCABKAUS",
            "EAoIZW5kX2RhdGUYBSABKAUSDAoEcGFydBgGIAEoCSJkChBCb2R5UGFydExh",
            "eWVyUmF3EhIKCmxheWVyX25hbWUYASABKAkSEQoJdGlzc3VlX2lkGAIgASgF",
            "EhMKC2xheWVyX2RlcHRoGAMgASgFEhQKDGJwX21vZGlmaWVycxgEIAMoBSKW",
            "AQoLQm9keVBhcnRSYXcSDQoFdG9rZW4YASABKAkSEAoIY2F0ZWdvcnkYAiAB",
            "KAkSDgoGcGFyZW50GAMgASgFEg0KBWZsYWdzGAQgAygIEjYKBmxheWVycxgF",
            "IAMoCzImLlJlbW90ZUZvcnRyZXNzUmVhZGVyLkJvZHlQYXJ0TGF5ZXJSYXcS",
            "DwoHcmVsc2l6ZRgGIAEoBSJGChRCcEFwcGVhcmFuY2VNb2RpZmllchIMCgR0",
            "eXBlGAEgASgJEg8KB21vZF9taW4YAiABKAUSDwoHbW9kX21heBgDIAEoBSJ1",
            "CglUaXNzdWVSYXcSCgoCaWQYASABKAkSDAoEbmFtZRgCIAEoCRIvCghtYXRl",
            "cmlhbBgDIAEoCzIdLlJlbW90ZUZvcnRyZXNzUmVhZGVyLk1hdFBhaXISHQoV",
            "c3Vib3JkaW5hdGVfdG9fdGlzc3VlGAQgASgJIvcDCghDYXN0ZVJhdxINCgVp",
            "bmRleBgBIAEoBRIQCghjYXN0ZV9pZBgCIAEoCRISCgpjYXN0ZV9uYW1lGAMg",
            "AygJEhEKCWJhYnlfbmFtZRgEIAMoCRISCgpjaGlsZF9uYW1lGAUgAygJEg4K",
            "BmdlbmRlchgGIAEoBRI1Cgpib2R5X3BhcnRzGAcgAygLMiEuUmVtb3RlRm9y",
            "dHJlc3NSZWFkZXIuQm9keVBhcnRSYXcSFQoNdG90YWxfcmVsc2l6ZRgIIAEo",
            "BRI9Cgltb2RpZmllcnMYCSADKAsyKi5SZW1vdGVGb3J0cmVzc1JlYWRlci5C",
            "cEFwcGVhcmFuY2VNb2RpZmllchIUCgxtb2RpZmllcl9pZHgYCiADKAUSEAoI",
            "cGFydF9pZHgYCyADKAUSEQoJbGF5ZXJfaWR4GAwgAygFEk0KGWJvZHlfYXBw",
            "ZWFyYW5jZV9tb2RpZmllcnMYDSADKAsyKi5SZW1vdGVGb3J0cmVzc1JlYWRl",
            "ci5CcEFwcGVhcmFuY2VNb2RpZmllchI/Cg9jb2xvcl9tb2RpZmllcnMYDiAD",
            "KAsyJi5SZW1vdGVGb3J0cmVzc1JlYWRlci5Db2xvck1vZGlmaWVyUmF3EhMK",
            "C2Rlc2NyaXB0aW9uGA8gASgJEhIKCmFkdWx0X3NpemUYECABKAUi1gIKC0Ny",
            "ZWF0dXJlUmF3Eg0KBWluZGV4GAEgASgFEhMKC2NyZWF0dXJlX2lkGAIgASgJ",
            "EgwKBG5hbWUYAyADKAkSGQoRZ2VuZXJhbF9iYWJ5X25hbWUYBCADKAkSGgoS",
            "Z2VuZXJhbF9jaGlsZF9uYW1lGAUgAygJEhUKDWNyZWF0dXJlX3RpbGUYBiAB",
            "KAUSHQoVY3JlYXR1cmVfc29sZGllcl90aWxlGAcgASgFEjQKBWNvbG9yGAgg",
            "ASgLMiUuUmVtb3RlRm9ydHJlc3NSZWFkZXIuQ29sb3JEZWZpbml0aW9uEhEK",
            "CWFkdWx0c2l6ZRgJIAEoBRItCgVjYXN0ZRgKIAMoCzIeLlJlbW90ZUZvcnRy",
            "ZXNzUmVhZGVyLkNhc3RlUmF3EjAKB3Rpc3N1ZXMYCyADKAsyHy5SZW1vdGVG",
            "b3J0cmVzc1JlYWRlci5UaXNzdWVSYXciSwoPQ3JlYXR1cmVSYXdMaXN0EjgK",
            "DWNyZWF0dXJlX3Jhd3MYASADKAsyIS5SZW1vdGVGb3J0cmVzc1JlYWRlci5D",
            "cmVhdHVyZVJhdyK7AQoEQXJteRIKCgJpZBgBIAEoBRINCgVwb3NfeBgCIAEo",
            "BRINCgVwb3NfeRgDIAEoBRINCgVwb3NfehgEIAEoBRI0CgZsZWFkZXIYBSAB",
            "KAsyJC5SZW1vdGVGb3J0cmVzc1JlYWRlci5Vbml0RGVmaW5pdGlvbhI1Cgdt",
            "ZW1iZXJzGAYgAygLMiQuUmVtb3RlRm9ydHJlc3NSZWFkZXIuVW5pdERlZmlu",
            "aXRpb24SDQoFZmxhZ3MYByABKA0iNgoIQXJteUxpc3QSKgoGYXJtaWVzGAEg",
            "AygLMhouUmVtb3RlRm9ydHJlc3NSZWFkZXIuQXJteSJmCgtHcm93dGhQcmlu",
            "dBIQCghwcmlvcml0eRgBIAEoBRINCgVjb2xvchgCIAEoBRIUCgx0aW1pbmdf",
            "c3RhcnQYAyABKAUSEgoKdGltaW5nX2VuZBgEIAEoBRIMCgR0aWxlGAUgASgF",
            "Iu8CCgpUcmVlR3Jvd3RoEg0KBWluZGV4GAEgASgFEgoKAmlkGAIgASgJEgwK",
            "BG5hbWUYAyABKAkSKgoDbWF0GAQgASgLMh0uUmVtb3RlRm9ydHJlc3NSZWFk",
            "ZXIuTWF0UGFpchIxCgZwcmludHMYBSADKAsyIS5SZW1vdGVGb3J0cmVzc1Jl",
            "YWRlci5Hcm93dGhQcmludBIUCgx0aW1pbmdfc3RhcnQYBiABKAUSEgoKdGlt",
            "aW5nX2VuZBgHIAEoBRINCgV0d2lncxgIIAEoCBIWCg5saWdodF9icmFuY2hl",
            "cxgJIAEoCBIWCg5oZWF2eV9icmFuY2hlcxgKIAEoCBINCgV0cnVuaxgLIAEo",
            "CBINCgVyb290cxgMIAEoCBILCgNjYXAYDSABKAgSDwoHc2FwbGluZxgOIAEo",
            "CBIaChJ0cnVua19oZWlnaHRfc3RhcnQYDyABKAUSGAoQdHJ1bmtfaGVpZ2h0",
            "X2VuZBgQIAEoBSJ0CghQbGFudFJhdxINCgVpbmRleBgBIAEoBRIKCgJpZBgC",
            "IAEoCRIMCgRuYW1lGAMgASgJEjEKB2dyb3d0aHMYBCADKAsyIC5SZW1vdGVG",
            "b3J0cmVzc1JlYWRlci5UcmVlR3Jvd3RoEgwKBHRpbGUYBSABKAUiQgoMUGxh",
            "bnRSYXdMaXN0EjIKCnBsYW50X3Jhd3MYASADKAsyHi5SZW1vdGVGb3J0cmVz",
            "c1JlYWRlci5QbGFudFJhdyJHCgpTY3JlZW5UaWxlEhEKCWNoYXJhY3RlchgB",
            "IAEoDRISCgpmb3JlZ3JvdW5kGAIgASgNEhIKCmJhY2tncm91bmQYAyABKA0i",
            "XwoNU2NyZWVuQ2FwdHVyZRINCgV3aWR0aBgBIAEoDRIOCgZoZWlnaHQYAiAB",
            "KA0SLwoFdGlsZXMYAyADKAsyIC5SZW1vdGVGb3J0cmVzc1JlYWRlci5TY3Jl",
            "ZW5UaWxlIngKDUtleWJvYXJkRXZlbnQSDAoEdHlwZRgBIAEoDRINCgV3aGlj",
            "aBgCIAEoDRINCgVzdGF0ZRgDIAEoDRIQCghzY2FuY29kZRgEIAEoDRILCgNz",
            "eW0YBSABKA0SCwoDbW9kGAYgASgNEg8KB3VuaWNvZGUYByABKA0iewoKRGln",
            "Q29tbWFuZBI9CgtkZXNpZ25hdGlvbhgBIAEoDjIoLlJlbW90ZUZvcnRyZXNz",
            "UmVhZGVyLlRpbGVEaWdEZXNpZ25hdGlvbhIuCglsb2NhdGlvbnMYAiADKAsy",
            "Gy5SZW1vdGVGb3J0cmVzc1JlYWRlci5Db29yZCIbCgpTaW5nbGVCb29sEg0K",
            "BVZhbHVlGAEgASgIKroCCg1UaWxldHlwZVNoYXBlEgkKBUVNUFRZEAASFQoI",
            "Tk9fU0hBUEUQ////////////ARIJCgVGTE9PUhABEgsKB0JPVUxERVIQAhIL",
            "CgdQRUJCTEVTEAMSCAoEV0FMTBAEEhEKDUZPUlRJRklDQVRJT04QBRIMCghT",
            "VEFJUl9VUBAGEg4KClNUQUlSX0RPV04QBxIQCgxTVEFJUl9VUERPV04QCBII",
            "CgRSQU1QEAkSDAoIUkFNUF9UT1AQChINCglCUk9PS19CRUQQCxINCglCUk9P",
            "S19UT1AQDBIOCgpUUkVFX1NIQVBFEA0SCwoHU0FQTElORxAOEgkKBVNIUlVC",
            "EA8SDwoLRU5ETEVTU19QSVQQEBIKCgZCUkFOQ0gQERIQCgxUUlVOS19CUkFO",
            "Q0gQEhIICgRUV0lHEBMqxAEKD1RpbGV0eXBlU3BlY2lhbBIKCgZOT1JNQUwQ",
            "ABIXCgpOT19TUEVDSUFMEP///////////wESEAoMUklWRVJfU09VUkNFEAES",
            "DQoJV0FURVJGQUxMEAISCgoGU01PT1RIEAMSDAoIRlVSUk9XRUQQBBIHCgNX",
            "RVQQBRIICgRERUFEEAYSCgoGV09STl8xEAcSCgoGV09STl8yEAgSCgoGV09S",
            "Tl8zEAkSCQoFVFJBQ0sQChIPCgtTTU9PVEhfREVBRBALKooDChBUaWxldHlw",
            "ZU1hdGVyaWFsEgcKA0FJUhAAEhgKC05PX01BVEVSSUFMEP///////////wES",
            "CAoEU09JTBABEgkKBVNUT05FEAISCwoHRkVBVFVSRRADEg4KCkxBVkFfU1RP",
            "TkUQBBILCgdNSU5FUkFMEAUSEQoNRlJPWkVOX0xJUVVJRBAGEhAKDENPTlNU",
            "UlVDVElPThAHEg8KC0dSQVNTX0xJR0hUEAgSDgoKR1JBU1NfREFSSxAJEg0K",
            "CUdSQVNTX0RSWRAKEg4KCkdSQVNTX0RFQUQQCxIJCgVQTEFOVBAMEgcKA0hG",
            "UxANEgwKCENBTVBGSVJFEA4SCAoERklSRRAPEgkKBUFTSEVTEBASCQoFTUFH",
            "TUEQERINCglEUklGVFdPT0QQEhIICgRQT09MEBMSCQoFQlJPT0sQFBIJCgVS",
            "SVZFUhAVEggKBFJPT1QQFhIRCg1UUkVFX01BVEVSSUFMEBcSDAoITVVTSFJP",
            "T00QGBITCg9VTkRFUldPUkxEX0dBVEUQGSpWCg9UaWxldHlwZVZhcmlhbnQS",
            "CQoFVkFSXzEQABIXCgpOT19WQVJJQU5UEP///////////wESCQoFVkFSXzIQ",
            "ARIJCgVWQVJfMxACEgkKBVZBUl80EAMqSgoKV29ybGRQb2xlcxIMCghOT19Q",
            "T0xFUxAAEg4KCk5PUlRIX1BPTEUQARIOCgpTT1VUSF9QT0xFEAISDgoKQk9U",
            "SF9QT0xFUxADKj0KEUJ1aWxkaW5nRGlyZWN0aW9uEgkKBU5PUlRIEAASCAoE",
            "RUFTVBABEgkKBVNPVVRIEAISCAoEV0VTVBADKo0BChJUaWxlRGlnRGVzaWdu",
            "YXRpb24SCgoGTk9fRElHEAASDwoLREVGQVVMVF9ESUcQARIVChFVUF9ET1dO",
            "X1NUQUlSX0RJRxACEg8KC0NIQU5ORUxfRElHEAMSDAoIUkFNUF9ESUcQBBIS",
            "Cg5ET1dOX1NUQUlSX0RJRxAFEhAKDFVQX1NUQUlSX0RJRxAGKlEKC01hdHRl",
            "clN0YXRlEgkKBVNvbGlkEAASCgoGTGlxdWlkEAESBwoDR2FzEAISCgoGUG93",
            "ZGVyEAMSCQoFUGFzdGUQBBILCgdQcmVzc2VkEAUqTwoJRnJvbnRUeXBlEg4K",
            "CkZST05UX05PTkUQABIOCgpGUk9OVF9XQVJNEAESDgoKRlJPTlRfQ09MRBAC",
            "EhIKDkZST05UX09DQ0xVREVEEAMqWgoLQ3VtdWx1c1R5cGUSEAoMQ1VNVUxV",
            "U19OT05FEAASEgoOQ1VNVUxVU19NRURJVU0QARIRCg1DVU1VTFVTX01VTFRJ",
            "EAISEgoOQ1VNVUxVU19OSU1CVVMQAypZCgtTdHJhdHVzVHlwZRIQCgxTVFJB",
            "VFVTX05PTkUQABIQCgxTVFJBVFVTX0FMVE8QARISCg5TVFJBVFVTX1BST1BF",
            "UhACEhIKDlNUUkFUVVNfTklNQlVTEAMqRAoHRm9nVHlwZRIMCghGT0dfTk9O",
            "RRAAEgwKCEZPR19NSVNUEAESDgoKRk9HX05PUk1BTBACEg0KCUYwR19USElD",
            "SxADKvgCChtTaXRlUmVhbGl6YXRpb25CdWlsZGluZ1R5cGUSEAoMY290dGFn",
            "ZV9wbG90EAASDwoLY2FzdGxlX3dhbGwQARIQCgxjYXN0bGVfdG93ZXIQAhIU",
            "ChBjYXN0bGVfY291cnR5YXJkEAMSCQoFaG91c2UQBBIKCgZ0ZW1wbGUQBRII",
            "CgR0b21iEAYSDgoKc2hvcF9ob3VzZRAHEg0KCXdhcmVob3VzZRAIEhEKDW1h",
            "cmtldF9zcXVhcmUQCRILCgdwYXN0dXJlEAoSCQoFd2FzdGUQCxINCgljb3Vy",
            "dHlhcmQQDBIICgR3ZWxsEA0SCQoFdmF1bHQQDhIPCgtncmVhdF90b3dlchAP",
            "EgwKCHRyZW5jaGVzEBASDgoKdHJlZV9ob3VzZRAREhEKDWhpbGxvY2tfaG91",
            "c2UQEhINCgltZWFkX2hhbGwQExIVChFmb3J0cmVzc19lbnRyYW5jZRAUEgsK",
            "B2xpYnJhcnkQFRIKCgZ0YXZlcm4QFipdCgtQYXR0ZXJuVHlwZRIMCghNT05P",
            "VE9ORRAAEgsKB1NUUklQRVMQARIMCghJUklTX0VZRRACEgkKBVNQT1RTEAMS",
            "DQoJUFVQSUxfRVlFEAQSCwoHTU9UVExFRBAFQgJIA2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::RemoteFortressReader.TiletypeShape), typeof(global::RemoteFortressReader.TiletypeSpecial), typeof(global::RemoteFortressReader.TiletypeMaterial), typeof(global::RemoteFortressReader.TiletypeVariant), typeof(global::RemoteFortressReader.WorldPoles), typeof(global::RemoteFortressReader.BuildingDirection), typeof(global::RemoteFortressReader.TileDigDesignation), typeof(global::RemoteFortressReader.MatterState), typeof(global::RemoteFortressReader.FrontType), typeof(global::RemoteFortressReader.CumulusType), typeof(global::RemoteFortressReader.StratusType), typeof(global::RemoteFortressReader.FogType), typeof(global::RemoteFortressReader.SiteRealizationBuildingType), typeof(global::RemoteFortressReader.PatternType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.Coord), global::RemoteFortressReader.Coord.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.Tiletype), global::RemoteFortressReader.Tiletype.Parser, new[]{ "Id", "Name", "Caption", "Shape", "Special", "Material", "Variant", "Direction" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.TiletypeList), global::RemoteFortressReader.TiletypeList.Parser, new[]{ "TiletypeList_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.BuildingExtents), global::RemoteFortressReader.BuildingExtents.Parser, new[]{ "PosX", "PosY", "Width", "Height", "Extents" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.BuildingItem), global::RemoteFortressReader.BuildingItem.Parser, new[]{ "Item", "Mode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.BuildingInstance), global::RemoteFortressReader.BuildingInstance.Parser, new[]{ "Index", "PosXMin", "PosYMin", "PosZMin", "PosXMax", "PosYMax", "PosZMax", "BuildingType", "Material", "BuildingFlags", "IsRoom", "Room", "Direction", "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.RiverEdge), global::RemoteFortressReader.RiverEdge.Parser, new[]{ "MinPos", "MaxPos", "Active", "Elevation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.RiverTile), global::RemoteFortressReader.RiverTile.Parser, new[]{ "North", "South", "East", "West" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.Spatter), global::RemoteFortressReader.Spatter.Parser, new[]{ "Material", "Amount", "State", "Item" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.SpatterPile), global::RemoteFortressReader.SpatterPile.Parser, new[]{ "Spatters" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.Item), global::RemoteFortressReader.Item.Parser, new[]{ "Id", "Pos", "Flags1", "Flags2", "Type", "Material", "Dye" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.MapBlock), global::RemoteFortressReader.MapBlock.Parser, new[]{ "MapX", "MapY", "MapZ", "Tiles", "Materials", "LayerMaterials", "VeinMaterials", "BaseMaterials", "Magma", "Water", "Hidden", "Light", "Subterranean", "Outside", "Aquifer", "WaterStagnant", "WaterSalt", "ConstructionItems", "Buildings", "TreePercent", "TreeX", "TreeY", "TreeZ", "TileDigDesignation", "SpatterPile", "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.MatPair), global::RemoteFortressReader.MatPair.Parser, new[]{ "MatType", "MatIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.ColorDefinition), global::RemoteFortressReader.ColorDefinition.Parser, new[]{ "Red", "Green", "Blue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.MaterialDefinition), global::RemoteFortressReader.MaterialDefinition.Parser, new[]{ "MatPair", "Id", "Name", "StateColor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.BuildingType), global::RemoteFortressReader.BuildingType.Parser, new[]{ "BuildingType_", "BuildingSubtype", "BuildingCustom" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.BuildingDefinition), global::RemoteFortressReader.BuildingDefinition.Parser, new[]{ "BuildingType", "Id", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.BuildingList), global::RemoteFortressReader.BuildingList.Parser, new[]{ "BuildingList_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.MaterialList), global::RemoteFortressReader.MaterialList.Parser, new[]{ "MaterialList_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.BodySizeInfo), global::RemoteFortressReader.BodySizeInfo.Parser, new[]{ "SizeCur", "SizeBase", "AreaCur", "AreaBase", "LengthCur", "LengthBase" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.UnitAppearance), global::RemoteFortressReader.UnitAppearance.Parser, new[]{ "BodyModifiers", "BpModifiers", "SizeModifier", "Colors" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.UnitDefinition), global::RemoteFortressReader.UnitDefinition.Parser, new[]{ "Id", "IsValid", "PosX", "PosY", "PosZ", "Race", "ProfessionColor", "Flags1", "Flags2", "Flags3", "IsSoldier", "SizeInfo", "Name", "BloodMax", "BloodCount", "Appearance", "ProfessionId", "NoblePositions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.UnitList), global::RemoteFortressReader.UnitList.Parser, new[]{ "CreatureList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.BlockRequest), global::RemoteFortressReader.BlockRequest.Parser, new[]{ "BlocksNeeded", "MinX", "MaxX", "MinY", "MaxY", "MinZ", "MaxZ" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.BlockList), global::RemoteFortressReader.BlockList.Parser, new[]{ "MapBlocks", "MapX", "MapY" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.PlantDef), global::RemoteFortressReader.PlantDef.Parser, new[]{ "PosX", "PosY", "PosZ", "Index" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.PlantList), global::RemoteFortressReader.PlantList.Parser, new[]{ "PlantList_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.ViewInfo), global::RemoteFortressReader.ViewInfo.Parser, new[]{ "ViewPosX", "ViewPosY", "ViewPosZ", "ViewSizeX", "ViewSizeY", "CursorPosX", "CursorPosY", "CursorPosZ", "FollowUnitId", "FollowItemId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.MapInfo), global::RemoteFortressReader.MapInfo.Parser, new[]{ "BlockSizeX", "BlockSizeY", "BlockSizeZ", "BlockPosX", "BlockPosY", "BlockPosZ", "WorldName", "WorldNameEnglish", "SaveName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.Cloud), global::RemoteFortressReader.Cloud.Parser, new[]{ "Front", "Cumulus", "Cirrus", "Stratus", "Fog" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.WorldMap), global::RemoteFortressReader.WorldMap.Parser, new[]{ "WorldWidth", "WorldHeight", "Name", "NameEnglish", "Elevation", "Rainfall", "Vegetation", "Temperature", "Evilness", "Drainage", "Volcanism", "Savagery", "Clouds", "Salinity", "MapX", "MapY", "CenterX", "CenterY", "CenterZ", "CurYear", "CurYearTick", "WorldPoles", "RiverTiles", "WaterElevation", "RegionTiles" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.SiteRealizationBuildingWall), global::RemoteFortressReader.SiteRealizationBuildingWall.Parser, new[]{ "StartX", "StartY", "StartZ", "EndX", "EndY", "EndZ" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.SiteRealizationBuildingTower), global::RemoteFortressReader.SiteRealizationBuildingTower.Parser, new[]{ "RoofZ", "Round", "Goblin" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.TrenchSpoke), global::RemoteFortressReader.TrenchSpoke.Parser, new[]{ "MoundStart", "TrenchStart", "TrenchEnd", "MoundEnd" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.SiteRealizationBuildingTrenches), global::RemoteFortressReader.SiteRealizationBuildingTrenches.Parser, new[]{ "Spokes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.SiteRealizationBuilding), global::RemoteFortressReader.SiteRealizationBuilding.Parser, new[]{ "Id", "Type", "MinX", "MinY", "MaxX", "MaxY", "Material", "WallInfo", "TowerInfo", "TrenchInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.RegionTile), global::RemoteFortressReader.RegionTile.Parser, new[]{ "Elevation", "Rainfall", "Vegetation", "Temperature", "Evilness", "Drainage", "Volcanism", "Savagery", "Salinity", "RiverTiles", "WaterElevation", "SurfaceMaterial", "PlantMaterials", "Buildings", "StoneMaterials", "TreeMaterials", "Snow" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.RegionMap), global::RemoteFortressReader.RegionMap.Parser, new[]{ "MapX", "MapY", "Name", "NameEnglish", "Tiles" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.RegionMaps), global::RemoteFortressReader.RegionMaps.Parser, new[]{ "WorldMaps", "RegionMaps_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.PatternDescriptor), global::RemoteFortressReader.PatternDescriptor.Parser, new[]{ "Id", "Colors", "Pattern" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.ColorModifierRaw), global::RemoteFortressReader.ColorModifierRaw.Parser, new[]{ "Patterns", "BodyPartId", "TissueLayerId", "StartDate", "EndDate", "Part" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.BodyPartLayerRaw), global::RemoteFortressReader.BodyPartLayerRaw.Parser, new[]{ "LayerName", "TissueId", "LayerDepth", "BpModifiers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.BodyPartRaw), global::RemoteFortressReader.BodyPartRaw.Parser, new[]{ "Token", "Category", "Parent", "Flags", "Layers", "Relsize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.BpAppearanceModifier), global::RemoteFortressReader.BpAppearanceModifier.Parser, new[]{ "Type", "ModMin", "ModMax" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.TissueRaw), global::RemoteFortressReader.TissueRaw.Parser, new[]{ "Id", "Name", "Material", "SubordinateToTissue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.CasteRaw), global::RemoteFortressReader.CasteRaw.Parser, new[]{ "Index", "CasteId", "CasteName", "BabyName", "ChildName", "Gender", "BodyParts", "TotalRelsize", "Modifiers", "ModifierIdx", "PartIdx", "LayerIdx", "BodyAppearanceModifiers", "ColorModifiers", "Description", "AdultSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.CreatureRaw), global::RemoteFortressReader.CreatureRaw.Parser, new[]{ "Index", "CreatureId", "Name", "GeneralBabyName", "GeneralChildName", "CreatureTile", "CreatureSoldierTile", "Color", "Adultsize", "Caste", "Tissues" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.CreatureRawList), global::RemoteFortressReader.CreatureRawList.Parser, new[]{ "CreatureRaws" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.Army), global::RemoteFortressReader.Army.Parser, new[]{ "Id", "PosX", "PosY", "PosZ", "Leader", "Members", "Flags" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.ArmyList), global::RemoteFortressReader.ArmyList.Parser, new[]{ "Armies" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.GrowthPrint), global::RemoteFortressReader.GrowthPrint.Parser, new[]{ "Priority", "Color", "TimingStart", "TimingEnd", "Tile" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.TreeGrowth), global::RemoteFortressReader.TreeGrowth.Parser, new[]{ "Index", "Id", "Name", "Mat", "Prints", "TimingStart", "TimingEnd", "Twigs", "LightBranches", "HeavyBranches", "Trunk", "Roots", "Cap", "Sapling", "TrunkHeightStart", "TrunkHeightEnd" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.PlantRaw), global::RemoteFortressReader.PlantRaw.Parser, new[]{ "Index", "Id", "Name", "Growths", "Tile" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.PlantRawList), global::RemoteFortressReader.PlantRawList.Parser, new[]{ "PlantRaws" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.ScreenTile), global::RemoteFortressReader.ScreenTile.Parser, new[]{ "Character", "Foreground", "Background" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.ScreenCapture), global::RemoteFortressReader.ScreenCapture.Parser, new[]{ "Width", "Height", "Tiles" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.KeyboardEvent), global::RemoteFortressReader.KeyboardEvent.Parser, new[]{ "Type", "Which", "State", "Scancode", "Sym", "Mod", "Unicode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.DigCommand), global::RemoteFortressReader.DigCommand.Parser, new[]{ "Designation", "Locations" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RemoteFortressReader.SingleBool), global::RemoteFortressReader.SingleBool.Parser, new[]{ "Value" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///We use shapes, etc, because the actual tiletypes may differ between DF versions.
  /// </summary>
  public enum TiletypeShape {
    [pbr::OriginalName("EMPTY")] Empty = 0,
    [pbr::OriginalName("NO_SHAPE")] NoShape = -1,
    [pbr::OriginalName("FLOOR")] Floor = 1,
    [pbr::OriginalName("BOULDER")] Boulder = 2,
    [pbr::OriginalName("PEBBLES")] Pebbles = 3,
    [pbr::OriginalName("WALL")] Wall = 4,
    [pbr::OriginalName("FORTIFICATION")] Fortification = 5,
    [pbr::OriginalName("STAIR_UP")] StairUp = 6,
    [pbr::OriginalName("STAIR_DOWN")] StairDown = 7,
    [pbr::OriginalName("STAIR_UPDOWN")] StairUpdown = 8,
    [pbr::OriginalName("RAMP")] Ramp = 9,
    [pbr::OriginalName("RAMP_TOP")] RampTop = 10,
    [pbr::OriginalName("BROOK_BED")] BrookBed = 11,
    [pbr::OriginalName("BROOK_TOP")] BrookTop = 12,
    [pbr::OriginalName("TREE_SHAPE")] TreeShape = 13,
    [pbr::OriginalName("SAPLING")] Sapling = 14,
    [pbr::OriginalName("SHRUB")] Shrub = 15,
    [pbr::OriginalName("ENDLESS_PIT")] EndlessPit = 16,
    [pbr::OriginalName("BRANCH")] Branch = 17,
    [pbr::OriginalName("TRUNK_BRANCH")] TrunkBranch = 18,
    [pbr::OriginalName("TWIG")] Twig = 19,
  }

  public enum TiletypeSpecial {
    [pbr::OriginalName("NORMAL")] Normal = 0,
    [pbr::OriginalName("NO_SPECIAL")] NoSpecial = -1,
    [pbr::OriginalName("RIVER_SOURCE")] RiverSource = 1,
    [pbr::OriginalName("WATERFALL")] Waterfall = 2,
    [pbr::OriginalName("SMOOTH")] Smooth = 3,
    [pbr::OriginalName("FURROWED")] Furrowed = 4,
    [pbr::OriginalName("WET")] Wet = 5,
    [pbr::OriginalName("DEAD")] Dead = 6,
    [pbr::OriginalName("WORN_1")] Worn1 = 7,
    [pbr::OriginalName("WORN_2")] Worn2 = 8,
    [pbr::OriginalName("WORN_3")] Worn3 = 9,
    [pbr::OriginalName("TRACK")] Track = 10,
    [pbr::OriginalName("SMOOTH_DEAD")] SmoothDead = 11,
  }

  public enum TiletypeMaterial {
    [pbr::OriginalName("AIR")] Air = 0,
    [pbr::OriginalName("NO_MATERIAL")] NoMaterial = -1,
    [pbr::OriginalName("SOIL")] Soil = 1,
    [pbr::OriginalName("STONE")] Stone = 2,
    [pbr::OriginalName("FEATURE")] Feature = 3,
    [pbr::OriginalName("LAVA_STONE")] LavaStone = 4,
    [pbr::OriginalName("MINERAL")] Mineral = 5,
    [pbr::OriginalName("FROZEN_LIQUID")] FrozenLiquid = 6,
    [pbr::OriginalName("CONSTRUCTION")] Construction = 7,
    [pbr::OriginalName("GRASS_LIGHT")] GrassLight = 8,
    [pbr::OriginalName("GRASS_DARK")] GrassDark = 9,
    [pbr::OriginalName("GRASS_DRY")] GrassDry = 10,
    [pbr::OriginalName("GRASS_DEAD")] GrassDead = 11,
    [pbr::OriginalName("PLANT")] Plant = 12,
    [pbr::OriginalName("HFS")] Hfs = 13,
    [pbr::OriginalName("CAMPFIRE")] Campfire = 14,
    [pbr::OriginalName("FIRE")] Fire = 15,
    [pbr::OriginalName("ASHES")] Ashes = 16,
    [pbr::OriginalName("MAGMA")] Magma = 17,
    [pbr::OriginalName("DRIFTWOOD")] Driftwood = 18,
    [pbr::OriginalName("POOL")] Pool = 19,
    [pbr::OriginalName("BROOK")] Brook = 20,
    [pbr::OriginalName("RIVER")] River = 21,
    [pbr::OriginalName("ROOT")] Root = 22,
    [pbr::OriginalName("TREE_MATERIAL")] TreeMaterial = 23,
    [pbr::OriginalName("MUSHROOM")] Mushroom = 24,
    [pbr::OriginalName("UNDERWORLD_GATE")] UnderworldGate = 25,
  }

  public enum TiletypeVariant {
    [pbr::OriginalName("VAR_1")] Var1 = 0,
    [pbr::OriginalName("NO_VARIANT")] NoVariant = -1,
    [pbr::OriginalName("VAR_2")] Var2 = 1,
    [pbr::OriginalName("VAR_3")] Var3 = 2,
    [pbr::OriginalName("VAR_4")] Var4 = 3,
  }

  public enum WorldPoles {
    [pbr::OriginalName("NO_POLES")] NoPoles = 0,
    [pbr::OriginalName("NORTH_POLE")] NorthPole = 1,
    [pbr::OriginalName("SOUTH_POLE")] SouthPole = 2,
    [pbr::OriginalName("BOTH_POLES")] BothPoles = 3,
  }

  public enum BuildingDirection {
    [pbr::OriginalName("NORTH")] North = 0,
    [pbr::OriginalName("EAST")] East = 1,
    [pbr::OriginalName("SOUTH")] South = 2,
    [pbr::OriginalName("WEST")] West = 3,
  }

  public enum TileDigDesignation {
    /// <summary>
    ///*
    /// no designation
    /// </summary>
    [pbr::OriginalName("NO_DIG")] NoDig = 0,
    /// <summary>
    ///*
    /// dig walls, remove stairs and ramps, gather plants, fell trees
    /// </summary>
    [pbr::OriginalName("DEFAULT_DIG")] DefaultDig = 1,
    [pbr::OriginalName("UP_DOWN_STAIR_DIG")] UpDownStairDig = 2,
    [pbr::OriginalName("CHANNEL_DIG")] ChannelDig = 3,
    [pbr::OriginalName("RAMP_DIG")] RampDig = 4,
    [pbr::OriginalName("DOWN_STAIR_DIG")] DownStairDig = 5,
    [pbr::OriginalName("UP_STAIR_DIG")] UpStairDig = 6,
  }

  public enum MatterState {
    [pbr::OriginalName("Solid")] Solid = 0,
    [pbr::OriginalName("Liquid")] Liquid = 1,
    [pbr::OriginalName("Gas")] Gas = 2,
    [pbr::OriginalName("Powder")] Powder = 3,
    [pbr::OriginalName("Paste")] Paste = 4,
    [pbr::OriginalName("Pressed")] Pressed = 5,
  }

  public enum FrontType {
    [pbr::OriginalName("FRONT_NONE")] FrontNone = 0,
    [pbr::OriginalName("FRONT_WARM")] FrontWarm = 1,
    [pbr::OriginalName("FRONT_COLD")] FrontCold = 2,
    [pbr::OriginalName("FRONT_OCCLUDED")] FrontOccluded = 3,
  }

  public enum CumulusType {
    [pbr::OriginalName("CUMULUS_NONE")] CumulusNone = 0,
    [pbr::OriginalName("CUMULUS_MEDIUM")] CumulusMedium = 1,
    [pbr::OriginalName("CUMULUS_MULTI")] CumulusMulti = 2,
    [pbr::OriginalName("CUMULUS_NIMBUS")] CumulusNimbus = 3,
  }

  public enum StratusType {
    [pbr::OriginalName("STRATUS_NONE")] StratusNone = 0,
    [pbr::OriginalName("STRATUS_ALTO")] StratusAlto = 1,
    [pbr::OriginalName("STRATUS_PROPER")] StratusProper = 2,
    [pbr::OriginalName("STRATUS_NIMBUS")] StratusNimbus = 3,
  }

  public enum FogType {
    [pbr::OriginalName("FOG_NONE")] FogNone = 0,
    [pbr::OriginalName("FOG_MIST")] FogMist = 1,
    [pbr::OriginalName("FOG_NORMAL")] FogNormal = 2,
    [pbr::OriginalName("F0G_THICK")] F0GThick = 3,
  }

  public enum SiteRealizationBuildingType {
    [pbr::OriginalName("cottage_plot")] CottagePlot = 0,
    [pbr::OriginalName("castle_wall")] CastleWall = 1,
    [pbr::OriginalName("castle_tower")] CastleTower = 2,
    [pbr::OriginalName("castle_courtyard")] CastleCourtyard = 3,
    [pbr::OriginalName("house")] House = 4,
    [pbr::OriginalName("temple")] Temple = 5,
    [pbr::OriginalName("tomb")] Tomb = 6,
    [pbr::OriginalName("shop_house")] ShopHouse = 7,
    [pbr::OriginalName("warehouse")] Warehouse = 8,
    [pbr::OriginalName("market_square")] MarketSquare = 9,
    [pbr::OriginalName("pasture")] Pasture = 10,
    [pbr::OriginalName("waste")] Waste = 11,
    [pbr::OriginalName("courtyard")] Courtyard = 12,
    [pbr::OriginalName("well")] Well = 13,
    [pbr::OriginalName("vault")] Vault = 14,
    [pbr::OriginalName("great_tower")] GreatTower = 15,
    [pbr::OriginalName("trenches")] Trenches = 16,
    [pbr::OriginalName("tree_house")] TreeHouse = 17,
    [pbr::OriginalName("hillock_house")] HillockHouse = 18,
    [pbr::OriginalName("mead_hall")] MeadHall = 19,
    [pbr::OriginalName("fortress_entrance")] FortressEntrance = 20,
    [pbr::OriginalName("library")] Library = 21,
    [pbr::OriginalName("tavern")] Tavern = 22,
  }

  public enum PatternType {
    [pbr::OriginalName("MONOTONE")] Monotone = 0,
    [pbr::OriginalName("STRIPES")] Stripes = 1,
    [pbr::OriginalName("IRIS_EYE")] IrisEye = 2,
    [pbr::OriginalName("SPOTS")] Spots = 3,
    [pbr::OriginalName("PUPIL_EYE")] PupilEye = 4,
    [pbr::OriginalName("MOTTLED")] Mottled = 5,
  }

  #endregion

  #region Messages
  public sealed partial class Coord : pb::IMessage<Coord> {
    private static readonly pb::MessageParser<Coord> _parser = new pb::MessageParser<Coord>(() => new Coord());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Coord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Coord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Coord(Coord other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Coord Clone() {
      return new Coord(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private int z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Coord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Coord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (Z != 0) hash ^= Z.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (Z != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Z);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (Z != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Z);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Coord other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.Z != 0) {
        Z = other.Z;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 24: {
            Z = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Tiletype : pb::IMessage<Tiletype> {
    private static readonly pb::MessageParser<Tiletype> _parser = new pb::MessageParser<Tiletype>(() => new Tiletype());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Tiletype> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tiletype() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tiletype(Tiletype other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      caption_ = other.caption_;
      shape_ = other.shape_;
      special_ = other.special_;
      material_ = other.material_;
      variant_ = other.variant_;
      direction_ = other.direction_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tiletype Clone() {
      return new Tiletype(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "caption" field.</summary>
    public const int CaptionFieldNumber = 3;
    private string caption_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Caption {
      get { return caption_; }
      set {
        caption_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shape" field.</summary>
    public const int ShapeFieldNumber = 4;
    private global::RemoteFortressReader.TiletypeShape shape_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RemoteFortressReader.TiletypeShape Shape {
      get { return shape_; }
      set {
        shape_ = value;
      }
    }

    /// <summary>Field number for the "special" field.</summary>
    public const int SpecialFieldNumber = 5;
    private global::RemoteFortressReader.TiletypeSpecial special_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RemoteFortressReader.TiletypeSpecial Special {
      get { return special_; }
      set {
        special_ = value;
      }
    }

    /// <summary>Field number for the "material" field.</summary>
    public const int MaterialFieldNumber = 6;
    private global::RemoteFortressReader.TiletypeMaterial material_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RemoteFortressReader.TiletypeMaterial Material {
      get { return material_; }
      set {
        material_ = value;
      }
    }

    /// <summary>Field number for the "variant" field.</summary>
    public const int VariantFieldNumber = 7;
    private global::RemoteFortressReader.TiletypeVariant variant_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RemoteFortressReader.TiletypeVariant Variant {
      get { return variant_; }
      set {
        variant_ = value;
      }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 8;
    private string direction_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Direction {
      get { return direction_; }
      set {
        direction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Tiletype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Tiletype other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Caption != other.Caption) return false;
      if (Shape != other.Shape) return false;
      if (Special != other.Special) return false;
      if (Material != other.Material) return false;
      if (Variant != other.Variant) return false;
      if (Direction != other.Direction) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Caption.Length != 0) hash ^= Caption.GetHashCode();
      if (Shape != 0) hash ^= Shape.GetHashCode();
      if (Special != 0) hash ^= Special.GetHashCode();
      if (Material != 0) hash ^= Material.GetHashCode();
      if (Variant != 0) hash ^= Variant.GetHashCode();
      if (Direction.Length != 0) hash ^= Direction.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Caption.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Caption);
      }
      if (Shape != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Shape);
      }
      if (Special != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Special);
      }
      if (Material != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Material);
      }
      if (Variant != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Variant);
      }
      if (Direction.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Direction);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Caption.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Caption);
      }
      if (Shape != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Shape);
      }
      if (Special != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Special);
      }
      if (Material != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Material);
      }
      if (Variant != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Variant);
      }
      if (Direction.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Direction);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Tiletype other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Caption.Length != 0) {
        Caption = other.Caption;
      }
      if (other.Shape != 0) {
        Shape = other.Shape;
      }
      if (other.Special != 0) {
        Special = other.Special;
      }
      if (other.Material != 0) {
        Material = other.Material;
      }
      if (other.Variant != 0) {
        Variant = other.Variant;
      }
      if (other.Direction.Length != 0) {
        Direction = other.Direction;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Caption = input.ReadString();
            break;
          }
          case 32: {
            shape_ = (global::RemoteFortressReader.TiletypeShape) input.ReadEnum();
            break;
          }
          case 40: {
            special_ = (global::RemoteFortressReader.TiletypeSpecial) input.ReadEnum();
            break;
          }
          case 48: {
            material_ = (global::RemoteFortressReader.TiletypeMaterial) input.ReadEnum();
            break;
          }
          case 56: {
            variant_ = (global::RemoteFortressReader.TiletypeVariant) input.ReadEnum();
            break;
          }
          case 66: {
            Direction = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TiletypeList : pb::IMessage<TiletypeList> {
    private static readonly pb::MessageParser<TiletypeList> _parser = new pb::MessageParser<TiletypeList>(() => new TiletypeList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TiletypeList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TiletypeList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TiletypeList(TiletypeList other) : this() {
      tiletypeList_ = other.tiletypeList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TiletypeList Clone() {
      return new TiletypeList(this);
    }

    /// <summary>Field number for the "tiletype_list" field.</summary>
    public const int TiletypeList_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::RemoteFortressReader.Tiletype> _repeated_tiletypeList_codec
        = pb::FieldCodec.ForMessage(10, global::RemoteFortressReader.Tiletype.Parser);
    private readonly pbc::RepeatedField<global::RemoteFortressReader.Tiletype> tiletypeList_ = new pbc::RepeatedField<global::RemoteFortressReader.Tiletype>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RemoteFortressReader.Tiletype> TiletypeList_ {
      get { return tiletypeList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TiletypeList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TiletypeList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tiletypeList_.Equals(other.tiletypeList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tiletypeList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tiletypeList_.WriteTo(output, _repeated_tiletypeList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tiletypeList_.CalculateSize(_repeated_tiletypeList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TiletypeList other) {
      if (other == null) {
        return;
      }
      tiletypeList_.Add(other.tiletypeList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            tiletypeList_.AddEntriesFrom(input, _repeated_tiletypeList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BuildingExtents : pb::IMessage<BuildingExtents> {
    private static readonly pb::MessageParser<BuildingExtents> _parser = new pb::MessageParser<BuildingExtents>(() => new BuildingExtents());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuildingExtents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildingExtents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildingExtents(BuildingExtents other) : this() {
      posX_ = other.posX_;
      posY_ = other.posY_;
      width_ = other.width_;
      height_ = other.height_;
      extents_ = other.extents_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildingExtents Clone() {
      return new BuildingExtents(this);
    }

    /// <summary>Field number for the "pos_x" field.</summary>
    public const int PosXFieldNumber = 1;
    private int posX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "pos_y" field.</summary>
    public const int PosYFieldNumber = 2;
    private int posY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 3;
    private int width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 4;
    private int height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "extents" field.</summary>
    public const int ExtentsFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_extents_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> extents_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Extents {
      get { return extents_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuildingExtents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuildingExtents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PosX != other.PosX) return false;
      if (PosY != other.PosY) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if(!extents_.Equals(other.extents_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PosX != 0) hash ^= PosX.GetHashCode();
      if (PosY != 0) hash ^= PosY.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      hash ^= extents_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PosX != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PosX);
      }
      if (PosY != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PosY);
      }
      if (Width != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Height);
      }
      extents_.WriteTo(output, _repeated_extents_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosX);
      }
      if (PosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosY);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      size += extents_.CalculateSize(_repeated_extents_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuildingExtents other) {
      if (other == null) {
        return;
      }
      if (other.PosX != 0) {
        PosX = other.PosX;
      }
      if (other.PosY != 0) {
        PosY = other.PosY;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      extents_.Add(other.extents_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PosX = input.ReadInt32();
            break;
          }
          case 16: {
            PosY = input.ReadInt32();
            break;
          }
          case 24: {
            Width = input.ReadInt32();
            break;
          }
          case 32: {
            Height = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            extents_.AddEntriesFrom(input, _repeated_extents_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BuildingItem : pb::IMessage<BuildingItem> {
    private static readonly pb::MessageParser<BuildingItem> _parser = new pb::MessageParser<BuildingItem>(() => new BuildingItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuildingItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildingItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildingItem(BuildingItem other) : this() {
      Item = other.item_ != null ? other.Item.Clone() : null;
      mode_ = other.mode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildingItem Clone() {
      return new BuildingItem(this);
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 1;
    private global::RemoteFortressReader.Item item_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RemoteFortressReader.Item Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 2;
    private int mode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuildingItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuildingItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Item, other.Item)) return false;
      if (Mode != other.Mode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (item_ != null) hash ^= Item.GetHashCode();
      if (Mode != 0) hash ^= Mode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (item_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Item);
      }
      if (Mode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Mode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      if (Mode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuildingItem other) {
      if (other == null) {
        return;
      }
      if (other.item_ != null) {
        if (item_ == null) {
          item_ = new global::RemoteFortressReader.Item();
        }
        Item.MergeFrom(other.Item);
      }
      if (other.Mode != 0) {
        Mode = other.Mode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (item_ == null) {
              item_ = new global::RemoteFortressReader.Item();
            }
            input.ReadMessage(item_);
            break;
          }
          case 16: {
            Mode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BuildingInstance : pb::IMessage<BuildingInstance> {
    private static readonly pb::MessageParser<BuildingInstance> _parser = new pb::MessageParser<BuildingInstance>(() => new BuildingInstance());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuildingInstance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildingInstance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildingInstance(BuildingInstance other) : this() {
      index_ = other.index_;
      posXMin_ = other.posXMin_;
      posYMin_ = other.posYMin_;
      posZMin_ = other.posZMin_;
      posXMax_ = other.posXMax_;
      posYMax_ = other.posYMax_;
      posZMax_ = other.posZMax_;
      BuildingType = other.buildingType_ != null ? other.BuildingType.Clone() : null;
      Material = other.material_ != null ? other.Material.Clone() : null;
      buildingFlags_ = other.buildingFlags_;
      isRoom_ = other.isRoom_;
      Room = other.room_ != null ? other.Room.Clone() : null;
      direction_ = other.direction_;
      items_ = other.items_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildingInstance Clone() {
      return new BuildingInstance(this);
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "pos_x_min" field.</summary>
    public const int PosXMinFieldNumber = 2;
    private int posXMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosXMin {
      get { return posXMin_; }
      set {
        posXMin_ = value;
      }
    }

    /// <summary>Field number for the "pos_y_min" field.</summary>
    public const int PosYMinFieldNumber = 3;
    private int posYMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosYMin {
      get { return posYMin_; }
      set {
        posYMin_ = value;
      }
    }

    /// <summary>Field number for the "pos_z_min" field.</summary>
    public const int PosZMinFieldNumber = 4;
    private int posZMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosZMin {
      get { return posZMin_; }
      set {
        posZMin_ = value;
      }
    }

    /// <summary>Field number for the "pos_x_max" field.</summary>
    public const int PosXMaxFieldNumber = 5;
    private int posXMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosXMax {
      get { return posXMax_; }
      set {
        posXMax_ = value;
      }
    }

    /// <summary>Field number for the "pos_y_max" field.</summary>
    public const int PosYMaxFieldNumber = 6;
    private int posYMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosYMax {
      get { return posYMax_; }
      set {
        posYMax_ = value;
      }
    }

    /// <summary>Field number for the "pos_z_max" field.</summary>
    public const int PosZMaxFieldNumber = 7;
    private int posZMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosZMax {
      get { return posZMax_; }
      set {
        posZMax_ = value;
      }
    }

    /// <summary>Field number for the "building_type" field.</summary>
    public const int BuildingTypeFieldNumber = 8;
    private global::RemoteFortressReader.BuildingType buildingType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RemoteFortressReader.BuildingType BuildingType {
      get { return buildingType_; }
      set {
        buildingType_ = value;
      }
    }

    /// <summary>Field number for the "material" field.</summary>
    public const int MaterialFieldNumber = 9;
    private global::RemoteFortressReader.MatPair material_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RemoteFortressReader.MatPair Material {
      get { return material_; }
      set {
        material_ = value;
      }
    }

    /// <summary>Field number for the "building_flags" field.</summary>
    public const int BuildingFlagsFieldNumber = 10;
    private uint buildingFlags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BuildingFlags {
      get { return buildingFlags_; }
      set {
        buildingFlags_ = value;
      }
    }

    /// <summary>Field number for the "is_room" field.</summary>
    public const int IsRoomFieldNumber = 11;
    private bool isRoom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRoom {
      get { return isRoom_; }
      set {
        isRoom_ = value;
      }
    }

    /// <summary>Field number for the "room" field.</summary>
    public const int RoomFieldNumber = 12;
    private global::RemoteFortressReader.BuildingExtents room_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RemoteFortressReader.BuildingExtents Room {
      get { return room_; }
      set {
        room_ = value;
      }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 13;
    private global::RemoteFortressReader.BuildingDirection direction_ = 0;
    /// <summary>
    ///Doesn't mean anything for most buildings
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RemoteFortressReader.BuildingDirection Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 14;
    private static readonly pb::FieldCodec<global::RemoteFortressReader.BuildingItem> _repeated_items_codec
        = pb::FieldCodec.ForMessage(114, global::RemoteFortressReader.BuildingItem.Parser);
    private readonly pbc::RepeatedField<global::RemoteFortressReader.BuildingItem> items_ = new pbc::RepeatedField<global::RemoteFortressReader.BuildingItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RemoteFortressReader.BuildingItem> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuildingInstance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuildingInstance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (PosXMin != other.PosXMin) return false;
      if (PosYMin != other.PosYMin) return false;
      if (PosZMin != other.PosZMin) return false;
      if (PosXMax != other.PosXMax) return false;
      if (PosYMax != other.PosYMax) return false;
      if (PosZMax != other.PosZMax) return false;
      if (!object.Equals(BuildingType, other.BuildingType)) return false;
      if (!object.Equals(Material, other.Material)) return false;
      if (BuildingFlags != other.BuildingFlags) return false;
      if (IsRoom != other.IsRoom) return false;
      if (!object.Equals(Room, other.Room)) return false;
      if (Direction != other.Direction) return false;
      if(!items_.Equals(other.items_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (PosXMin != 0) hash ^= PosXMin.GetHashCode();
      if (PosYMin != 0) hash ^= PosYMin.GetHashCode();
      if (PosZMin != 0) hash ^= PosZMin.GetHashCode();
      if (PosXMax != 0) hash ^= PosXMax.GetHashCode();
      if (PosYMax != 0) hash ^= PosYMax.GetHashCode();
      if (PosZMax != 0) hash ^= PosZMax.GetHashCode();
      if (buildingType_ != null) hash ^= BuildingType.GetHashCode();
      if (material_ != null) hash ^= Material.GetHashCode();
      if (BuildingFlags != 0) hash ^= BuildingFlags.GetHashCode();
      if (IsRoom != false) hash ^= IsRoom.GetHashCode();
      if (room_ != null) hash ^= Room.GetHashCode();
      if (Direction != 0) hash ^= Direction.GetHashCode();
      hash ^= items_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (PosXMin != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PosXMin);
      }
      if (PosYMin != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PosYMin);
      }
      if (PosZMin != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PosZMin);
      }
      if (PosXMax != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PosXMax);
      }
      if (PosYMax != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PosYMax);
      }
      if (PosZMax != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PosZMax);
      }
      if (buildingType_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(BuildingType);
      }
      if (material_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Material);
      }
      if (BuildingFlags != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(BuildingFlags);
      }
      if (IsRoom != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsRoom);
      }
      if (room_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Room);
      }
      if (Direction != 0) {
        output.WriteRawTag(104);
        output.WriteEnum((int) Direction);
      }
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (PosXMin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosXMin);
      }
      if (PosYMin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosYMin);
      }
      if (PosZMin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosZMin);
      }
      if (PosXMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosXMax);
      }
      if (PosYMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosYMax);
      }
      if (PosZMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosZMax);
      }
      if (buildingType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BuildingType);
      }
      if (material_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Material);
      }
      if (BuildingFlags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BuildingFlags);
      }
      if (IsRoom != false) {
        size += 1 + 1;
      }
      if (room_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Room);
      }
      if (Direction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Direction);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuildingInstance other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.PosXMin != 0) {
        PosXMin = other.PosXMin;
      }
      if (other.PosYMin != 0) {
        PosYMin = other.PosYMin;
      }
      if (other.PosZMin != 0) {
        PosZMin = other.PosZMin;
      }
      if (other.PosXMax != 0) {
        PosXMax = other.PosXMax;
      }
      if (other.PosYMax != 0) {
        PosYMax = other.PosYMax;
      }
      if (other.PosZMax != 0) {
        PosZMax = other.PosZMax;
      }
      if (other.buildingType_ != null) {
        if (buildingType_ == null) {
          buildingType_ = new global::RemoteFortressReader.BuildingType();
        }
        BuildingType.MergeFrom(other.BuildingType);
      }
      if (other.material_ != null) {
        if (material_ == null) {
          material_ = new global::RemoteFortressReader.MatPair();
        }
        Material.MergeFrom(other.Material);
      }
      if (other.BuildingFlags != 0) {
        BuildingFlags = other.BuildingFlags;
      }
      if (other.IsRoom != false) {
        IsRoom = other.IsRoom;
      }
      if (other.room_ != null) {
        if (room_ == null) {
          room_ = new global::RemoteFortressReader.BuildingExtents();
        }
        Room.MergeFrom(other.Room);
      }
      if (other.Direction != 0) {
        Direction = other.Direction;
      }
      items_.Add(other.items_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            PosXMin = input.ReadInt32();
            break;
          }
          case 24: {
            PosYMin = input.ReadInt32();
            break;
          }
          case 32: {
            PosZMin = input.ReadInt32();
            break;
          }
          case 40: {
            PosXMax = input.ReadInt32();
            break;
          }
          case 48: {
            PosYMax = input.ReadInt32();
            break;
          }
          case 56: {
            PosZMax = input.ReadInt32();
            break;
          }
          case 66: {
            if (buildingType_ == null) {
              buildingType_ = new global::RemoteFortressReader.BuildingType();
            }
            input.ReadMessage(buildingType_);
            break;
          }
          case 74: {
            if (material_ == null) {
              material_ = new global::RemoteFortressReader.MatPair();
            }
            input.ReadMessage(material_);
            break;
          }
          case 80: {
            BuildingFlags = input.ReadUInt32();
            break;
          }
          case 88: {
            IsRoom = input.ReadBool();
            break;
          }
          case 98: {
            if (room_ == null) {
              room_ = new global::RemoteFortressReader.BuildingExtents();
            }
            input.ReadMessage(room_);
            break;
          }
          case 104: {
            direction_ = (global::RemoteFortressReader.BuildingDirection) input.ReadEnum();
            break;
          }
          case 114: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RiverEdge : pb::IMessage<RiverEdge> {
    private static readonly pb::MessageParser<RiverEdge> _parser = new pb::MessageParser<RiverEdge>(() => new RiverEdge());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RiverEdge> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RiverEdge() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RiverEdge(RiverEdge other) : this() {
      minPos_ = other.minPos_;
      maxPos_ = other.maxPos_;
      active_ = other.active_;
      elevation_ = other.elevation_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RiverEdge Clone() {
      return new RiverEdge(this);
    }

    /// <summary>Field number for the "min_pos" field.</summary>
    public const int MinPosFieldNumber = 1;
    private int minPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinPos {
      get { return minPos_; }
      set {
        minPos_ = value;
      }
    }

    /// <summary>Field number for the "max_pos" field.</summary>
    public const int MaxPosFieldNumber = 2;
    private int maxPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxPos {
      get { return maxPos_; }
      set {
        maxPos_ = value;
      }
    }

    /// <summary>Field number for the "active" field.</summary>
    public const int ActiveFieldNumber = 3;
    private int active_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Active {
      get { return active_; }
      set {
        active_ = value;
      }
    }

    /// <summary>Field number for the "elevation" field.</summary>
    public const int ElevationFieldNumber = 4;
    private int elevation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Elevation {
      get { return elevation_; }
      set {
        elevation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RiverEdge);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RiverEdge other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MinPos != other.MinPos) return false;
      if (MaxPos != other.MaxPos) return false;
      if (Active != other.Active) return false;
      if (Elevation != other.Elevation) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MinPos != 0) hash ^= MinPos.GetHashCode();
      if (MaxPos != 0) hash ^= MaxPos.GetHashCode();
      if (Active != 0) hash ^= Active.GetHashCode();
      if (Elevation != 0) hash ^= Elevation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MinPos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MinPos);
      }
      if (MaxPos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxPos);
      }
      if (Active != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Active);
      }
      if (Elevation != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Elevation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MinPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinPos);
      }
      if (MaxPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxPos);
      }
      if (Active != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Active);
      }
      if (Elevation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Elevation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RiverEdge other) {
      if (other == null) {
        return;
      }
      if (other.MinPos != 0) {
        MinPos = other.MinPos;
      }
      if (other.MaxPos != 0) {
        MaxPos = other.MaxPos;
      }
      if (other.Active != 0) {
        Active = other.Active;
      }
      if (other.Elevation != 0) {
        Elevation = other.Elevation;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MinPos = input.ReadInt32();
            break;
          }
          case 16: {
            MaxPos = input.ReadInt32();
            break;
          }
          case 24: {
            Active = input.ReadInt32();
            break;
          }
          case 32: {
            Elevation = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RiverTile : pb::IMessage<RiverTile> {
    private static readonly pb::MessageParser<RiverTile> _parser = new pb::MessageParser<RiverTile>(() => new RiverTile());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RiverTile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RiverTile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RiverTile(RiverTile other) : this() {
      North = other.north_ != null ? other.North.Clone() : null;
      South = other.south_ != null ? other.South.Clone() : null;
      East = other.east_ != null ? other.East.Clone() : null;
      West = other.west_ != null ? other.West.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RiverTile Clone() {
      return new RiverTile(this);
    }

    /// <summary>Field number for the "north" field.</summary>
    public const int NorthFieldNumber = 1;
    private global::RemoteFortressReader.RiverEdge north_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RemoteFortressReader.RiverEdge North {
      get { return north_; }
      set {
        north_ = value;
      }
    }

    /// <summary>Field number for the "south" field.</summary>
    public const int SouthFieldNumber = 2;
    private global::RemoteFortressReader.RiverEdge south_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RemoteFortressReader.RiverEdge South {
      get { return south_; }
      set {
        south_ = value;
      }
    }

    /// <summary>Field number for the "east" field.</summary>
    public const int EastFieldNumber = 3;
    private global::RemoteFortressReader.RiverEdge east_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RemoteFortressReader.RiverEdge East {
      get { return east_; }
      set {
        east_ = value;
      }
    }

    /// <summary>Field number for the "west" field.</summary>
    public const int WestFieldNumber = 4;
    private global::RemoteFortressReader.RiverEdge west_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RemoteFortressReader.RiverEdge West {
      get { return west_; }
      set {
        west_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RiverTile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RiverTile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(North, other.North)) return false;
      if (!object.Equals(South, other.South)) return false;
      if (!object.Equals(East, other.East)) return false;
      if (!object.Equals(West, other.West)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (north_ != null) hash ^= North.GetHashCode();
      if (south_ != null) hash ^= South.GetHashCode();
      if (east_ != null) hash ^= East.GetHashCode();
      if (west_ != null) hash ^= West.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (north_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(North);
      }
      if (south_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(South);
      }
      if (east_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(East);
      }
      if (west_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(West);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (north_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(North);
      }
      if (south_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(South);
      }
      if (east_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(East);
      }
      if (west_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(West);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RiverTile other) {
      if (other == null) {
        return;
      }
      if (other.north_ != null) {
        if (north_ == null) {
          north_ = new global::RemoteFortressReader.RiverEdge();
        }
        North.MergeFrom(other.North);
      }
      if (other.south_ != null) {
        if (south_ == null) {
          south_ = new global::RemoteFortressReader.RiverEdge();
        }
        South.MergeFrom(other.South);
      }
      if (other.east_ != null) {
        if (east_ == null) {
          east_ = new global::RemoteFortressReader.RiverEdge();
        }
        East.MergeFrom(other.East);
      }
      if (other.west_ != null) {
        if (west_ == null) {
          west_ = new global::RemoteFortressReader.RiverEdge();
        }
        West.MergeFrom(other.West);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (north_ == null) {
              north_ = new global::RemoteFortressReader.RiverEdge();
            }
            input.ReadMessage(north_);
            break;
          }
          case 18: {
            if (south_ == null) {
              south_ = new global::RemoteFortressReader.RiverEdge();
            }
            input.ReadMessage(south_);
            break;
          }
          case 26: {
            if (east_ == null) {
              east_ = new global::RemoteFortressReader.RiverEdge();
            }
            input.ReadMessage(east_);
            break;
          }
          case 34: {
            if (west_ == null) {
              west_ = new global::RemoteFortressReader.RiverEdge();
            }
            input.ReadMessage(west_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Spatter : pb::IMessage<Spatter> {
    private static readonly pb::MessageParser<Spatter> _parser = new pb::MessageParser<Spatter>(() => new Spatter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Spatter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Spatter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Spatter(Spatter other) : this() {
      Material = other.material_ != null ? other.Material.Clone() : null;
      amount_ = other.amount_;
      state_ = other.state_;
      Item = other.item_ != null ? other.Item.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Spatter Clone() {
      return new Spatter(this);
    }

    /// <summary>Field number for the "material" field.</summary>
    public const int MaterialFieldNumber = 1;
    private global::RemoteFortressReader.MatPair material_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RemoteFortressReader.MatPair Material {
      get { return material_; }
      set {
        material_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private int amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private global::RemoteFortressReader.MatterState state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RemoteFortressReader.MatterState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 4;
    private global::RemoteFortressReader.MatPair item_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RemoteFortressReader.MatPair Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Spatter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Spatter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Material, other.Material)) return false;
      if (Amount != other.Amount) return false;
      if (State != other.State) return false;
      if (!object.Equals(Item, other.Item)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (material_ != null) hash ^= Material.GetHashCode();
      if (Amount != 0) hash ^= Amount.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (item_ != null) hash ^= Item.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (material_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Material);
      }
      if (Amount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Amount);
      }
      if (State != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) State);
      }
      if (item_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Item);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (material_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Material);
      }
      if (Amount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Spatter other) {
      if (other == null) {
        return;
      }
      if (other.material_ != null) {
        if (material_ == null) {
          material_ = new global::RemoteFortressReader.MatPair();
        }
        Material.MergeFrom(other.Material);
      }
      if (other.Amount != 0) {
        Amount = other.Amount;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.item_ != null) {
        if (item_ == null) {
          item_ = new global::RemoteFortressReader.MatPair();
        }
        Item.MergeFrom(other.Item);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (material_ == null) {
              material_ = new global::RemoteFortressReader.MatPair();
            }
            input.ReadMessage(material_);
            break;
          }
          case 16: {
            Amount = input.ReadInt32();
            break;
          }
          case 24: {
            state_ = (global::RemoteFortressReader.MatterState) input.ReadEnum();
            break;
          }
          case 34: {
            if (item_ == null) {
              item_ = new global::RemoteFortressReader.MatPair();
            }
            input.ReadMessage(item_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SpatterPile : pb::IMessage<SpatterPile> {
    private static readonly pb::MessageParser<SpatterPile> _parser = new pb::MessageParser<SpatterPile>(() => new SpatterPile());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpatterPile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpatterPile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpatterPile(SpatterPile other) : this() {
      spatters_ = other.spatters_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpatterPile Clone() {
      return new SpatterPile(this);
    }

    /// <summary>Field number for the "spatters" field.</summary>
    public const int SpattersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::RemoteFortressReader.Spatter> _repeated_spatters_codec
        = pb::FieldCodec.ForMessage(10, global::RemoteFortressReader.Spatter.Parser);
    private readonly pbc::RepeatedField<global::RemoteFortressReader.Spatter> spatters_ = new pbc::RepeatedField<global::RemoteFortressReader.Spatter>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RemoteFortressReader.Spatter> Spatters {
      get { return spatters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpatterPile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpatterPile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!spatters_.Equals(other.spatters_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= spatters_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      spatters_.WriteTo(output, _repeated_spatters_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += spatters_.CalculateSize(_repeated_spatters_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpatterPile other) {
      if (other == null) {
        return;
      }
      spatters_.Add(other.spatters_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            spatters_.AddEntriesFrom(input, _repeated_spatters_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Item : pb::IMessage<Item> {
    private static readonly pb::MessageParser<Item> _parser = new pb::MessageParser<Item>(() => new Item());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Item> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Item() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Item(Item other) : this() {
      id_ = other.id_;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      flags1_ = other.flags1_;
      flags2_ = other.flags2_;
      Type = other.type_ != null ? other.Type.Clone() : null;
      Material = other.material_ != null ? other.Material.Clone() : null;
      Dye = other.dye_ != null ? other.Dye.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Item Clone() {
      return new Item(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private global::RemoteFortressReader.Coord pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RemoteFortressReader.Coord Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "flags1" field.</summary>
    public const int Flags1FieldNumber = 3;
    private uint flags1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flags1 {
      get { return flags1_; }
      set {
        flags1_ = value;
      }
    }

    /// <summary>Field number for the "flags2" field.</summary>
    public const int Flags2FieldNumber = 4;
    private uint flags2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flags2 {
      get { return flags2_; }
      set {
        flags2_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private global::RemoteFortressReader.MatPair type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RemoteFortressReader.MatPair Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "material" field.</summary>
    public const int MaterialFieldNumber = 6;
    private global::RemoteFortressReader.MatPair material_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RemoteFortressReader.MatPair Material {
      get { return material_; }
      set {
        material_ = value;
      }
    }

    /// <summary>Field number for the "dye" field.</summary>
    public const int DyeFieldNumber = 7;
    private global::RemoteFortressReader.ColorDefinition dye_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RemoteFortressReader.ColorDefinition Dye {
      get { return dye_; }
      set {
        dye_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Item);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Item other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (Flags1 != other.Flags1) return false;
      if (Flags2 != other.Flags2) return false;
      if (!object.Equals(Type, other.Type)) return false;
      if (!object.Equals(Material, other.Material)) return false;
      if (!object.Equals(Dye, other.Dye)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (Flags1 != 0) hash ^= Flags1.GetHashCode();
      if (Flags2 != 0) hash ^= Flags2.GetHashCode();
      if (type_ != null) hash ^= Type.GetHashCode();
      if (material_ != null) hash ^= Material.GetHashCode();
      if (dye_ != null) hash ^= Dye.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (pos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pos);
      }
      if (Flags1 != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Flags1);
      }
      if (Flags2 != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Flags2);
      }
      if (type_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Type);
      }
      if (material_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Material);
      }
      if (dye_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Dye);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (Flags1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flags1);
      }
      if (Flags2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flags2);
      }
      if (type_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Type);
      }
      if (material_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Material);
      }
      if (dye_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dye);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Item other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::RemoteFortressReader.Coord();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.Flags1 != 0) {
        Flags1 = other.Flags1;
      }
      if (other.Flags2 != 0) {
        Flags2 = other.Flags2;
      }
      if (other.type_ != null) {
        if (type_ == null) {
          type_ = new global::RemoteFortressReader.MatPair();
        }
        Type.MergeFrom(other.Type);
      }
      if (other.material_ != null) {
        if (material_ == null) {
          material_ = new global::RemoteFortressReader.MatPair();
        }
        Material.MergeFrom(other.Material);
      }
      if (other.dye_ != null) {
        if (dye_ == null) {
          dye_ = new global::RemoteFortressReader.ColorDefinition();
        }
        Dye.MergeFrom(other.Dye);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            if (pos_ == null) {
              pos_ = new global::RemoteFortressReader.Coord();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 24: {
            Flags1 = input.ReadUInt32();
            break;
          }
          case 32: {
            Flags2 = input.ReadUInt32();
            break;
          }
          case 42: {
            if (type_ == null) {
              type_ = new global::RemoteFortressReader.MatPair();
            }
            input.ReadMessage(type_);
            break;
          }
          case 50: {
            if (material_ == null) {
              material_ = new global::RemoteFortressReader.MatPair();
            }
            input.ReadMessage(material_);
            break;
          }
          case 58: {
            if (dye_ == null) {
              dye_ = new global::RemoteFortressReader.ColorDefinition();
            }
            input.ReadMessage(dye_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MapBlock : pb::IMessage<MapBlock> {
    private static readonly pb::MessageParser<MapBlock> _parser = new pb::MessageParser<MapBlock>(() => new MapBlock());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapBlock> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapBlock() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapBlock(MapBlock other) : this() {
      mapX_ = other.mapX_;
      mapY_ = other.mapY_;
      mapZ_ = other.mapZ_;
      tiles_ = other.tiles_.Clone();
      materials_ = other.materials_.Clone();
      layerMaterials_ = other.layerMaterials_.Clone();
      veinMaterials_ = other.veinMaterials_.Clone();
      baseMaterials_ = other.baseMaterials_.Clone();
      magma_ = other.magma_.Clone();
      water_ = other.water_.Clone();
      hidden_ = other.hidden_.Clone();
      light_ = other.light_.Clone();
      subterranean_ = other.subterranean_.Clone();
      outside_ = other.outside_.Clone();
      aquifer_ = other.aquifer_.Clone();
      waterStagnant_ = other.waterStagnant_.Clone();
      waterSalt_ = other.waterSalt_.Clone();
      constructionItems_ = other.constructionItems_.Clone();
      buildings_ = other.buildings_.Clone();
      treePercent_ = other.treePercent_.Clone();
      treeX_ = other.treeX_.Clone();
      treeY_ = other.treeY_.Clone();
      treeZ_ = other.treeZ_.Clone();
      tileDigDesignation_ = other.tileDigDesignation_.Clone();
      spatterPile_ = other.spatterPile_.Clone();
      items_ = other.items_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapBlock Clone() {
      return new MapBlock(this);
    }

    /// <summary>Field number for the "map_x" field.</summary>
    public const int MapXFieldNumber = 1;
    private int mapX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapX {
      get { return mapX_; }
      set {
        mapX_ = value;
      }
    }

    /// <summary>Field number for the "map_y" field.</summary>
    public const int MapYFieldNumber = 2;
    private int mapY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapY {
      get { return mapY_; }
      set {
        mapY_ = value;
      }
    }

    /// <summary>Field number for the "map_z" field.</summary>
    public const int MapZFieldNumber = 3;
    private int mapZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapZ {
      get { return mapZ_; }
      set {
        mapZ_ = value;
      }
    }

    /// <summary>Field number for the "tiles" field.</summary>
    public const int TilesFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_tiles_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> tiles_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Tiles {
      get { return tiles_; }
    }

    /// <summary>Field number for the "materials" field.</summary>
    public const int MaterialsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::RemoteFortressReader.MatPair> _repeated_materials_codec
        = pb::FieldCodec.ForMessage(42, global::RemoteFortressReader.MatPair.Parser);
    private readonly pbc::RepeatedField<global::RemoteFortressReader.MatPair> materials_ = new pbc::RepeatedField<global::RemoteFortressReader.MatPair>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RemoteFortressReader.MatPair> Materials {
      get { return materials_; }
    }

    /// <summary>Field number for the "layer_materials" field.</summary>
    public const int LayerMaterialsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::RemoteFortressReader.MatPair> _repeated_layerMaterials_codec
        = pb::FieldCodec.ForMessage(50, global::RemoteFortressReader.MatPair.Parser);
    private readonly pbc::RepeatedField<global::RemoteFortressReader.MatPair> layerMaterials_ = new pbc::RepeatedField<global::RemoteFortressReader.MatPair>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RemoteFortressReader.MatPair> LayerMaterials {
      get { return layerMaterials_; }
    }

    /// <summary>Field number for the "vein_materials" field.</summary>
    public const int VeinMaterialsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::RemoteFortressReader.MatPair> _repeated_veinMaterials_codec
        = pb::FieldCodec.ForMessage(58, global::RemoteFortressReader.MatPair.Parser);
    private readonly pbc::RepeatedField<global::RemoteFortressReader.MatPair> veinMaterials_ = new pbc::RepeatedField<global::RemoteFortressReader.MatPair>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RemoteFortressReader.MatPair> VeinMaterials {
      get { return veinMaterials_; }
    }

    /// <summary>Field number for the "base_materials" field.</summary>
    public const int BaseMaterialsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::RemoteFortressReader.MatPair> _repeated_baseMaterials_codec
        = pb::FieldCodec.ForMessage(66, global::RemoteFortressReader.MatPair.Parser);
    private readonly pbc::RepeatedField<global::RemoteFortressReader.MatPair> baseMaterials_ = new pbc::RepeatedField<global::RemoteFortressReader.MatPair>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RemoteFortressReader.MatPair> BaseMaterials {
      get { return baseMaterials_; }
    }

    /// <summary>Field number for the "magma" field.</summary>
    public const int MagmaFieldNumber = 9;
    private static readonly pb::FieldCodec<int> _repeated_magma_codec
        = pb::FieldCodec.ForInt32(74);
    private readonly pbc::RepeatedField<int> magma_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Magma {
      get { return magma_; }
    }

    /// <summary>Field number for the "water" field.</summary>
    public const int WaterFieldNumber = 10;
    private static readonly pb::FieldCodec<int> _repeated_water_codec
        = pb::FieldCodec.ForInt32(82);
    private readonly pbc::RepeatedField<int> water_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Water {
      get { return water_; }
    }

    /// <summary>Field number for the "hidden" field.</summary>
    public const int HiddenFieldNumber = 11;
    private static readonly pb::FieldCodec<bool> _repeated_hidden_codec
        = pb::FieldCodec.ForBool(90);
    private readonly pbc::RepeatedField<bool> hidden_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> Hidden {
      get { return hidden_; }
    }

    /// <summary>Field number for the "light" field.</summary>
    public const int LightFieldNumber = 12;
    private static readonly pb::FieldCodec<bool> _repeated_light_codec
        = pb::FieldCodec.ForBool(98);
    private readonly pbc::RepeatedField<bool> light_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> Light {
      get { return light_; }
    }

    /// <summary>Field number for the "subterranean" field.</summary>
    public const int SubterraneanFieldNumber = 13;
    private static readonly pb::FieldCodec<bool> _repeated_subterranean_codec
        = pb::FieldCodec.ForBool(106);
    private readonly pbc::RepeatedField<bool> subterranean_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> Subterranean {
      get { return subterranean_; }
    }

    /// <summary>Field number for the "outside" field.</summary>
    public const int OutsideFieldNumber = 14;
    private static readonly pb::FieldCodec<bool> _repeated_outside_codec
        = pb::FieldCodec.ForBool(114);
    private readonly pbc::RepeatedField<bool> outside_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> Outside {
      get { return outside_; }
    }

    /// <summary>Field number for the "aquifer" field.</summary>
    public const int AquiferFieldNumber = 15;
    private static readonly pb::FieldCodec<bool> _repeated_aquifer_codec
        = pb::FieldCodec.ForBool(122);
    private readonly pbc::RepeatedField<bool> aquifer_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> Aquifer {
      get { return aquifer_; }
    }

    /// <summary>Field number for the "water_stagnant" field.</summary>
    public const int WaterStagnantFieldNumber = 16;
    private static readonly pb::FieldCodec<bool> _repeated_waterStagnant_codec
        = pb::FieldCodec.ForBool(130);
    private readonly pbc::RepeatedField<bool> waterStagnant_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> WaterStagnant {
      get { return waterStagnant_; }
    }

    /// <summary>Field number for the "water_salt" field.</summary>
    public const int WaterSaltFieldNumber = 17;
    private static readonly pb::FieldCodec<bool> _repeated_waterSalt_codec
        = pb::FieldCodec.ForBool(138);
    private readonly pbc::RepeatedField<bool> waterSalt_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> WaterSalt {
      get { return waterSalt_; }
    }

    /// <summary>Field number for the "construction_items" field.</summary>
    public const int ConstructionItemsFieldNumber = 18;
    private static readonly pb::FieldCodec<global::RemoteFortressReader.MatPair> _repeated_constructionItems_codec
        = pb::FieldCodec.ForMessage(146, global::RemoteFortressReader.MatPair.Parser);
    private readonly pbc::RepeatedField<global::RemoteFortressReader.MatPair> constructionItems_ = new pbc::RepeatedField<global::RemoteFortressReader.MatPair>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RemoteFortressReader.MatPair> ConstructionItems {
      get { return constructionItems_; }
    }

    /// <summary>Field number for the "buildings" field.</summary>
    public const int BuildingsFieldNumber = 19;
    private static readonly pb::FieldCodec<global::RemoteFortressReader.BuildingInstance> _repeated_buildings_codec
        = pb::FieldCodec.ForMessage(154, global::RemoteFortressReader.BuildingInstance.Parser);
    private readonly pbc::RepeatedField<global::RemoteFortressReader.BuildingInstance> buildings_ = new pbc::RepeatedField<global::RemoteFortressReader.BuildingInstance>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RemoteFortressReader.BuildingInstance> Buildings {
      get { return buildings_; }
    }

    /// <summary>Field number for the "tree_percent" field.</summary>
    public const int TreePercentFieldNumber = 20;
    private static readonly pb::FieldCodec<int> _repeated_treePercent_codec
        = pb::FieldCodec.ForInt32(162);
    private readonly pbc::RepeatedField<int> treePercent_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TreePercent {
      get { return treePercent_; }
    }

    /// <summary>Field number for the "tree_x" field.</summary>
    public const int TreeXFieldNumber = 21;
    private static readonly pb::FieldCodec<int> _repeated_treeX_codec
        = pb::FieldCodec.ForInt32(170);
    private readonly pbc::RepeatedField<int> treeX_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TreeX {
      get { return treeX_; }
    }

    /// <summary>Field number for the "tree_y" field.</summary>
    public const int TreeYFieldNumber = 22;
    private static readonly pb::FieldCodec<int> _repeated_treeY_codec
        = pb::FieldCodec.ForInt32(178);
    private readonly pbc::RepeatedField<int> treeY_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TreeY {
      get { return treeY_; }
    }

    /// <summary>Field number for the "tree_z" field.</summary>
    public const int TreeZFieldNumber = 23;
    private static readonly pb::FieldCodec<int> _repeated_treeZ_codec
        = pb::FieldCodec.ForInt32(186);
    private readonly pbc::RepeatedField<int> treeZ_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TreeZ {
      get { return treeZ_; }
    }

    /// <summary>Field number for the "tile_dig_designation" field.</summary>
    public const int TileDigDesignationFieldNumber = 24;
    private static readonly pb::FieldCodec<global::RemoteFortressReader.TileDigDesignation> _repeated_tileDigDesignation_codec
        = pb::FieldCodec.ForEnum(194, x => (int) x, x => (global::RemoteFortressReader.TileDigDesignation) x);
    private readonly pbc::RepeatedField<global::RemoteFortressReader.TileDigDesignation> tileDigDesignation_ = new pbc::RepeatedField<global::RemoteFortressReader.TileDigDesignation>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RemoteFortressReader.TileDigDesignation> TileDigDesignation {
      get { return tileDigDesignation_; }
    }

    /// <summary>Field number for the "spatterPile" field.</summary>
    public const int SpatterPileFieldNumber = 25;
    private static readonly pb::FieldCodec<global::RemoteFortressReader.SpatterPile> _repeated_spatterPile_codec
        = pb::FieldCodec.ForMessage(202, global::RemoteFortressReader.SpatterPile.Parser);
    private readonly pbc::RepeatedField<global::RemoteFortressReader.SpatterPile> spatterPile_ = new pbc::RepeatedField<global::RemoteFortressReader.SpatterPile>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RemoteFortressReader.SpatterPile> SpatterPile {
      get { return spatterPile_; }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 26;
    private static readonly pb::FieldCodec<global::RemoteFortressReader.Item> _repeated_items_codec
        = pb::FieldCodec.ForMessage(210, global::RemoteFortressReader.Item.Parser);
    private readonly pbc::RepeatedField<global::RemoteFortressReader.Item> items_ = new pbc::RepeatedField<global::RemoteFortressReader.Item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RemoteFortressReader.Item> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapBlock);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapBlock other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MapX != other.MapX) return false;
      if (MapY != other.MapY) return false;
      if (MapZ != other.MapZ) return false;
      if(!tiles_.Equals(other.tiles_)) return false;
      if(!materials_.Equals(other.materials_)) return false;
      if(!layerMaterials_.Equals(other.layerMaterials_)) return false;
      if(!veinMaterials_.Equals(other.veinMaterials_)) return false;
      if(!baseMaterials_.Equals(other.baseMaterials_)) return false;
      if(!magma_.Equals(other.magma_)) return false;
      if(!water_.Equals(other.water_)) return false;
      if(!hidden_.Equals(other.hidden_)) return false;
      if(!light_.Equals(other.light_)) return false;
      if(!subterranean_.Equals(other.subterranean_)) return false;
      if(!outside_.Equals(other.outside_)) return false;
      if(!aquifer_.Equals(other.aquifer_)) return false;
      if(!waterStagnant_.Equals(other.waterStagnant_)) return false;
      if(!waterSalt_.Equals(other.waterSalt_)) return false;
      if(!constructionItems_.Equals(other.constructionItems_)) return false;
      if(!buildings_.Equals(other.buildings_)) return false;
      if(!treePercent_.Equals(other.treePercent_)) return false;
      if(!treeX_.Equals(other.treeX_)) return false;
      if(!treeY_.Equals(other.treeY_)) return false;
      if(!treeZ_.Equals(other.treeZ_)) return false;
      if(!tileDigDesignation_.Equals(other.tileDigDesignation_)) return false;
      if(!spatterPile_.Equals(other.spatterPile_)) return false;
      if(!items_.Equals(other.items_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MapX != 0) hash ^= MapX.GetHashCode();
      if (MapY != 0) hash ^= MapY.GetHashCode();
      if (MapZ != 0) hash ^= MapZ.GetHashCode();
      hash ^= tiles_.GetHashCode();
      hash ^= materials_.GetHashCode();
      hash ^= layerMaterials_.GetHashCode();
      hash ^= veinMaterials_.GetHashCode();
      hash ^= baseMaterials_.GetHashCode();
      hash ^= magma_.GetHashCode();
      hash ^= water_.GetHashCode();
      hash ^= hidden_.GetHashCode();
      hash ^= light_.GetHashCode();
      hash ^= subterranean_.GetHashCode();
      hash ^= outside_.GetHashCode();
      hash ^= aquifer_.GetHashCode();
      hash ^= waterStagnant_.GetHashCode();
      hash ^= waterSalt_.GetHashCode();
      hash ^= constructionItems_.GetHashCode();
      hash ^= buildings_.GetHashCode();
      hash ^= treePercent_.GetHashCode();
      hash ^= treeX_.GetHashCode();
      hash ^= treeY_.GetHashCode();
      hash ^= treeZ_.GetHashCode();
      hash ^= tileDigDesignation_.GetHashCode();
      hash ^= spatterPile_.GetHashCode();
      hash ^= items_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapX != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MapX);
      }
      if (MapY != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MapY);
      }
      if (MapZ != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MapZ);
      }
      tiles_.WriteTo(output, _repeated_tiles_codec);
      materials_.WriteTo(output, _repeated_materials_codec);
      layerMaterials_.WriteTo(output, _repeated_layerMaterials_codec);
      veinMaterials_.WriteTo(output, _repeated_veinMaterials_codec);
      baseMaterials_.WriteTo(output, _repeated_baseMaterials_codec);
      magma_.WriteTo(output, _repeated_magma_codec);
      water_.WriteTo(output, _repeated_water_codec);
      hidden_.WriteTo(output, _repeated_hidden_codec);
      light_.WriteTo(output, _repeated_light_codec);
      subterranean_.WriteTo(output, _repeated_subterranean_codec);
      outside_.WriteTo(output, _repeated_outside_codec);
      aquifer_.WriteTo(output, _repeated_aquifer_codec);
      waterStagnant_.WriteTo(output, _repeated_waterStagnant_codec);
      waterSalt_.WriteTo(output, _repeated_waterSalt_codec);
      constructionItems_.WriteTo(output, _repeated_constructionItems_codec);
      buildings_.WriteTo(output, _repeated_buildings_codec);
      treePercent_.WriteTo(output, _repeated_treePercent_codec);
      treeX_.WriteTo(output, _repeated_treeX_codec);
      treeY_.WriteTo(output, _repeated_treeY_codec);
      treeZ_.WriteTo(output, _repeated_treeZ_codec);
      tileDigDesignation_.WriteTo(output, _repeated_tileDigDesignation_codec);
      spatterPile_.WriteTo(output, _repeated_spatterPile_codec);
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapX);
      }
      if (MapY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapY);
      }
      if (MapZ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapZ);
      }
      size += tiles_.CalculateSize(_repeated_tiles_codec);
      size += materials_.CalculateSize(_repeated_materials_codec);
      size += layerMaterials_.CalculateSize(_repeated_layerMaterials_codec);
      size += veinMaterials_.CalculateSize(_repeated_veinMaterials_codec);
      size += baseMaterials_.CalculateSize(_repeated_baseMaterials_codec);
      size += magma_.CalculateSize(_repeated_magma_codec);
      size += water_.CalculateSize(_repeated_water_codec);
      size += hidden_.CalculateSize(_repeated_hidden_codec);
      size += light_.CalculateSize(_repeated_light_codec);
      size += subterranean_.CalculateSize(_repeated_subterranean_codec);
      size += outside_.CalculateSize(_repeated_outside_codec);
      size += aquifer_.CalculateSize(_repeated_aquifer_codec);
      size += waterStagnant_.CalculateSize(_repeated_waterStagnant_codec);
      size += waterSalt_.CalculateSize(_repeated_waterSalt_codec);
      size += constructionItems_.CalculateSize(_repeated_constructionItems_codec);
      size += buildings_.CalculateSize(_repeated_buildings_codec);
      size += treePercent_.CalculateSize(_repeated_treePercent_codec);
      size += treeX_.CalculateSize(_repeated_treeX_codec);
      size += treeY_.CalculateSize(_repeated_treeY_codec);
      size += treeZ_.CalculateSize(_repeated_treeZ_codec);
      size += tileDigDesignation_.CalculateSize(_repeated_tileDigDesignation_codec);
      size += spatterPile_.CalculateSize(_repeated_spatterPile_codec);
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapBlock other) {
      if (other == null) {
        return;
      }
      if (other.MapX != 0) {
        MapX = other.MapX;
      }
      if (other.MapY != 0) {
        MapY = other.MapY;
      }
      if (other.MapZ != 0) {
        MapZ = other.MapZ;
      }
      tiles_.Add(other.tiles_);
      materials_.Add(other.materials_);
      layerMaterials_.Add(other.layerMaterials_);
      veinMaterials_.Add(other.veinMaterials_);
      baseMaterials_.Add(other.baseMaterials_);
      magma_.Add(other.magma_);
      water_.Add(other.water_);
      hidden_.Add(other.hidden_);
      light_.Add(other.light_);
      subterranean_.Add(other.subterranean_);
      outside_.Add(other.outside_);
      aquifer_.Add(other.aquifer_);
      waterStagnant_.Add(other.waterStagnant_);
      waterSalt_.Add(other.waterSalt_);
      constructionItems_.Add(other.constructionItems_);
      buildings_.Add(other.buildings_);
      treePercent_.Add(other.treePercent_);
      treeX_.Add(other.treeX_);
      treeY_.Add(other.treeY_);
      treeZ_.Add(other.treeZ_);
      tileDigDesignation_.Add(other.tileDigDesignation_);
      spatterPile_.Add(other.spatterPile_);
      items_.Add(other.items_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MapX = input.ReadInt32();
            break;
          }
          case 16: {
            MapY = input.ReadInt32();
            break;
          }
          case 24: {
            MapZ = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            tiles_.AddEntriesFrom(input, _repeated_tiles_codec);
            break;
          }
          case 42: {
            materials_.AddEntriesFrom(input, _repeated_materials_codec);
            break;
          }
          case 50: {
            layerMaterials_.AddEntriesFrom(input, _repeated_layerMaterials_codec);
            break;
          }
          case 58: {
            veinMaterials_.AddEntriesFrom(input, _repeated_veinMaterials_codec);
            break;
          }
          case 66: {
            baseMaterials_.AddEntriesFrom(input, _repeated_baseMaterials_codec);
            break;
          }
          case 74:
          case 72: {
            magma_.AddEntriesFrom(input, _repeated_magma_codec);
            break;
          }
          case 82:
          case 80: {
            water_.AddEntriesFrom(input, _repeated_water_codec);
            break;
          }
          case 90:
          case 88: {
            hidden_.AddEntriesFrom(input, _repeated_hidden_codec);
            break;
          }
          case 98:
          case 96: {
            light_.AddEntriesFrom(input, _repeated_light_codec);
            break;
          }
          case 106:
          case 104: {
            subterranean_.AddEntriesFrom(input, _repeated_subterranean_codec);
            break;
          }
          case 114:
          case 112: {
            outside_.AddEntriesFrom(input, _repeated_outside_codec);
            break;
          }
          case 122:
          case 120: {
            aquifer_.AddEntriesFrom(input, _repeated_aquifer_codec);
            break;
          }
          case 130:
          case 128: {
            waterStagnant_.AddEntriesFrom(input, _repeated_waterStagnant_codec);
            break;
          }
          case 138:
          case 136: {
            waterSalt_.AddEntriesFrom(input, _repeated_waterSalt_codec);
            break;
          }
          case 146: {
            constructionItems_.AddEntriesFrom(input, _repeated_constructionItems_codec);
            break;
          }
          case 154: {
            buildings_.AddEntriesFrom(input, _repeated_buildings_codec);
            break;
          }
          case 162:
          case 160: {
            treePercent_.AddEntriesFrom(input, _repeated_treePercent_codec);
            break;
          }
          case 170:
          case 168: {
            treeX_.AddEntriesFrom(input, _repeated_treeX_codec);
            break;
          }
          case 178:
          case 176: {
            treeY_.AddEntriesFrom(input, _repeated_treeY_codec);
            break;
          }
          case 186:
          case 184: {
            treeZ_.AddEntriesFrom(input, _repeated_treeZ_codec);
            break;
          }
          case 194:
          case 192: {
            tileDigDesignation_.AddEntriesFrom(input, _repeated_tileDigDesignation_codec);
            break;
          }
          case 202: {
            spatterPile_.AddEntriesFrom(input, _repeated_spatterPile_codec);
            break;
          }
          case 210: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MatPair : pb::IMessage<MatPair> {
    private static readonly pb::MessageParser<MatPair> _parser = new pb::MessageParser<MatPair>(() => new MatPair());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatPair> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatPair() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatPair(MatPair other) : this() {
      matType_ = other.matType_;
      matIndex_ = other.matIndex_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatPair Clone() {
      return new MatPair(this);
    }

    /// <summary>Field number for the "mat_type" field.</summary>
    public const int MatTypeFieldNumber = 1;
    private int matType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MatType {
      get { return matType_; }
      set {
        matType_ = value;
      }
    }

    /// <summary>Field number for the "mat_index" field.</summary>
    public const int MatIndexFieldNumber = 2;
    private int matIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MatIndex {
      get { return matIndex_; }
      set {
        matIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatPair);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatPair other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatType != other.MatType) return false;
      if (MatIndex != other.MatIndex) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatType != 0) hash ^= MatType.GetHashCode();
      if (MatIndex != 0) hash ^= MatIndex.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MatType);
      }
      if (MatIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MatIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MatType);
      }
      if (MatIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MatIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatPair other) {
      if (other == null) {
        return;
      }
      if (other.MatType != 0) {
        MatType = other.MatType;
      }
      if (other.MatIndex != 0) {
        MatIndex = other.MatIndex;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MatType = input.ReadInt32();
            break;
          }
          case 16: {
            MatIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ColorDefinition : pb::IMessage<ColorDefinition> {
    private static readonly pb::MessageParser<ColorDefinition> _parser = new pb::MessageParser<ColorDefinition>(() => new ColorDefinition());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ColorDefinition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColorDefinition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColorDefinition(ColorDefinition other) : this() {
      red_ = other.red_;
      green_ = other.green_;
      blue_ = other.blue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColorDefinition Clone() {
      return new ColorDefinition(this);
    }

    /// <summary>Field number for the "red" field.</summary>
    public const int RedFieldNumber = 1;
    private int red_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Red {
      get { return red_; }
      set {
        red_ = value;
      }
    }

    /// <summary>Field number for the "green" field.</summary>
    public const int GreenFieldNumber = 2;
    private int green_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Green {
      get { return green_; }
      set {
        green_ = value;
      }
    }

    /// <summary>Field number for the "blue" field.</summary>
    public const int BlueFieldNumber = 3;
    private int blue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Blue {
      get { return blue_; }
      set {
        blue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ColorDefinition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ColorDefinition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Red != other.Red) return false;
      if (Green != other.Green) return false;
      if (Blue != other.Blue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Red != 0) hash ^= Red.GetHashCode();
      if (Green != 0) hash ^= Green.GetHashCode();
      if (Blue != 0) hash ^= Blue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Red != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Red);
      }
      if (Green != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Green);
      }
      if (Blue != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Blue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Red != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Red);
      }
      if (Green != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Green);
      }
      if (Blue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Blue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ColorDefinition other) {
      if (other == null) {
        return;
      }
      if (other.Red != 0) {
        Red = other.Red;
      }
      if (other.Green != 0) {
        Green = other.Green;
      }
      if (other.Blue != 0) {
        Blue = other.Blue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Red = input.ReadInt32();
            break;
          }
          case 16: {
            Green = input.ReadInt32();
            break;
          }
          case 24: {
            Blue = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MaterialDefinition : pb::IMessage<MaterialDefinition> {
    private static readonly pb::MessageParser<MaterialDefinition> _parser = new pb::MessageParser<MaterialDefinition>(() => new MaterialDefinition());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MaterialDefinition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MaterialDefinition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MaterialDefinition(MaterialDefinition other) : this() {
      MatPair = other.matPair_ != null ? other.MatPair.Clone() : null;
      id_ = other.id_;
      name_ = other.name_;
      StateColor = other.stateColor_ != null ? other.StateColor.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MaterialDefinition Clone() {
      return new MaterialDefinition(this);
    }

    /// <summary>Field number for the "mat_pair" field.</summary>
    public const int MatPairFieldNumber = 1;
    private global::RemoteFortressReader.MatPair matPair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RemoteFortressReader.MatPair MatPair {
      get { return matPair_; }
      set {
        matPair_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state_color" field.</summary>
    public const int StateColorFieldNumber = 4;
    private global::RemoteFortressReader.ColorDefinition stateColor_;
    /// <summary>
    ///Simplifying colors to assume room temperature.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RemoteFortressReader.ColorDefinition StateColor {
      get { return stateColor_; }
      set {
        stateColor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MaterialDefinition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MaterialDefinition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MatPair, other.MatPair)) return false;
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(StateColor, other.StateColor)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (matPair_ != null) hash ^= MatPair.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (stateColor_ != null) hash ^= StateColor.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (matPair_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MatPair);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (stateColor_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(StateColor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (matPair_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MatPair);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (stateColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StateColor);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MaterialDefinition other) {
      if (other == null) {
        return;
      }
      if (other.matPair_ != null) {
        if (matPair_ == null) {
          matPair_ = new global::RemoteFortressReader.MatPair();
        }
        MatPair.MergeFrom(other.MatPair);
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.stateColor_ != null) {
        if (stateColor_ == null) {
          stateColor_ = new global::RemoteFortressReader.ColorDefinition();
        }
        StateColor.MergeFrom(other.StateColor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (matPair_ == null) {
              matPair_ = new global::RemoteFortressReader.MatPair();
            }
            input.ReadMessage(matPair_);
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            if (stateColor_ == null) {
              stateColor_ = new global::RemoteFortressReader.ColorDefinition();
            }
            input.ReadMessage(stateColor_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BuildingType : pb::IMessage<BuildingType> {
    private static readonly pb::MessageParser<BuildingType> _parser = new pb::MessageParser<BuildingType>(() => new BuildingType());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuildingType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildingType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildingType(BuildingType other) : this() {
      buildingType_ = other.buildingType_;
      buildingSubtype_ = other.buildingSubtype_;
      buildingCustom_ = other.buildingCustom_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildingType Clone() {
      return new BuildingType(this);
    }

    /// <summary>Field number for the "building_type" field.</summary>
    public const int BuildingType_FieldNumber = 1;
    private int buildingType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuildingType_ {
      get { return buildingType_; }
      set {
        buildingType_ = value;
      }
    }

    /// <summary>Field number for the "building_subtype" field.</summary>
    public const int BuildingSubtypeFieldNumber = 2;
    private int buildingSubtype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuildingSubtype {
      get { return buildingSubtype_; }
      set {
        buildingSubtype_ = value;
      }
    }

    /// <summary>Field number for the "building_custom" field.</summary>
    public const int BuildingCustomFieldNumber = 3;
    private int buildingCustom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuildingCustom {
      get { return buildingCustom_; }
      set {
        buildingCustom_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuildingType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuildingType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BuildingType_ != other.BuildingType_) return false;
      if (BuildingSubtype != other.BuildingSubtype) return false;
      if (BuildingCustom != other.BuildingCustom) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BuildingType_ != 0) hash ^= BuildingType_.GetHashCode();
      if (BuildingSubtype != 0) hash ^= BuildingSubtype.GetHashCode();
      if (BuildingCustom != 0) hash ^= BuildingCustom.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BuildingType_ != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BuildingType_);
      }
      if (BuildingSubtype != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BuildingSubtype);
      }
      if (BuildingCustom != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BuildingCustom);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BuildingType_ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuildingType_);
      }
      if (BuildingSubtype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuildingSubtype);
      }
      if (BuildingCustom != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuildingCustom);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuildingType other) {
      if (other == null) {
        return;
      }
      if (other.BuildingType_ != 0) {
        BuildingType_ = other.BuildingType_;
      }
      if (other.BuildingSubtype != 0) {
        BuildingSubtype = other.BuildingSubtype;
      }
      if (other.BuildingCustom != 0) {
        BuildingCustom = other.BuildingCustom;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BuildingType_ = input.ReadInt32();
            break;
          }
          case 16: {
            BuildingSubtype = input.ReadInt32();
            break;
          }
          case 24: {
            BuildingCustom = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BuildingDefinition : pb::IMessage<BuildingDefinition> {
    private static readonly pb::MessageParser<BuildingDefinition> _parser = new pb::MessageParser<BuildingDefinition>(() => new BuildingDefinition());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuildingDefinition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildingDefinition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildingDefinition(BuildingDefinition other) : this() {
      BuildingType = other.buildingType_ != null ? other.BuildingType.Clone() : null;
      id_ = other.id_;
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildingDefinition Clone() {
      return new BuildingDefinition(this);
    }

    /// <summary>Field number for the "building_type" field.</summary>
    public const int BuildingTypeFieldNumber = 1;
    private global::RemoteFortressReader.BuildingType buildingType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RemoteFortressReader.BuildingType BuildingType {
      get { return buildingType_; }
      set {
        buildingType_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuildingDefinition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuildingDefinition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BuildingType, other.BuildingType)) return false;
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (buildingType_ != null) hash ^= BuildingType.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (buildingType_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BuildingType);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (buildingType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BuildingType);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuildingDefinition other) {
      if (other == null) {
        return;
      }
      if (other.buildingType_ != null) {
        if (buildingType_ == null) {
          buildingType_ = new global::RemoteFortressReader.BuildingType();
        }
        BuildingType.MergeFrom(other.BuildingType);
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (buildingType_ == null) {
              buildingType_ = new global::RemoteFortressReader.BuildingType();
            }
            input.ReadMessage(buildingType_);
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BuildingList : pb::IMessage<BuildingList> {
    private static readonly pb::MessageParser<BuildingList> _parser = new pb::MessageParser<BuildingList>(() => new BuildingList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuildingList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildingList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildingList(BuildingList other) : this() {
      buildingList_ = other.buildingList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildingList Clone() {
      return new BuildingList(this);
    }

    /// <summary>Field number for the "building_list" field.</summary>
    public const int BuildingList_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::RemoteFortressReader.BuildingDefinition> _repeated_buildingList_codec
        = pb::FieldCodec.ForMessage(10, global::RemoteFortressReader.BuildingDefinition.Parser);
    private readonly pbc::RepeatedField<global::RemoteFortressReader.BuildingDefinition> buildingList_ = new pbc::RepeatedField<global::RemoteFortressReader.BuildingDefinition>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RemoteFortressReader.BuildingDefinition> BuildingList_ {
      get { return buildingList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuildingList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuildingList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!buildingList_.Equals(other.buildingList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= buildingList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      buildingList_.WriteTo(output, _repeated_buildingList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += buildingList_.CalculateSize(_repeated_buildingList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuildingList other) {
      if (other == null) {
        return;
      }
      buildingList_.Add(other.buildingList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            buildingList_.AddEntriesFrom(input, _repeated_buildingList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MaterialList : pb::IMessage<MaterialList> {
    private static readonly pb::MessageParser<MaterialList> _parser = new pb::MessageParser<MaterialList>(() => new MaterialList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MaterialList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MaterialList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MaterialList(MaterialList other) : this() {
      materialList_ = other.materialList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MaterialList Clone() {
      return new MaterialList(this);
    }

    /// <summary>Field number for the "material_list" field.</summary>
    public const int MaterialList_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::RemoteFortressReader.MaterialDefinition> _repeated_materialList_codec
        = pb::FieldCodec.ForMessage(10, global::RemoteFortressReader.MaterialDefinition.Parser);
    private readonly pbc::RepeatedField<global::RemoteFortressReader.MaterialDefinition> materialList_ = new pbc::RepeatedField<global::RemoteFortressReader.MaterialDefinition>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RemoteFortressReader.MaterialDefinition> MaterialList_ {
      get { return materialList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MaterialList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MaterialList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!materialList_.Equals(other.materialList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= materialList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      materialList_.WriteTo(output, _repeated_materialList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += materialList_.CalculateSize(_repeated_materialList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MaterialList other) {
      if (other == null) {
        return;
      }
      materialList_.Add(other.materialList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            materialList_.AddEntriesFrom(input, _repeated_materialList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BodySizeInfo : pb::IMessage<BodySizeInfo> {
    private static readonly pb::MessageParser<BodySizeInfo> _parser = new pb::MessageParser<BodySizeInfo>(() => new BodySizeInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BodySizeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BodySizeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BodySizeInfo(BodySizeInfo other) : this() {
      sizeCur_ = other.sizeCur_;
      sizeBase_ = other.sizeBase_;
      areaCur_ = other.areaCur_;
      areaBase_ = other.areaBase_;
      lengthCur_ = other.lengthCur_;
      lengthBase_ = other.lengthBase_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BodySizeInfo Clone() {
      return new BodySizeInfo(this);
    }

    /// <summary>Field number for the "size_cur" field.</summary>
    public const int SizeCurFieldNumber = 1;
    private int sizeCur_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SizeCur {
      get { return sizeCur_; }
      set {
        sizeCur_ = value;
      }
    }

    /// <summary>Field number for the "size_base" field.</summary>
    public const int SizeBaseFieldNumber = 2;
    private int sizeBase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SizeBase {
      get { return sizeBase_; }
      set {
        sizeBase_ = value;
      }
    }

    /// <summary>Field number for the "area_cur" field.</summary>
    public const int AreaCurFieldNumber = 3;
    private int areaCur_;
    /// <summary>
    ///!&lt; size_cur^0.666 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AreaCur {
      get { return areaCur_; }
      set {
        areaCur_ = value;
      }
    }

    /// <summary>Field number for the "area_base" field.</summary>
    public const int AreaBaseFieldNumber = 4;
    private int areaBase_;
    /// <summary>
    ///!&lt; size_base^0.666 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AreaBase {
      get { return areaBase_; }
      set {
        areaBase_ = value;
      }
    }

    /// <summary>Field number for the "length_cur" field.</summary>
    public const int LengthCurFieldNumber = 5;
    private int lengthCur_;
    /// <summary>
    ///!&lt; (size_cur*10000)^0.333 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LengthCur {
      get { return lengthCur_; }
      set {
        lengthCur_ = value;
      }
    }

    /// <summary>Field number for the "length_base" field.</summary>
    public const int LengthBaseFieldNumber = 6;
    private int lengthBase_;
    /// <summary>
    ///!&lt; (size_base*10000)^0.333 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LengthBase {
      get { return lengthBase_; }
      set {
        lengthBase_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BodySizeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BodySizeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SizeCur != other.SizeCur) return false;
      if (SizeBase != other.SizeBase) return false;
      if (AreaCur != other.AreaCur) return false;
      if (AreaBase != other.AreaBase) return false;
      if (LengthCur != other.LengthCur) return false;
      if (LengthBase != other.LengthBase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SizeCur != 0) hash ^= SizeCur.GetHashCode();
      if (SizeBase != 0) hash ^= SizeBase.GetHashCode();
      if (AreaCur != 0) hash ^= AreaCur.GetHashCode();
      if (AreaBase != 0) hash ^= AreaBase.GetHashCode();
      if (LengthCur != 0) hash ^= LengthCur.GetHashCode();
      if (LengthBase != 0) hash ^= LengthBase.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SizeCur != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SizeCur);
      }
      if (SizeBase != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SizeBase);
      }
      if (AreaCur != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AreaCur);
      }
      if (AreaBase != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AreaBase);
      }
      if (LengthCur != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(LengthCur);
      }
      if (LengthBase != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(LengthBase);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SizeCur != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SizeCur);
      }
      if (SizeBase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SizeBase);
      }
      if (AreaCur != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AreaCur);
      }
      if (AreaBase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AreaBase);
      }
      if (LengthCur != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LengthCur);
      }
      if (LengthBase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LengthBase);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BodySizeInfo other) {
      if (other == null) {
        return;
      }
      if (other.SizeCur != 0) {
        SizeCur = other.SizeCur;
      }
      if (other.SizeBase != 0) {
        SizeBase = other.SizeBase;
      }
      if (other.AreaCur != 0) {
        AreaCur = other.AreaCur;
      }
      if (other.AreaBase != 0) {
        AreaBase = other.AreaBase;
      }
      if (other.LengthCur != 0) {
        LengthCur = other.LengthCur;
      }
      if (other.LengthBase != 0) {
        LengthBase = other.LengthBase;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SizeCur = input.ReadInt32();
            break;
          }
          case 16: {
            SizeBase = input.ReadInt32();
            break;
          }
          case 24: {
            AreaCur = input.ReadInt32();
            break;
          }
          case 32: {
            AreaBase = input.ReadInt32();
            break;
          }
          case 40: {
            LengthCur = input.ReadInt32();
            break;
          }
          case 48: {
            LengthBase = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnitAppearance : pb::IMessage<UnitAppearance> {
    private static readonly pb::MessageParser<UnitAppearance> _parser = new pb::MessageParser<UnitAppearance>(() => new UnitAppearance());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnitAppearance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitAppearance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitAppearance(UnitAppearance other) : this() {
      bodyModifiers_ = other.bodyModifiers_.Clone();
      bpModifiers_ = other.bpModifiers_.Clone();
      sizeModifier_ = other.sizeModifier_;
      colors_ = other.colors_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitAppearance Clone() {
      return new UnitAppearance(this);
    }

    /// <summary>Field number for the "body_modifiers" field.</summary>
    public const int BodyModifiersFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_bodyModifiers_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> bodyModifiers_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> BodyModifiers {
      get { return bodyModifiers_; }
    }

    /// <summary>Field number for the "bp_modifiers" field.</summary>
    public const int BpModifiersFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_bpModifiers_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> bpModifiers_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> BpModifiers {
      get { return bpModifiers_; }
    }

    /// <summary>Field number for the "size_modifier" field.</summary>
    public const int SizeModifierFieldNumber = 3;
    private int sizeModifier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SizeModifier {
      get { return sizeModifier_; }
      set {
        sizeModifier_ = value;
      }
    }

    /// <summary>Field number for the "colors" field.</summary>
    public const int ColorsFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_colors_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> colors_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Colors {
      get { return colors_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnitAppearance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnitAppearance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!bodyModifiers_.Equals(other.bodyModifiers_)) return false;
      if(!bpModifiers_.Equals(other.bpModifiers_)) return false;
      if (SizeModifier != other.SizeModifier) return false;
      if(!colors_.Equals(other.colors_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= bodyModifiers_.GetHashCode();
      hash ^= bpModifiers_.GetHashCode();
      if (SizeModifier != 0) hash ^= SizeModifier.GetHashCode();
      hash ^= colors_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      bodyModifiers_.WriteTo(output, _repeated_bodyModifiers_codec);
      bpModifiers_.WriteTo(output, _repeated_bpModifiers_codec);
      if (SizeModifier != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SizeModifier);
      }
      colors_.WriteTo(output, _repeated_colors_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += bodyModifiers_.CalculateSize(_repeated_bodyModifiers_codec);
      size += bpModifiers_.CalculateSize(_repeated_bpModifiers_codec);
      if (SizeModifier != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SizeModifier);
      }
      size += colors_.CalculateSize(_repeated_colors_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnitAppearance other) {
      if (other == null) {
        return;
      }
      bodyModifiers_.Add(other.bodyModifiers_);
      bpModifiers_.Add(other.bpModifiers_);
      if (other.SizeModifier != 0) {
        SizeModifier = other.SizeModifier;
      }
      colors_.Add(other.colors_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            bodyModifiers_.AddEntriesFrom(input, _repeated_bodyModifiers_codec);
            break;
          }
          case 18:
          case 16: {
            bpModifiers_.AddEntriesFrom(input, _repeated_bpModifiers_codec);
            break;
          }
          case 24: {
            SizeModifier = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            colors_.AddEntriesFrom(input, _repeated_colors_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnitDefinition : pb::IMessage<UnitDefinition> {
    private static readonly pb::MessageParser<UnitDefinition> _parser = new pb::MessageParser<UnitDefinition>(() => new UnitDefinition());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnitDefinition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitDefinition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitDefinition(UnitDefinition other) : this() {
      id_ = other.id_;
      isValid_ = other.isValid_;
      posX_ = other.posX_;
      posY_ = other.posY_;
      posZ_ = other.posZ_;
      Race = other.race_ != null ? other.Race.Clone() : null;
      ProfessionColor = other.professionColor_ != null ? other.ProfessionColor.Clone() : null;
      flags1_ = other.flags1_;
      flags2_ = other.flags2_;
      flags3_ = other.flags3_;
      isSoldier_ = other.isSoldier_;
      SizeInfo = other.sizeInfo_ != null ? other.SizeInfo.Clone() : null;
      name_ = other.name_;
      bloodMax_ = other.bloodMax_;
      bloodCount_ = other.bloodCount_;
      Appearance = other.appearance_ != null ? other.Appearance.Clone() : null;
      professionId_ = other.professionId_;
      noblePositions_ = other.noblePositions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitDefinition Clone() {
      return new UnitDefinition(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "isValid" field.</summary>
    public const int IsValidFieldNumber = 2;
    private bool isValid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsValid {
      get { return isValid_; }
      set {
        isValid_ = value;
      }
    }

    /// <summary>Field number for the "pos_x" field.</summary>
    public const int PosXFieldNumber = 3;
    private int posX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "pos_y" field.</summary>
    public const int PosYFieldNumber = 4;
    private int posY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "pos_z" field.</summary>
    public const int PosZFieldNumber = 5;
    private int posZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosZ {
      get { return posZ_; }
      set {
        posZ_ = value;
      }
    }

    /// <summary>Field number for the "race" field.</summary>
    public const int RaceFieldNumber = 6;
    private global::RemoteFortressReader.MatPair race_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RemoteFortressReader.MatPair Race {
      get { return race_; }
      set {
        race_ = value;
      }
    }

    /// <summary>Field number for the "profession_color" field.</summary>
    public const int ProfessionColorFieldNumber = 7;
    private global::RemoteFortressReader.ColorDefinition professionColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RemoteFortressReader.ColorDefinition ProfessionColor {
      get { return professionColor_; }
      set {
        professionColor_ = value;
      }
    }

    /// <summary>Field number for the "flags1" field.</summary>
    public const int Flags1FieldNumber = 8;
    private uint flags1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flags1 {
      get { return flags1_; }
      set {
        flags1_ = value;
      }
    }

    /// <summary>Field number for the "flags2" field.</summary>
    public const int Flags2FieldNumber = 9;
    private uint flags2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flags2 {
      get { return flags2_; }
      set {
        flags2_ = value;
      }
    }

    /// <summary>Field number for the "flags3" field.</summary>
    public const int Flags3FieldNumber = 10;
    private uint flags3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flags3 {
      get { return flags3_; }
      set {
        flags3_ = value;
      }
    }

    /// <summary>Field number for the "is_soldier" field.</summary>
    public const int IsSoldierFieldNumber = 11;
    private bool isSoldier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSoldier {
      get { return isSoldier_; }
      set {
        isSoldier_ = value;
      }
    }

    /// <summary>Field number for the "size_info" field.</summary>
    public const int SizeInfoFieldNumber = 12;
    private global::RemoteFortressReader.BodySizeInfo sizeInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RemoteFortressReader.BodySizeInfo SizeInfo {
      get { return sizeInfo_; }
      set {
        sizeInfo_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 13;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "blood_max" field.</summary>
    public const int BloodMaxFieldNumber = 14;
    private int bloodMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BloodMax {
      get { return bloodMax_; }
      set {
        bloodMax_ = value;
      }
    }

    /// <summary>Field number for the "blood_count" field.</summary>
    public const int BloodCountFieldNumber = 15;
    private int bloodCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BloodCount {
      get { return bloodCount_; }
      set {
        bloodCount_ = value;
      }
    }

    /// <summary>Field number for the "appearance" field.</summary>
    public const int AppearanceFieldNumber = 16;
    private global::RemoteFortressReader.UnitAppearance appearance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RemoteFortressReader.UnitAppearance Appearance {
      get { return appearance_; }
      set {
        appearance_ = value;
      }
    }

    /// <summary>Field number for the "profession_id" field.</summary>
    public const int ProfessionIdFieldNumber = 17;
    private int professionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProfessionId {
      get { return professionId_; }
      set {
        professionId_ = value;
      }
    }

    /// <summary>Field number for the "noble_positions" field.</summary>
    public const int NoblePositionsFieldNumber = 18;
    private static readonly pb::FieldCodec<string> _repeated_noblePositions_codec
        = pb::FieldCodec.ForString(146);
    private readonly pbc::RepeatedField<string> noblePositions_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> NoblePositions {
      get { return noblePositions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnitDefinition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnitDefinition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (IsValid != other.IsValid) return false;
      if (PosX != other.PosX) return false;
      if (PosY != other.PosY) return false;
      if (PosZ != other.PosZ) return false;
      if (!object.Equals(Race, other.Race)) return false;
      if (!object.Equals(ProfessionColor, other.ProfessionColor)) return false;
      if (Flags1 != other.Flags1) return false;
      if (Flags2 != other.Flags2) return false;
      if (Flags3 != other.Flags3) return false;
      if (IsSoldier != other.IsSoldier) return false;
      if (!object.Equals(SizeInfo, other.SizeInfo)) return false;
      if (Name != other.Name) return false;
      if (BloodMax != other.BloodMax) return false;
      if (BloodCount != other.BloodCount) return false;
      if (!object.Equals(Appearance, other.Appearance)) return false;
      if (ProfessionId != other.ProfessionId) return false;
      if(!noblePositions_.Equals(other.noblePositions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (IsValid != false) hash ^= IsValid.GetHashCode();
      if (PosX != 0) hash ^= PosX.GetHashCode();
      if (PosY != 0) hash ^= PosY.GetHashCode();
      if (PosZ != 0) hash ^= PosZ.GetHashCode();
      if (race_ != null) hash ^= Race.GetHashCode();
      if (professionColor_ != null) hash ^= ProfessionColor.GetHashCode();
      if (Flags1 != 0) hash ^= Flags1.GetHashCode();
      if (Flags2 != 0) hash ^= Flags2.GetHashCode();
      if (Flags3 != 0) hash ^= Flags3.GetHashCode();
      if (IsSoldier != false) hash ^= IsSoldier.GetHashCode();
      if (sizeInfo_ != null) hash ^= SizeInfo.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (BloodMax != 0) hash ^= BloodMax.GetHashCode();
      if (BloodCount != 0) hash ^= BloodCount.GetHashCode();
      if (appearance_ != null) hash ^= Appearance.GetHashCode();
      if (ProfessionId != 0) hash ^= ProfessionId.GetHashCode();
      hash ^= noblePositions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (IsValid != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsValid);
      }
      if (PosX != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PosX);
      }
      if (PosY != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PosY);
      }
      if (PosZ != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PosZ);
      }
      if (race_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Race);
      }
      if (professionColor_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ProfessionColor);
      }
      if (Flags1 != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Flags1);
      }
      if (Flags2 != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Flags2);
      }
      if (Flags3 != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Flags3);
      }
      if (IsSoldier != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsSoldier);
      }
      if (sizeInfo_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(SizeInfo);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Name);
      }
      if (BloodMax != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(BloodMax);
      }
      if (BloodCount != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(BloodCount);
      }
      if (appearance_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Appearance);
      }
      if (ProfessionId != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(ProfessionId);
      }
      noblePositions_.WriteTo(output, _repeated_noblePositions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (IsValid != false) {
        size += 1 + 1;
      }
      if (PosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosX);
      }
      if (PosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosY);
      }
      if (PosZ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosZ);
      }
      if (race_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Race);
      }
      if (professionColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProfessionColor);
      }
      if (Flags1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flags1);
      }
      if (Flags2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flags2);
      }
      if (Flags3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flags3);
      }
      if (IsSoldier != false) {
        size += 1 + 1;
      }
      if (sizeInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SizeInfo);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (BloodMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BloodMax);
      }
      if (BloodCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BloodCount);
      }
      if (appearance_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Appearance);
      }
      if (ProfessionId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ProfessionId);
      }
      size += noblePositions_.CalculateSize(_repeated_noblePositions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnitDefinition other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.IsValid != false) {
        IsValid = other.IsValid;
      }
      if (other.PosX != 0) {
        PosX = other.PosX;
      }
      if (other.PosY != 0) {
        PosY = other.PosY;
      }
      if (other.PosZ != 0) {
        PosZ = other.PosZ;
      }
      if (other.race_ != null) {
        if (race_ == null) {
          race_ = new global::RemoteFortressReader.MatPair();
        }
        Race.MergeFrom(other.Race);
      }
      if (other.professionColor_ != null) {
        if (professionColor_ == null) {
          professionColor_ = new global::RemoteFortressReader.ColorDefinition();
        }
        ProfessionColor.MergeFrom(other.ProfessionColor);
      }
      if (other.Flags1 != 0) {
        Flags1 = other.Flags1;
      }
      if (other.Flags2 != 0) {
        Flags2 = other.Flags2;
      }
      if (other.Flags3 != 0) {
        Flags3 = other.Flags3;
      }
      if (other.IsSoldier != false) {
        IsSoldier = other.IsSoldier;
      }
      if (other.sizeInfo_ != null) {
        if (sizeInfo_ == null) {
          sizeInfo_ = new global::RemoteFortressReader.BodySizeInfo();
        }
        SizeInfo.MergeFrom(other.SizeInfo);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.BloodMax != 0) {
        BloodMax = other.BloodMax;
      }
      if (other.BloodCount != 0) {
        BloodCount = other.BloodCount;
      }
      if (other.appearance_ != null) {
        if (appearance_ == null) {
          appearance_ = new global::RemoteFortressReader.UnitAppearance();
        }
        Appearance.MergeFrom(other.Appearance);
      }
      if (other.ProfessionId != 0) {
        ProfessionId = other.ProfessionId;
      }
      noblePositions_.Add(other.noblePositions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            IsValid = input.ReadBool();
            break;
          }
          case 24: {
            PosX = input.ReadInt32();
            break;
          }
          case 32: {
            PosY = input.ReadInt32();
            break;
          }
          case 40: {
            PosZ = input.ReadInt32();
            break;
          }
          case 50: {
            if (race_ == null) {
              race_ = new global::RemoteFortressReader.MatPair();
            }
            input.ReadMessage(race_);
            break;
          }
          case 58: {
            if (professionColor_ == null) {
              professionColor_ = new global::RemoteFortressReader.ColorDefinition();
            }
            input.ReadMessage(professionColor_);
            break;
          }
          case 64: {
            Flags1 = input.ReadUInt32();
            break;
          }
          case 72: {
            Flags2 = input.ReadUInt32();
            break;
          }
          case 80: {
            Flags3 = input.ReadUInt32();
            break;
          }
          case 88: {
            IsSoldier = input.ReadBool();
            break;
          }
          case 98: {
            if (sizeInfo_ == null) {
              sizeInfo_ = new global::RemoteFortressReader.BodySizeInfo();
            }
            input.ReadMessage(sizeInfo_);
            break;
          }
          case 106: {
            Name = input.ReadString();
            break;
          }
          case 112: {
            BloodMax = input.ReadInt32();
            break;
          }
          case 120: {
            BloodCount = input.ReadInt32();
            break;
          }
          case 130: {
            if (appearance_ == null) {
              appearance_ = new global::RemoteFortressReader.UnitAppearance();
            }
            input.ReadMessage(appearance_);
            break;
          }
          case 136: {
            ProfessionId = input.ReadInt32();
            break;
          }
          case 146: {
            noblePositions_.AddEntriesFrom(input, _repeated_noblePositions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnitList : pb::IMessage<UnitList> {
    private static readonly pb::MessageParser<UnitList> _parser = new pb::MessageParser<UnitList>(() => new UnitList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnitList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitList(UnitList other) : this() {
      creatureList_ = other.creatureList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitList Clone() {
      return new UnitList(this);
    }

    /// <summary>Field number for the "creature_list" field.</summary>
    public const int CreatureListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::RemoteFortressReader.UnitDefinition> _repeated_creatureList_codec
        = pb::FieldCodec.ForMessage(10, global::RemoteFortressReader.UnitDefinition.Parser);
    private readonly pbc::RepeatedField<global::RemoteFortressReader.UnitDefinition> creatureList_ = new pbc::RepeatedField<global::RemoteFortressReader.UnitDefinition>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RemoteFortressReader.UnitDefinition> CreatureList {
      get { return creatureList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnitList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnitList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!creatureList_.Equals(other.creatureList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= creatureList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      creatureList_.WriteTo(output, _repeated_creatureList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += creatureList_.CalculateSize(_repeated_creatureList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnitList other) {
      if (other == null) {
        return;
      }
      creatureList_.Add(other.creatureList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            creatureList_.AddEntriesFrom(input, _repeated_creatureList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BlockRequest : pb::IMessage<BlockRequest> {
    private static readonly pb::MessageParser<BlockRequest> _parser = new pb::MessageParser<BlockRequest>(() => new BlockRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockRequest(BlockRequest other) : this() {
      blocksNeeded_ = other.blocksNeeded_;
      minX_ = other.minX_;
      maxX_ = other.maxX_;
      minY_ = other.minY_;
      maxY_ = other.maxY_;
      minZ_ = other.minZ_;
      maxZ_ = other.maxZ_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockRequest Clone() {
      return new BlockRequest(this);
    }

    /// <summary>Field number for the "blocks_needed" field.</summary>
    public const int BlocksNeededFieldNumber = 1;
    private int blocksNeeded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlocksNeeded {
      get { return blocksNeeded_; }
      set {
        blocksNeeded_ = value;
      }
    }

    /// <summary>Field number for the "min_x" field.</summary>
    public const int MinXFieldNumber = 2;
    private int minX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinX {
      get { return minX_; }
      set {
        minX_ = value;
      }
    }

    /// <summary>Field number for the "max_x" field.</summary>
    public const int MaxXFieldNumber = 3;
    private int maxX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxX {
      get { return maxX_; }
      set {
        maxX_ = value;
      }
    }

    /// <summary>Field number for the "min_y" field.</summary>
    public const int MinYFieldNumber = 4;
    private int minY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinY {
      get { return minY_; }
      set {
        minY_ = value;
      }
    }

    /// <summary>Field number for the "max_y" field.</summary>
    public const int MaxYFieldNumber = 5;
    private int maxY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxY {
      get { return maxY_; }
      set {
        maxY_ = value;
      }
    }

    /// <summary>Field number for the "min_z" field.</summary>
    public const int MinZFieldNumber = 6;
    private int minZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinZ {
      get { return minZ_; }
      set {
        minZ_ = value;
      }
    }

    /// <summary>Field number for the "max_z" field.</summary>
    public const int MaxZFieldNumber = 7;
    private int maxZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxZ {
      get { return maxZ_; }
      set {
        maxZ_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BlocksNeeded != other.BlocksNeeded) return false;
      if (MinX != other.MinX) return false;
      if (MaxX != other.MaxX) return false;
      if (MinY != other.MinY) return false;
      if (MaxY != other.MaxY) return false;
      if (MinZ != other.MinZ) return false;
      if (MaxZ != other.MaxZ) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BlocksNeeded != 0) hash ^= BlocksNeeded.GetHashCode();
      if (MinX != 0) hash ^= MinX.GetHashCode();
      if (MaxX != 0) hash ^= MaxX.GetHashCode();
      if (MinY != 0) hash ^= MinY.GetHashCode();
      if (MaxY != 0) hash ^= MaxY.GetHashCode();
      if (MinZ != 0) hash ^= MinZ.GetHashCode();
      if (MaxZ != 0) hash ^= MaxZ.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BlocksNeeded != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BlocksNeeded);
      }
      if (MinX != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MinX);
      }
      if (MaxX != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxX);
      }
      if (MinY != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MinY);
      }
      if (MaxY != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MaxY);
      }
      if (MinZ != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MinZ);
      }
      if (MaxZ != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(MaxZ);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BlocksNeeded != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlocksNeeded);
      }
      if (MinX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinX);
      }
      if (MaxX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxX);
      }
      if (MinY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinY);
      }
      if (MaxY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxY);
      }
      if (MinZ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinZ);
      }
      if (MaxZ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxZ);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockRequest other) {
      if (other == null) {
        return;
      }
      if (other.BlocksNeeded != 0) {
        BlocksNeeded = other.BlocksNeeded;
      }
      if (other.MinX != 0) {
        MinX = other.MinX;
      }
      if (other.MaxX != 0) {
        MaxX = other.MaxX;
      }
      if (other.MinY != 0) {
        MinY = other.MinY;
      }
      if (other.MaxY != 0) {
        MaxY = other.MaxY;
      }
      if (other.MinZ != 0) {
        MinZ = other.MinZ;
      }
      if (other.MaxZ != 0) {
        MaxZ = other.MaxZ;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BlocksNeeded = input.ReadInt32();
            break;
          }
          case 16: {
            MinX = input.ReadInt32();
            break;
          }
          case 24: {
            MaxX = input.ReadInt32();
            break;
          }
          case 32: {
            MinY = input.ReadInt32();
            break;
          }
          case 40: {
            MaxY = input.ReadInt32();
            break;
          }
          case 48: {
            MinZ = input.ReadInt32();
            break;
          }
          case 56: {
            MaxZ = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BlockList : pb::IMessage<BlockList> {
    private static readonly pb::MessageParser<BlockList> _parser = new pb::MessageParser<BlockList>(() => new BlockList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockList(BlockList other) : this() {
      mapBlocks_ = other.mapBlocks_.Clone();
      mapX_ = other.mapX_;
      mapY_ = other.mapY_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockList Clone() {
      return new BlockList(this);
    }

    /// <summary>Field number for the "map_blocks" field.</summary>
    public const int MapBlocksFieldNumber = 1;
    private static readonly pb::FieldCodec<global::RemoteFortressReader.MapBlock> _repeated_mapBlocks_codec
        = pb::FieldCodec.ForMessage(10, global::RemoteFortressReader.MapBlock.Parser);
    private readonly pbc::RepeatedField<global::RemoteFortressReader.MapBlock> mapBlocks_ = new pbc::RepeatedField<global::RemoteFortressReader.MapBlock>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RemoteFortressReader.MapBlock> MapBlocks {
      get { return mapBlocks_; }
    }

    /// <summary>Field number for the "map_x" field.</summary>
    public const int MapXFieldNumber = 2;
    private int mapX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapX {
      get { return mapX_; }
      set {
        mapX_ = value;
      }
    }

    /// <summary>Field number for the "map_y" field.</summary>
    public const int MapYFieldNumber = 3;
    private int mapY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapY {
      get { return mapY_; }
      set {
        mapY_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!mapBlocks_.Equals(other.mapBlocks_)) return false;
      if (MapX != other.MapX) return false;
      if (MapY != other.MapY) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= mapBlocks_.GetHashCode();
      if (MapX != 0) hash ^= MapX.GetHashCode();
      if (MapY != 0) hash ^= MapY.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      mapBlocks_.WriteTo(output, _repeated_mapBlocks_codec);
      if (MapX != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MapX);
      }
      if (MapY != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MapY);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += mapBlocks_.CalculateSize(_repeated_mapBlocks_codec);
      if (MapX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapX);
      }
      if (MapY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapY);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockList other) {
      if (other == null) {
        return;
      }
      mapBlocks_.Add(other.mapBlocks_);
      if (other.MapX != 0) {
        MapX = other.MapX;
      }
      if (other.MapY != 0) {
        MapY = other.MapY;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            mapBlocks_.AddEntriesFrom(input, _repeated_mapBlocks_codec);
            break;
          }
          case 16: {
            MapX = input.ReadInt32();
            break;
          }
          case 24: {
            MapY = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlantDef : pb::IMessage<PlantDef> {
    private static readonly pb::MessageParser<PlantDef> _parser = new pb::MessageParser<PlantDef>(() => new PlantDef());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlantDef> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlantDef() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlantDef(PlantDef other) : this() {
      posX_ = other.posX_;
      posY_ = other.posY_;
      posZ_ = other.posZ_;
      index_ = other.index_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlantDef Clone() {
      return new PlantDef(this);
    }

    /// <summary>Field number for the "pos_x" field.</summary>
    public const int PosXFieldNumber = 1;
    private int posX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "pos_y" field.</summary>
    public const int PosYFieldNumber = 2;
    private int posY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "pos_z" field.</summary>
    public const int PosZFieldNumber = 3;
    private int posZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosZ {
      get { return posZ_; }
      set {
        posZ_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 4;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlantDef);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlantDef other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PosX != other.PosX) return false;
      if (PosY != other.PosY) return false;
      if (PosZ != other.PosZ) return false;
      if (Index != other.Index) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PosX != 0) hash ^= PosX.GetHashCode();
      if (PosY != 0) hash ^= PosY.GetHashCode();
      if (PosZ != 0) hash ^= PosZ.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PosX != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PosX);
      }
      if (PosY != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PosY);
      }
      if (PosZ != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PosZ);
      }
      if (Index != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosX);
      }
      if (PosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosY);
      }
      if (PosZ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosZ);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlantDef other) {
      if (other == null) {
        return;
      }
      if (other.PosX != 0) {
        PosX = other.PosX;
      }
      if (other.PosY != 0) {
        PosY = other.PosY;
      }
      if (other.PosZ != 0) {
        PosZ = other.PosZ;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PosX = input.ReadInt32();
            break;
          }
          case 16: {
            PosY = input.ReadInt32();
            break;
          }
          case 24: {
            PosZ = input.ReadInt32();
            break;
          }
          case 32: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlantList : pb::IMessage<PlantList> {
    private static readonly pb::MessageParser<PlantList> _parser = new pb::MessageParser<PlantList>(() => new PlantList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlantList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlantList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlantList(PlantList other) : this() {
      plantList_ = other.plantList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlantList Clone() {
      return new PlantList(this);
    }

    /// <summary>Field number for the "plant_list" field.</summary>
    public const int PlantList_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::RemoteFortressReader.PlantDef> _repeated_plantList_codec
        = pb::FieldCodec.ForMessage(10, global::RemoteFortressReader.PlantDef.Parser);
    private readonly pbc::RepeatedField<global::RemoteFortressReader.PlantDef> plantList_ = new pbc::RepeatedField<global::RemoteFortressReader.PlantDef>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RemoteFortressReader.PlantDef> PlantList_ {
      get { return plantList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlantList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlantList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!plantList_.Equals(other.plantList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= plantList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      plantList_.WriteTo(output, _repeated_plantList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += plantList_.CalculateSize(_repeated_plantList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlantList other) {
      if (other == null) {
        return;
      }
      plantList_.Add(other.plantList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            plantList_.AddEntriesFrom(input, _repeated_plantList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ViewInfo : pb::IMessage<ViewInfo> {
    private static readonly pb::MessageParser<ViewInfo> _parser = new pb::MessageParser<ViewInfo>(() => new ViewInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ViewInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ViewInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ViewInfo(ViewInfo other) : this() {
      viewPosX_ = other.viewPosX_;
      viewPosY_ = other.viewPosY_;
      viewPosZ_ = other.viewPosZ_;
      viewSizeX_ = other.viewSizeX_;
      viewSizeY_ = other.viewSizeY_;
      cursorPosX_ = other.cursorPosX_;
      cursorPosY_ = other.cursorPosY_;
      cursorPosZ_ = other.cursorPosZ_;
      followUnitId_ = other.followUnitId_;
      followItemId_ = other.followItemId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ViewInfo Clone() {
      return new ViewInfo(this);
    }

    /// <summary>Field number for the "view_pos_x" field.</summary>
    public const int ViewPosXFieldNumber = 1;
    private int viewPosX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ViewPosX {
      get { return viewPosX_; }
      set {
        viewPosX_ = value;
      }
    }

    /// <summary>Field number for the "view_pos_y" field.</summary>
    public const int ViewPosYFieldNumber = 2;
    private int viewPosY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ViewPosY {
      get { return viewPosY_; }
      set {
        viewPosY_ = value;
      }
    }

    /// <summary>Field number for the "view_pos_z" field.</summary>
    public const int ViewPosZFieldNumber = 3;
    private int viewPosZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ViewPosZ {
      get { return viewPosZ_; }
      set {
        viewPosZ_ = value;
      }
    }

    /// <summary>Field number for the "view_size_x" field.</summary>
    public const int ViewSizeXFieldNumber = 4;
    private int viewSizeX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ViewSizeX {
      get { return viewSizeX_; }
      set {
        viewSizeX_ = value;
      }
    }

    /// <summary>Field number for the "view_size_y" field.</summary>
    public const int ViewSizeYFieldNumber = 5;
    private int viewSizeY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ViewSizeY {
      get { return viewSizeY_; }
      set {
        viewSizeY_ = value;
      }
    }

    /// <summary>Field number for the "cursor_pos_x" field.</summary>
    public const int CursorPosXFieldNumber = 6;
    private int cursorPosX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CursorPosX {
      get { return cursorPosX_; }
      set {
        cursorPosX_ = value;
      }
    }

    /// <summary>Field number for the "cursor_pos_y" field.</summary>
    public const int CursorPosYFieldNumber = 7;
    private int cursorPosY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CursorPosY {
      get { return cursorPosY_; }
      set {
        cursorPosY_ = value;
      }
    }

    /// <summary>Field number for the "cursor_pos_z" field.</summary>
    public const int CursorPosZFieldNumber = 8;
    private int cursorPosZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CursorPosZ {
      get { return cursorPosZ_; }
      set {
        cursorPosZ_ = value;
      }
    }

    /// <summary>Field number for the "follow_unit_id" field.</summary>
    public const int FollowUnitIdFieldNumber = 9;
    private int followUnitId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FollowUnitId {
      get { return followUnitId_; }
      set {
        followUnitId_ = value;
      }
    }

    /// <summary>Field number for the "follow_item_id" field.</summary>
    public const int FollowItemIdFieldNumber = 10;
    private int followItemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FollowItemId {
      get { return followItemId_; }
      set {
        followItemId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ViewInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ViewInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ViewPosX != other.ViewPosX) return false;
      if (ViewPosY != other.ViewPosY) return false;
      if (ViewPosZ != other.ViewPosZ) return false;
      if (ViewSizeX != other.ViewSizeX) return false;
      if (ViewSizeY != other.ViewSizeY) return false;
      if (CursorPosX != other.CursorPosX) return false;
      if (CursorPosY != other.CursorPosY) return false;
      if (CursorPosZ != other.CursorPosZ) return false;
      if (FollowUnitId != other.FollowUnitId) return false;
      if (FollowItemId != other.FollowItemId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ViewPosX != 0) hash ^= ViewPosX.GetHashCode();
      if (ViewPosY != 0) hash ^= ViewPosY.GetHashCode();
      if (ViewPosZ != 0) hash ^= ViewPosZ.GetHashCode();
      if (ViewSizeX != 0) hash ^= ViewSizeX.GetHashCode();
      if (ViewSizeY != 0) hash ^= ViewSizeY.GetHashCode();
      if (CursorPosX != 0) hash ^= CursorPosX.GetHashCode();
      if (CursorPosY != 0) hash ^= CursorPosY.GetHashCode();
      if (CursorPosZ != 0) hash ^= CursorPosZ.GetHashCode();
      if (FollowUnitId != 0) hash ^= FollowUnitId.GetHashCode();
      if (FollowItemId != 0) hash ^= FollowItemId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ViewPosX != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ViewPosX);
      }
      if (ViewPosY != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ViewPosY);
      }
      if (ViewPosZ != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ViewPosZ);
      }
      if (ViewSizeX != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ViewSizeX);
      }
      if (ViewSizeY != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ViewSizeY);
      }
      if (CursorPosX != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CursorPosX);
      }
      if (CursorPosY != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(CursorPosY);
      }
      if (CursorPosZ != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CursorPosZ);
      }
      if (FollowUnitId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(FollowUnitId);
      }
      if (FollowItemId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(FollowItemId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ViewPosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ViewPosX);
      }
      if (ViewPosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ViewPosY);
      }
      if (ViewPosZ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ViewPosZ);
      }
      if (ViewSizeX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ViewSizeX);
      }
      if (ViewSizeY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ViewSizeY);
      }
      if (CursorPosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CursorPosX);
      }
      if (CursorPosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CursorPosY);
      }
      if (CursorPosZ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CursorPosZ);
      }
      if (FollowUnitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FollowUnitId);
      }
      if (FollowItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FollowItemId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ViewInfo other) {
      if (other == null) {
        return;
      }
      if (other.ViewPosX != 0) {
        ViewPosX = other.ViewPosX;
      }
      if (other.ViewPosY != 0) {
        ViewPosY = other.ViewPosY;
      }
      if (other.ViewPosZ != 0) {
        ViewPosZ = other.ViewPosZ;
      }
      if (other.ViewSizeX != 0) {
        ViewSizeX = other.ViewSizeX;
      }
      if (other.ViewSizeY != 0) {
        ViewSizeY = other.ViewSizeY;
      }
      if (other.CursorPosX != 0) {
        CursorPosX = other.CursorPosX;
      }
      if (other.CursorPosY != 0) {
        CursorPosY = other.CursorPosY;
      }
      if (other.CursorPosZ != 0) {
        CursorPosZ = other.CursorPosZ;
      }
      if (other.FollowUnitId != 0) {
        FollowUnitId = other.FollowUnitId;
      }
      if (other.FollowItemId != 0) {
        FollowItemId = other.FollowItemId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ViewPosX = input.ReadInt32();
            break;
          }
          case 16: {
            ViewPosY = input.ReadInt32();
            break;
          }
          case 24: {
            ViewPosZ = input.ReadInt32();
            break;
          }
          case 32: {
            ViewSizeX = input.ReadInt32();
            break;
          }
          case 40: {
            ViewSizeY = input.ReadInt32();
            break;
          }
          case 48: {
            CursorPosX = input.ReadInt32();
            break;
          }
          case 56: {
            CursorPosY = input.ReadInt32();
            break;
          }
          case 64: {
            CursorPosZ = input.ReadInt32();
            break;
          }
          case 72: {
            FollowUnitId = input.ReadInt32();
            break;
          }
          case 80: {
            FollowItemId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MapInfo : pb::IMessage<MapInfo> {
    private static readonly pb::MessageParser<MapInfo> _parser = new pb::MessageParser<MapInfo>(() => new MapInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapInfo(MapInfo other) : this() {
      blockSizeX_ = other.blockSizeX_;
      blockSizeY_ = other.blockSizeY_;
      blockSizeZ_ = other.blockSizeZ_;
      blockPosX_ = other.blockPosX_;
      blockPosY_ = other.blockPosY_;
      blockPosZ_ = other.blockPosZ_;
      worldName_ = other.worldName_;
      worldNameEnglish_ = other.worldNameEnglish_;
      saveName_ = other.saveName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapInfo Clone() {
      return new MapInfo(this);
    }

    /// <summary>Field number for the "block_size_x" field.</summary>
    public const int BlockSizeXFieldNumber = 1;
    private int blockSizeX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlockSizeX {
      get { return blockSizeX_; }
      set {
        blockSizeX_ = value;
      }
    }

    /// <summary>Field number for the "block_size_y" field.</summary>
    public const int BlockSizeYFieldNumber = 2;
    private int blockSizeY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlockSizeY {
      get { return blockSizeY_; }
      set {
        blockSizeY_ = value;
      }
    }

    /// <summary>Field number for the "block_size_z" field.</summary>
    public const int BlockSizeZFieldNumber = 3;
    private int blockSizeZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlockSizeZ {
      get { return blockSizeZ_; }
      set {
        blockSizeZ_ = value;
      }
    }

    /// <summary>Field number for the "block_pos_x" field.</summary>
    public const int BlockPosXFieldNumber = 4;
    private int blockPosX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlockPosX {
      get { return blockPosX_; }
      set {
        blockPosX_ = value;
      }
    }

    /// <summary>Field number for the "block_pos_y" field.</summary>
    public const int BlockPosYFieldNumber = 5;
    private int blockPosY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlockPosY {
      get { return blockPosY_; }
      set {
        blockPosY_ = value;
      }
    }

    /// <summary>Field number for the "block_pos_z" field.</summary>
    public const int BlockPosZFieldNumber = 6;
    private int blockPosZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlockPosZ {
      get { return blockPosZ_; }
      set {
        blockPosZ_ = value;
      }
    }

    /// <summary>Field number for the "world_name" field.</summary>
    public const int WorldNameFieldNumber = 7;
    private string worldName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WorldName {
      get { return worldName_; }
      set {
        worldName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "world_name_english" field.</summary>
    public const int WorldNameEnglishFieldNumber = 8;
    private string worldNameEnglish_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WorldNameEnglish {
      get { return worldNameEnglish_; }
      set {
        worldNameEnglish_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "save_name" field.</summary>
    public const int SaveNameFieldNumber = 9;
    private string saveName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SaveName {
      get { return saveName_; }
      set {
        saveName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BlockSizeX != other.BlockSizeX) return false;
      if (BlockSizeY != other.BlockSizeY) return false;
      if (BlockSizeZ != other.BlockSizeZ) return false;
      if (BlockPosX != other.BlockPosX) return false;
      if (BlockPosY != other.BlockPosY) return false;
      if (BlockPosZ != other.BlockPosZ) return false;
      if (WorldName != other.WorldName) return false;
      if (WorldNameEnglish != other.WorldNameEnglish) return false;
      if (SaveName != other.SaveName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BlockSizeX != 0) hash ^= BlockSizeX.GetHashCode();
      if (BlockSizeY != 0) hash ^= BlockSizeY.GetHashCode();
      if (BlockSizeZ != 0) hash ^= BlockSizeZ.GetHashCode();
      if (BlockPosX != 0) hash ^= BlockPosX.GetHashCode();
      if (BlockPosY != 0) hash ^= BlockPosY.GetHashCode();
      if (BlockPosZ != 0) hash ^= BlockPosZ.GetHashCode();
      if (WorldName.Length != 0) hash ^= WorldName.GetHashCode();
      if (WorldNameEnglish.Length != 0) hash ^= WorldNameEnglish.GetHashCode();
      if (SaveName.Length != 0) hash ^= SaveName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BlockSizeX != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BlockSizeX);
      }
      if (BlockSizeY != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BlockSizeY);
      }
      if (BlockSizeZ != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BlockSizeZ);
      }
      if (BlockPosX != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BlockPosX);
      }
      if (BlockPosY != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BlockPosY);
      }
      if (BlockPosZ != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BlockPosZ);
      }
      if (WorldName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(WorldName);
      }
      if (WorldNameEnglish.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(WorldNameEnglish);
      }
      if (SaveName.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(SaveName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BlockSizeX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockSizeX);
      }
      if (BlockSizeY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockSizeY);
      }
      if (BlockSizeZ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockSizeZ);
      }
      if (BlockPosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockPosX);
      }
      if (BlockPosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockPosY);
      }
      if (BlockPosZ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockPosZ);
      }
      if (WorldName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WorldName);
      }
      if (WorldNameEnglish.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WorldNameEnglish);
      }
      if (SaveName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SaveName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapInfo other) {
      if (other == null) {
        return;
      }
      if (other.BlockSizeX != 0) {
        BlockSizeX = other.BlockSizeX;
      }
      if (other.BlockSizeY != 0) {
        BlockSizeY = other.BlockSizeY;
      }
      if (other.BlockSizeZ != 0) {
        BlockSizeZ = other.BlockSizeZ;
      }
      if (other.BlockPosX != 0) {
        BlockPosX = other.BlockPosX;
      }
      if (other.BlockPosY != 0) {
        BlockPosY = other.BlockPosY;
      }
      if (other.BlockPosZ != 0) {
        BlockPosZ = other.BlockPosZ;
      }
      if (other.WorldName.Length != 0) {
        WorldName = other.WorldName;
      }
      if (other.WorldNameEnglish.Length != 0) {
        WorldNameEnglish = other.WorldNameEnglish;
      }
      if (other.SaveName.Length != 0) {
        SaveName = other.SaveName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BlockSizeX = input.ReadInt32();
            break;
          }
          case 16: {
            BlockSizeY = input.ReadInt32();
            break;
          }
          case 24: {
            BlockSizeZ = input.ReadInt32();
            break;
          }
          case 32: {
            BlockPosX = input.ReadInt32();
            break;
          }
          case 40: {
            BlockPosY = input.ReadInt32();
            break;
          }
          case 48: {
            BlockPosZ = input.ReadInt32();
            break;
          }
          case 58: {
            WorldName = input.ReadString();
            break;
          }
          case 66: {
            WorldNameEnglish = input.ReadString();
            break;
          }
          case 74: {
            SaveName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Cloud : pb::IMessage<Cloud> {
    private static readonly pb::MessageParser<Cloud> _parser = new pb::MessageParser<Cloud>(() => new Cloud());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Cloud> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cloud() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cloud(Cloud other) : this() {
      front_ = other.front_;
      cumulus_ = other.cumulus_;
      cirrus_ = other.cirrus_;
      stratus_ = other.stratus_;
      fog_ = other.fog_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cloud Clone() {
      return new Cloud(this);
    }

    /// <summary>Field number for the "front" field.</summary>
    public const int FrontFieldNumber = 1;
    private global::RemoteFortressReader.FrontType front_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RemoteFortressReader.FrontType Front {
      get { return front_; }
      set {
        front_ = value;
      }
    }

    /// <summary>Field number for the "cumulus" field.</summary>
    public const int CumulusFieldNumber = 2;
    private global::RemoteFortressReader.CumulusType cumulus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RemoteFortressReader.CumulusType Cumulus {
      get { return cumulus_; }
      set {
        cumulus_ = value;
      }
    }

    /// <summary>Field number for the "cirrus" field.</summary>
    public const int CirrusFieldNumber = 3;
    private bool cirrus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Cirrus {
      get { return cirrus_; }
      set {
        cirrus_ = value;
      }
    }

    /// <summary>Field number for the "stratus" field.</summary>
    public const int StratusFieldNumber = 4;
    private global::RemoteFortressReader.StratusType stratus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RemoteFortressReader.StratusType Stratus {
      get { return stratus_; }
      set {
        stratus_ = value;
      }
    }

    /// <summary>Field number for the "fog" field.</summary>
    public const int FogFieldNumber = 5;
    private global::RemoteFortressReader.FogType fog_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RemoteFortressReader.FogType Fog {
      get { return fog_; }
      set {
        fog_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Cloud);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Cloud other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Front != other.Front) return false;
      if (Cumulus != other.Cumulus) return false;
      if (Cirrus != other.Cirrus) return false;
      if (Stratus != other.Stratus) return false;
      if (Fog != other.Fog) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Front != 0) hash ^= Front.GetHashCode();
      if (Cumulus != 0) hash ^= Cumulus.GetHashCode();
      if (Cirrus != false) hash ^= Cirrus.GetHashCode();
      if (Stratus != 0) hash ^= Stratus.GetHashCode();
      if (Fog != 0) hash ^= Fog.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Front != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Front);
      }
      if (Cumulus != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Cumulus);
      }
      if (Cirrus != false) {
        output.WriteRawTag(24);
        output.WriteBool(Cirrus);
      }
      if (Stratus != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Stratus);
      }
      if (Fog != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Fog);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Front != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Front);
      }
      if (Cumulus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Cumulus);
      }
      if (Cirrus != false) {
        size += 1 + 1;
      }
      if (Stratus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Stratus);
      }
      if (Fog != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Fog);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Cloud other) {
      if (other == null) {
        return;
      }
      if (other.Front != 0) {
        Front = other.Front;
      }
      if (other.Cumulus != 0) {
        Cumulus = other.Cumulus;
      }
      if (other.Cirrus != false) {
        Cirrus = other.Cirrus;
      }
      if (other.Stratus != 0) {
        Stratus = other.Stratus;
      }
      if (other.Fog != 0) {
        Fog = other.Fog;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            front_ = (global::RemoteFortressReader.FrontType) input.ReadEnum();
            break;
          }
          case 16: {
            cumulus_ = (global::RemoteFortressReader.CumulusType) input.ReadEnum();
            break;
          }
          case 24: {
            Cirrus = input.ReadBool();
            break;
          }
          case 32: {
            stratus_ = (global::RemoteFortressReader.StratusType) input.ReadEnum();
            break;
          }
          case 40: {
            fog_ = (global::RemoteFortressReader.FogType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WorldMap : pb::IMessage<WorldMap> {
    private static readonly pb::MessageParser<WorldMap> _parser = new pb::MessageParser<WorldMap>(() => new WorldMap());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorldMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorldMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorldMap(WorldMap other) : this() {
      worldWidth_ = other.worldWidth_;
      worldHeight_ = other.worldHeight_;
      name_ = other.name_;
      nameEnglish_ = other.nameEnglish_;
      elevation_ = other.elevation_.Clone();
      rainfall_ = other.rainfall_.Clone();
      vegetation_ = other.vegetation_.Clone();
      temperature_ = other.temperature_.Clone();
      evilness_ = other.evilness_.Clone();
      drainage_ = other.drainage_.Clone();
      volcanism_ = other.volcanism_.Clone();
      savagery_ = other.savagery_.Clone();
      clouds_ = other.clouds_.Clone();
      salinity_ = other.salinity_.Clone();
      mapX_ = other.mapX_;
      mapY_ = other.mapY_;
      centerX_ = other.centerX_;
      centerY_ = other.centerY_;
      centerZ_ = other.centerZ_;
      curYear_ = other.curYear_;
      curYearTick_ = other.curYearTick_;
      worldPoles_ = other.worldPoles_;
      riverTiles_ = other.riverTiles_.Clone();
      waterElevation_ = other.waterElevation_.Clone();
      regionTiles_ = other.regionTiles_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorldMap Clone() {
      return new WorldMap(this);
    }

    /// <summary>Field number for the "world_width" field.</summary>
    public const int WorldWidthFieldNumber = 1;
    private int worldWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WorldWidth {
      get { return worldWidth_; }
      set {
        worldWidth_ = value;
      }
    }

    /// <summary>Field number for the "world_height" field.</summary>
    public const int WorldHeightFieldNumber = 2;
    private int worldHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WorldHeight {
      get { return worldHeight_; }
      set {
        worldHeight_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name_english" field.</summary>
    public const int NameEnglishFieldNumber = 4;
    private string nameEnglish_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NameEnglish {
      get { return nameEnglish_; }
      set {
        nameEnglish_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "elevation" field.</summary>
    public const int ElevationFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_elevation_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> elevation_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Elevation {
      get { return elevation_; }
    }

    /// <summary>Field number for the "rainfall" field.</summary>
    public const int RainfallFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_rainfall_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> rainfall_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Rainfall {
      get { return rainfall_; }
    }

    /// <summary>Field number for the "vegetation" field.</summary>
    public const int VegetationFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_vegetation_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> vegetation_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Vegetation {
      get { return vegetation_; }
    }

    /// <summary>Field number for the "temperature" field.</summary>
    public const int TemperatureFieldNumber = 8;
    private static readonly pb::FieldCodec<int> _repeated_temperature_codec
        = pb::FieldCodec.ForInt32(66);
    private readonly pbc::RepeatedField<int> temperature_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Temperature {
      get { return temperature_; }
    }

    /// <summary>Field number for the "evilness" field.</summary>
    public const int EvilnessFieldNumber = 9;
    private static readonly pb::FieldCodec<int> _repeated_evilness_codec
        = pb::FieldCodec.ForInt32(74);
    private readonly pbc::RepeatedField<int> evilness_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Evilness {
      get { return evilness_; }
    }

    /// <summary>Field number for the "drainage" field.</summary>
    public const int DrainageFieldNumber = 10;
    private static readonly pb::FieldCodec<int> _repeated_drainage_codec
        = pb::FieldCodec.ForInt32(82);
    private readonly pbc::RepeatedField<int> drainage_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Drainage {
      get { return drainage_; }
    }

    /// <summary>Field number for the "volcanism" field.</summary>
    public const int VolcanismFieldNumber = 11;
    private static readonly pb::FieldCodec<int> _repeated_volcanism_codec
        = pb::FieldCodec.ForInt32(90);
    private readonly pbc::RepeatedField<int> volcanism_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Volcanism {
      get { return volcanism_; }
    }

    /// <summary>Field number for the "savagery" field.</summary>
    public const int SavageryFieldNumber = 12;
    private static readonly pb::FieldCodec<int> _repeated_savagery_codec
        = pb::FieldCodec.ForInt32(98);
    private readonly pbc::RepeatedField<int> savagery_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Savagery {
      get { return savagery_; }
    }

    /// <summary>Field number for the "clouds" field.</summary>
    public const int CloudsFieldNumber = 13;
    private static readonly pb::FieldCodec<global::RemoteFortressReader.Cloud> _repeated_clouds_codec
        = pb::FieldCodec.ForMessage(106, global::RemoteFortressReader.Cloud.Parser);
    private readonly pbc::RepeatedField<global::RemoteFortressReader.Cloud> clouds_ = new pbc::RepeatedField<global::RemoteFortressReader.Cloud>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RemoteFortressReader.Cloud> Clouds {
      get { return clouds_; }
    }

    /// <summary>Field number for the "salinity" field.</summary>
    public const int SalinityFieldNumber = 14;
    private static readonly pb::FieldCodec<int> _repeated_salinity_codec
        = pb::FieldCodec.ForInt32(114);
    private readonly pbc::RepeatedField<int> salinity_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Salinity {
      get { return salinity_; }
    }

    /// <summary>Field number for the "map_x" field.</summary>
    public const int MapXFieldNumber = 15;
    private int mapX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapX {
      get { return mapX_; }
      set {
        mapX_ = value;
      }
    }

    /// <summary>Field number for the "map_y" field.</summary>
    public const int MapYFieldNumber = 16;
    private int mapY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapY {
      get { return mapY_; }
      set {
        mapY_ = value;
      }
    }

    /// <summary>Field number for the "center_x" field.</summary>
    public const int CenterXFieldNumber = 17;
    private int centerX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CenterX {
      get { return centerX_; }
      set {
        centerX_ = value;
      }
    }

    /// <summary>Field number for the "center_y" field.</summary>
    public const int CenterYFieldNumber = 18;
    private int centerY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CenterY {
      get { return centerY_; }
      set {
        centerY_ = value;
      }
    }

    /// <summary>Field number for the "center_z" field.</summary>
    public const int CenterZFieldNumber = 19;
    private int centerZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CenterZ {
      get { return centerZ_; }
      set {
        centerZ_ = value;
      }
    }

    /// <summary>Field number for the "cur_year" field.</summary>
    public const int CurYearFieldNumber = 20;
    private int curYear_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurYear {
      get { return curYear_; }
      set {
        curYear_ = value;
      }
    }

    /// <summary>Field number for the "cur_year_tick" field.</summary>
    public const int CurYearTickFieldNumber = 21;
    private int curYearTick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurYearTick {
      get { return curYearTick_; }
      set {
        curYearTick_ = value;
      }
    }

    /// <summary>Field number for the "world_poles" field.</summary>
    public const int WorldPolesFieldNumber = 22;
    private global::RemoteFortressReader.WorldPoles worldPoles_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RemoteFortressReader.WorldPoles WorldPoles {
      get { return worldPoles_; }
      set {
        worldPoles_ = value;
      }
    }

    /// <summary>Field number for the "river_tiles" field.</summary>
    public const int RiverTilesFieldNumber = 23;
    private static readonly pb::FieldCodec<global::RemoteFortressReader.RiverTile> _repeated_riverTiles_codec
        = pb::FieldCodec.ForMessage(186, global::RemoteFortressReader.RiverTile.Parser);
    private readonly pbc::RepeatedField<global::RemoteFortressReader.RiverTile> riverTiles_ = new pbc::RepeatedField<global::RemoteFortressReader.RiverTile>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RemoteFortressReader.RiverTile> RiverTiles {
      get { return riverTiles_; }
    }

    /// <summary>Field number for the "water_elevation" field.</summary>
    public const int WaterElevationFieldNumber = 24;
    private static readonly pb::FieldCodec<int> _repeated_waterElevation_codec
        = pb::FieldCodec.ForInt32(194);
    private readonly pbc::RepeatedField<int> waterElevation_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> WaterElevation {
      get { return waterElevation_; }
    }

    /// <summary>Field number for the "region_tiles" field.</summary>
    public const int RegionTilesFieldNumber = 25;
    private static readonly pb::FieldCodec<global::RemoteFortressReader.RegionTile> _repeated_regionTiles_codec
        = pb::FieldCodec.ForMessage(202, global::RemoteFortressReader.RegionTile.Parser);
    private readonly pbc::RepeatedField<global::RemoteFortressReader.RegionTile> regionTiles_ = new pbc::RepeatedField<global::RemoteFortressReader.RegionTile>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RemoteFortressReader.RegionTile> RegionTiles {
      get { return regionTiles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorldMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorldMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WorldWidth != other.WorldWidth) return false;
      if (WorldHeight != other.WorldHeight) return false;
      if (Name != other.Name) return false;
      if (NameEnglish != other.NameEnglish) return false;
      if(!elevation_.Equals(other.elevation_)) return false;
      if(!rainfall_.Equals(other.rainfall_)) return false;
      if(!vegetation_.Equals(other.vegetation_)) return false;
      if(!temperature_.Equals(other.temperature_)) return false;
      if(!evilness_.Equals(other.evilness_)) return false;
      if(!drainage_.Equals(other.drainage_)) return false;
      if(!volcanism_.Equals(other.volcanism_)) return false;
      if(!savagery_.Equals(other.savagery_)) return false;
      if(!clouds_.Equals(other.clouds_)) return false;
      if(!salinity_.Equals(other.salinity_)) return false;
      if (MapX != other.MapX) return false;
      if (MapY != other.MapY) return false;
      if (CenterX != other.CenterX) return false;
      if (CenterY != other.CenterY) return false;
      if (CenterZ != other.CenterZ) return false;
      if (CurYear != other.CurYear) return false;
      if (CurYearTick != other.CurYearTick) return false;
      if (WorldPoles != other.WorldPoles) return false;
      if(!riverTiles_.Equals(other.riverTiles_)) return false;
      if(!waterElevation_.Equals(other.waterElevation_)) return false;
      if(!regionTiles_.Equals(other.regionTiles_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WorldWidth != 0) hash ^= WorldWidth.GetHashCode();
      if (WorldHeight != 0) hash ^= WorldHeight.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (NameEnglish.Length != 0) hash ^= NameEnglish.GetHashCode();
      hash ^= elevation_.GetHashCode();
      hash ^= rainfall_.GetHashCode();
      hash ^= vegetation_.GetHashCode();
      hash ^= temperature_.GetHashCode();
      hash ^= evilness_.GetHashCode();
      hash ^= drainage_.GetHashCode();
      hash ^= volcanism_.GetHashCode();
      hash ^= savagery_.GetHashCode();
      hash ^= clouds_.GetHashCode();
      hash ^= salinity_.GetHashCode();
      if (MapX != 0) hash ^= MapX.GetHashCode();
      if (MapY != 0) hash ^= MapY.GetHashCode();
      if (CenterX != 0) hash ^= CenterX.GetHashCode();
      if (CenterY != 0) hash ^= CenterY.GetHashCode();
      if (CenterZ != 0) hash ^= CenterZ.GetHashCode();
      if (CurYear != 0) hash ^= CurYear.GetHashCode();
      if (CurYearTick != 0) hash ^= CurYearTick.GetHashCode();
      if (WorldPoles != 0) hash ^= WorldPoles.GetHashCode();
      hash ^= riverTiles_.GetHashCode();
      hash ^= waterElevation_.GetHashCode();
      hash ^= regionTiles_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WorldWidth != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WorldWidth);
      }
      if (WorldHeight != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WorldHeight);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (NameEnglish.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(NameEnglish);
      }
      elevation_.WriteTo(output, _repeated_elevation_codec);
      rainfall_.WriteTo(output, _repeated_rainfall_codec);
      vegetation_.WriteTo(output, _repeated_vegetation_codec);
      temperature_.WriteTo(output, _repeated_temperature_codec);
      evilness_.WriteTo(output, _repeated_evilness_codec);
      drainage_.WriteTo(output, _repeated_drainage_codec);
      volcanism_.WriteTo(output, _repeated_volcanism_codec);
      savagery_.WriteTo(output, _repeated_savagery_codec);
      clouds_.WriteTo(output, _repeated_clouds_codec);
      salinity_.WriteTo(output, _repeated_salinity_codec);
      if (MapX != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(MapX);
      }
      if (MapY != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(MapY);
      }
      if (CenterX != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(CenterX);
      }
      if (CenterY != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(CenterY);
      }
      if (CenterZ != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(CenterZ);
      }
      if (CurYear != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(CurYear);
      }
      if (CurYearTick != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(CurYearTick);
      }
      if (WorldPoles != 0) {
        output.WriteRawTag(176, 1);
        output.WriteEnum((int) WorldPoles);
      }
      riverTiles_.WriteTo(output, _repeated_riverTiles_codec);
      waterElevation_.WriteTo(output, _repeated_waterElevation_codec);
      regionTiles_.WriteTo(output, _repeated_regionTiles_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WorldWidth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WorldWidth);
      }
      if (WorldHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WorldHeight);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (NameEnglish.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NameEnglish);
      }
      size += elevation_.CalculateSize(_repeated_elevation_codec);
      size += rainfall_.CalculateSize(_repeated_rainfall_codec);
      size += vegetation_.CalculateSize(_repeated_vegetation_codec);
      size += temperature_.CalculateSize(_repeated_temperature_codec);
      size += evilness_.CalculateSize(_repeated_evilness_codec);
      size += drainage_.CalculateSize(_repeated_drainage_codec);
      size += volcanism_.CalculateSize(_repeated_volcanism_codec);
      size += savagery_.CalculateSize(_repeated_savagery_codec);
      size += clouds_.CalculateSize(_repeated_clouds_codec);
      size += salinity_.CalculateSize(_repeated_salinity_codec);
      if (MapX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapX);
      }
      if (MapY != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MapY);
      }
      if (CenterX != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CenterX);
      }
      if (CenterY != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CenterY);
      }
      if (CenterZ != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CenterZ);
      }
      if (CurYear != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CurYear);
      }
      if (CurYearTick != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CurYearTick);
      }
      if (WorldPoles != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) WorldPoles);
      }
      size += riverTiles_.CalculateSize(_repeated_riverTiles_codec);
      size += waterElevation_.CalculateSize(_repeated_waterElevation_codec);
      size += regionTiles_.CalculateSize(_repeated_regionTiles_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorldMap other) {
      if (other == null) {
        return;
      }
      if (other.WorldWidth != 0) {
        WorldWidth = other.WorldWidth;
      }
      if (other.WorldHeight != 0) {
        WorldHeight = other.WorldHeight;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.NameEnglish.Length != 0) {
        NameEnglish = other.NameEnglish;
      }
      elevation_.Add(other.elevation_);
      rainfall_.Add(other.rainfall_);
      vegetation_.Add(other.vegetation_);
      temperature_.Add(other.temperature_);
      evilness_.Add(other.evilness_);
      drainage_.Add(other.drainage_);
      volcanism_.Add(other.volcanism_);
      savagery_.Add(other.savagery_);
      clouds_.Add(other.clouds_);
      salinity_.Add(other.salinity_);
      if (other.MapX != 0) {
        MapX = other.MapX;
      }
      if (other.MapY != 0) {
        MapY = other.MapY;
      }
      if (other.CenterX != 0) {
        CenterX = other.CenterX;
      }
      if (other.CenterY != 0) {
        CenterY = other.CenterY;
      }
      if (other.CenterZ != 0) {
        CenterZ = other.CenterZ;
      }
      if (other.CurYear != 0) {
        CurYear = other.CurYear;
      }
      if (other.CurYearTick != 0) {
        CurYearTick = other.CurYearTick;
      }
      if (other.WorldPoles != 0) {
        WorldPoles = other.WorldPoles;
      }
      riverTiles_.Add(other.riverTiles_);
      waterElevation_.Add(other.waterElevation_);
      regionTiles_.Add(other.regionTiles_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            WorldWidth = input.ReadInt32();
            break;
          }
          case 16: {
            WorldHeight = input.ReadInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            NameEnglish = input.ReadString();
            break;
          }
          case 42:
          case 40: {
            elevation_.AddEntriesFrom(input, _repeated_elevation_codec);
            break;
          }
          case 50:
          case 48: {
            rainfall_.AddEntriesFrom(input, _repeated_rainfall_codec);
            break;
          }
          case 58:
          case 56: {
            vegetation_.AddEntriesFrom(input, _repeated_vegetation_codec);
            break;
          }
          case 66:
          case 64: {
            temperature_.AddEntriesFrom(input, _repeated_temperature_codec);
            break;
          }
          case 74:
          case 72: {
            evilness_.AddEntriesFrom(input, _repeated_evilness_codec);
            break;
          }
          case 82:
          case 80: {
            drainage_.AddEntriesFrom(input, _repeated_drainage_codec);
            break;
          }
          case 90:
          case 88: {
            volcanism_.AddEntriesFrom(input, _repeated_volcanism_codec);
            break;
          }
          case 98:
          case 96: {
            savagery_.AddEntriesFrom(input, _repeated_savagery_codec);
            break;
          }
          case 106: {
            clouds_.AddEntriesFrom(input, _repeated_clouds_codec);
            break;
          }
          case 114:
          case 112: {
            salinity_.AddEntriesFrom(input, _repeated_salinity_codec);
            break;
          }
          case 120: {
            MapX = input.ReadInt32();
            break;
          }
          case 128: {
            MapY = input.ReadInt32();
            break;
          }
          case 136: {
            CenterX = input.ReadInt32();
            break;
          }
          case 144: {
            CenterY = input.ReadInt32();
            break;
          }
          case 152: {
            CenterZ = input.ReadInt32();
            break;
          }
          case 160: {
            CurYear = input.ReadInt32();
            break;
          }
          case 168: {
            CurYearTick = input.ReadInt32();
            break;
          }
          case 176: {
            worldPoles_ = (global::RemoteFortressReader.WorldPoles) input.ReadEnum();
            break;
          }
          case 186: {
            riverTiles_.AddEntriesFrom(input, _repeated_riverTiles_codec);
            break;
          }
          case 194:
          case 192: {
            waterElevation_.AddEntriesFrom(input, _repeated_waterElevation_codec);
            break;
          }
          case 202: {
            regionTiles_.AddEntriesFrom(input, _repeated_regionTiles_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SiteRealizationBuildingWall : pb::IMessage<SiteRealizationBuildingWall> {
    private static readonly pb::MessageParser<SiteRealizationBuildingWall> _parser = new pb::MessageParser<SiteRealizationBuildingWall>(() => new SiteRealizationBuildingWall());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SiteRealizationBuildingWall> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SiteRealizationBuildingWall() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SiteRealizationBuildingWall(SiteRealizationBuildingWall other) : this() {
      startX_ = other.startX_;
      startY_ = other.startY_;
      startZ_ = other.startZ_;
      endX_ = other.endX_;
      endY_ = other.endY_;
      endZ_ = other.endZ_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SiteRealizationBuildingWall Clone() {
      return new SiteRealizationBuildingWall(this);
    }

    /// <summary>Field number for the "start_x" field.</summary>
    public const int StartXFieldNumber = 1;
    private int startX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartX {
      get { return startX_; }
      set {
        startX_ = value;
      }
    }

    /// <summary>Field number for the "start_y" field.</summary>
    public const int StartYFieldNumber = 2;
    private int startY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartY {
      get { return startY_; }
      set {
        startY_ = value;
      }
    }

    /// <summary>Field number for the "start_z" field.</summary>
    public const int StartZFieldNumber = 3;
    private int startZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartZ {
      get { return startZ_; }
      set {
        startZ_ = value;
      }
    }

    /// <summary>Field number for the "end_x" field.</summary>
    public const int EndXFieldNumber = 4;
    private int endX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndX {
      get { return endX_; }
      set {
        endX_ = value;
      }
    }

    /// <summary>Field number for the "end_y" field.</summary>
    public const int EndYFieldNumber = 5;
    private int endY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndY {
      get { return endY_; }
      set {
        endY_ = value;
      }
    }

    /// <summary>Field number for the "end_z" field.</summary>
    public const int EndZFieldNumber = 6;
    private int endZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndZ {
      get { return endZ_; }
      set {
        endZ_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SiteRealizationBuildingWall);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SiteRealizationBuildingWall other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartX != other.StartX) return false;
      if (StartY != other.StartY) return false;
      if (StartZ != other.StartZ) return false;
      if (EndX != other.EndX) return false;
      if (EndY != other.EndY) return false;
      if (EndZ != other.EndZ) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StartX != 0) hash ^= StartX.GetHashCode();
      if (StartY != 0) hash ^= StartY.GetHashCode();
      if (StartZ != 0) hash ^= StartZ.GetHashCode();
      if (EndX != 0) hash ^= EndX.GetHashCode();
      if (EndY != 0) hash ^= EndY.GetHashCode();
      if (EndZ != 0) hash ^= EndZ.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StartX != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StartX);
      }
      if (StartY != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(StartY);
      }
      if (StartZ != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(StartZ);
      }
      if (EndX != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EndX);
      }
      if (EndY != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(EndY);
      }
      if (EndZ != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(EndZ);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartX);
      }
      if (StartY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartY);
      }
      if (StartZ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartZ);
      }
      if (EndX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndX);
      }
      if (EndY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndY);
      }
      if (EndZ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndZ);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SiteRealizationBuildingWall other) {
      if (other == null) {
        return;
      }
      if (other.StartX != 0) {
        StartX = other.StartX;
      }
      if (other.StartY != 0) {
        StartY = other.StartY;
      }
      if (other.StartZ != 0) {
        StartZ = other.StartZ;
      }
      if (other.EndX != 0) {
        EndX = other.EndX;
      }
      if (other.EndY != 0) {
        EndY = other.EndY;
      }
      if (other.EndZ != 0) {
        EndZ = other.EndZ;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StartX = input.ReadInt32();
            break;
          }
          case 16: {
            StartY = input.ReadInt32();
            break;
          }
          case 24: {
            StartZ = input.ReadInt32();
            break;
          }
          case 32: {
            EndX = input.ReadInt32();
            break;
          }
          case 40: {
            EndY = input.ReadInt32();
            break;
          }
          case 48: {
            EndZ = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SiteRealizationBuildingTower : pb::IMessage<SiteRealizationBuildingTower> {
    private static readonly pb::MessageParser<SiteRealizationBuildingTower> _parser = new pb::MessageParser<SiteRealizationBuildingTower>(() => new SiteRealizationBuildingTower());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SiteRealizationBuildingTower> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SiteRealizationBuildingTower() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SiteRealizationBuildingTower(SiteRealizationBuildingTower other) : this() {
      roofZ_ = other.roofZ_;
      round_ = other.round_;
      goblin_ = other.goblin_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SiteRealizationBuildingTower Clone() {
      return new SiteRealizationBuildingTower(this);
    }

    /// <summary>Field number for the "roof_z" field.</summary>
    public const int RoofZFieldNumber = 1;
    private int roofZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoofZ {
      get { return roofZ_; }
      set {
        roofZ_ = value;
      }
    }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 2;
    private bool round_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    /// <summary>Field number for the "goblin" field.</summary>
    public const int GoblinFieldNumber = 3;
    private bool goblin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Goblin {
      get { return goblin_; }
      set {
        goblin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SiteRealizationBuildingTower);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SiteRealizationBuildingTower other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoofZ != other.RoofZ) return false;
      if (Round != other.Round) return false;
      if (Goblin != other.Goblin) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoofZ != 0) hash ^= RoofZ.GetHashCode();
      if (Round != false) hash ^= Round.GetHashCode();
      if (Goblin != false) hash ^= Goblin.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoofZ != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoofZ);
      }
      if (Round != false) {
        output.WriteRawTag(16);
        output.WriteBool(Round);
      }
      if (Goblin != false) {
        output.WriteRawTag(24);
        output.WriteBool(Goblin);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoofZ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoofZ);
      }
      if (Round != false) {
        size += 1 + 1;
      }
      if (Goblin != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SiteRealizationBuildingTower other) {
      if (other == null) {
        return;
      }
      if (other.RoofZ != 0) {
        RoofZ = other.RoofZ;
      }
      if (other.Round != false) {
        Round = other.Round;
      }
      if (other.Goblin != false) {
        Goblin = other.Goblin;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoofZ = input.ReadInt32();
            break;
          }
          case 16: {
            Round = input.ReadBool();
            break;
          }
          case 24: {
            Goblin = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TrenchSpoke : pb::IMessage<TrenchSpoke> {
    private static readonly pb::MessageParser<TrenchSpoke> _parser = new pb::MessageParser<TrenchSpoke>(() => new TrenchSpoke());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrenchSpoke> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrenchSpoke() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrenchSpoke(TrenchSpoke other) : this() {
      moundStart_ = other.moundStart_;
      trenchStart_ = other.trenchStart_;
      trenchEnd_ = other.trenchEnd_;
      moundEnd_ = other.moundEnd_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrenchSpoke Clone() {
      return new TrenchSpoke(this);
    }

    /// <summary>Field number for the "mound_start" field.</summary>
    public const int MoundStartFieldNumber = 1;
    private int moundStart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MoundStart {
      get { return moundStart_; }
      set {
        moundStart_ = value;
      }
    }

    /// <summary>Field number for the "trench_start" field.</summary>
    public const int TrenchStartFieldNumber = 2;
    private int trenchStart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TrenchStart {
      get { return trenchStart_; }
      set {
        trenchStart_ = value;
      }
    }

    /// <summary>Field number for the "trench_end" field.</summary>
    public const int TrenchEndFieldNumber = 3;
    private int trenchEnd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TrenchEnd {
      get { return trenchEnd_; }
      set {
        trenchEnd_ = value;
      }
    }

    /// <summary>Field number for the "mound_end" field.</summary>
    public const int MoundEndFieldNumber = 4;
    private int moundEnd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MoundEnd {
      get { return moundEnd_; }
      set {
        moundEnd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrenchSpoke);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrenchSpoke other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MoundStart != other.MoundStart) return false;
      if (TrenchStart != other.TrenchStart) return false;
      if (TrenchEnd != other.TrenchEnd) return false;
      if (MoundEnd != other.MoundEnd) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MoundStart != 0) hash ^= MoundStart.GetHashCode();
      if (TrenchStart != 0) hash ^= TrenchStart.GetHashCode();
      if (TrenchEnd != 0) hash ^= TrenchEnd.GetHashCode();
      if (MoundEnd != 0) hash ^= MoundEnd.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MoundStart != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MoundStart);
      }
      if (TrenchStart != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TrenchStart);
      }
      if (TrenchEnd != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TrenchEnd);
      }
      if (MoundEnd != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MoundEnd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MoundStart != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MoundStart);
      }
      if (TrenchStart != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TrenchStart);
      }
      if (TrenchEnd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TrenchEnd);
      }
      if (MoundEnd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MoundEnd);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrenchSpoke other) {
      if (other == null) {
        return;
      }
      if (other.MoundStart != 0) {
        MoundStart = other.MoundStart;
      }
      if (other.TrenchStart != 0) {
        TrenchStart = other.TrenchStart;
      }
      if (other.TrenchEnd != 0) {
        TrenchEnd = other.TrenchEnd;
      }
      if (other.MoundEnd != 0) {
        MoundEnd = other.MoundEnd;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MoundStart = input.ReadInt32();
            break;
          }
          case 16: {
            TrenchStart = input.ReadInt32();
            break;
          }
          case 24: {
            TrenchEnd = input.ReadInt32();
            break;
          }
          case 32: {
            MoundEnd = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SiteRealizationBuildingTrenches : pb::IMessage<SiteRealizationBuildingTrenches> {
    private static readonly pb::MessageParser<SiteRealizationBuildingTrenches> _parser = new pb::MessageParser<SiteRealizationBuildingTrenches>(() => new SiteRealizationBuildingTrenches());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SiteRealizationBuildingTrenches> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SiteRealizationBuildingTrenches() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SiteRealizationBuildingTrenches(SiteRealizationBuildingTrenches other) : this() {
      spokes_ = other.spokes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SiteRealizationBuildingTrenches Clone() {
      return new SiteRealizationBuildingTrenches(this);
    }

    /// <summary>Field number for the "spokes" field.</summary>
    public const int SpokesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::RemoteFortressReader.TrenchSpoke> _repeated_spokes_codec
        = pb::FieldCodec.ForMessage(10, global::RemoteFortressReader.TrenchSpoke.Parser);
    private readonly pbc::RepeatedField<global::RemoteFortressReader.TrenchSpoke> spokes_ = new pbc::RepeatedField<global::RemoteFortressReader.TrenchSpoke>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RemoteFortressReader.TrenchSpoke> Spokes {
      get { return spokes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SiteRealizationBuildingTrenches);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SiteRealizationBuildingTrenches other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!spokes_.Equals(other.spokes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= spokes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      spokes_.WriteTo(output, _repeated_spokes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += spokes_.CalculateSize(_repeated_spokes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SiteRealizationBuildingTrenches other) {
      if (other == null) {
        return;
      }
      spokes_.Add(other.spokes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            spokes_.AddEntriesFrom(input, _repeated_spokes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SiteRealizationBuilding : pb::IMessage<SiteRealizationBuilding> {
    private static readonly pb::MessageParser<SiteRealizationBuilding> _parser = new pb::MessageParser<SiteRealizationBuilding>(() => new SiteRealizationBuilding());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SiteRealizationBuilding> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SiteRealizationBuilding() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SiteRealizationBuilding(SiteRealizationBuilding other) : this() {
      id_ = other.id_;
      type_ = other.type_;
      minX_ = other.minX_;
      minY_ = other.minY_;
      maxX_ = other.maxX_;
      maxY_ = other.maxY_;
      Material = other.material_ != null ? other.Material.Clone() : null;
      WallInfo = other.wallInfo_ != null ? other.WallInfo.Clone() : null;
      TowerInfo = other.towerInfo_ != null ? other.TowerInfo.Clone() : null;
      TrenchInfo = other.trenchInfo_ != null ? other.TrenchInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SiteRealizationBuilding Clone() {
      return new SiteRealizationBuilding(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::RemoteFortressReader.SiteRealizationBuildingType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RemoteFortressReader.SiteRealizationBuildingType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "min_x" field.</summary>
    public const int MinXFieldNumber = 3;
    private int minX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinX {
      get { return minX_; }
      set {
        minX_ = value;
      }
    }

    /// <summary>Field number for the "min_y" field.</summary>
    public const int MinYFieldNumber = 4;
    private int minY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinY {
      get { return minY_; }
      set {
        minY_ = value;
      }
    }

    /// <summary>Field number for the "max_x" field.</summary>
    public const int MaxXFieldNumber = 5;
    private int maxX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxX {
      get { return maxX_; }
      set {
        maxX_ = value;
      }
    }

    /// <summary>Field number for the "max_y" field.</summary>
    public const int MaxYFieldNumber = 6;
    private int maxY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxY {
      get { return maxY_; }
      set {
        maxY_ = value;
      }
    }

    /// <summary>Field number for the "material" field.</summary>
    public const int MaterialFieldNumber = 7;
    private global::RemoteFortressReader.MatPair material_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RemoteFortressReader.MatPair Material {
      get { return material_; }
      set {
        material_ = value;
      }
    }

    /// <summary>Field number for the "wall_info" field.</summary>
    public const int WallInfoFieldNumber = 8;
    private global::RemoteFortressReader.SiteRealizationBuildingWall wallInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RemoteFortressReader.SiteRealizationBuildingWall WallInfo {
      get { return wallInfo_; }
      set {
        wallInfo_ = value;
      }
    }

    /// <summary>Field number for the "tower_info" field.</summary>
    public const int TowerInfoFieldNumber = 9;
    private global::RemoteFortressReader.SiteRealizationBuildingTower towerInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RemoteFortressReader.SiteRealizationBuildingTower TowerInfo {
      get { return towerInfo_; }
      set {
        towerInfo_ = value;
      }
    }

    /// <summary>Field number for the "trench_info" field.</summary>
    public const int TrenchInfoFieldNumber = 10;
    private global::RemoteFortressReader.SiteRealizationBuildingTrenches trenchInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RemoteFortressReader.SiteRealizationBuildingTrenches TrenchInfo {
      get { return trenchInfo_; }
      set {
        trenchInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SiteRealizationBuilding);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SiteRealizationBuilding other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      if (MinX != other.MinX) return false;
      if (MinY != other.MinY) return false;
      if (MaxX != other.MaxX) return false;
      if (MaxY != other.MaxY) return false;
      if (!object.Equals(Material, other.Material)) return false;
      if (!object.Equals(WallInfo, other.WallInfo)) return false;
      if (!object.Equals(TowerInfo, other.TowerInfo)) return false;
      if (!object.Equals(TrenchInfo, other.TrenchInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (MinX != 0) hash ^= MinX.GetHashCode();
      if (MinY != 0) hash ^= MinY.GetHashCode();
      if (MaxX != 0) hash ^= MaxX.GetHashCode();
      if (MaxY != 0) hash ^= MaxY.GetHashCode();
      if (material_ != null) hash ^= Material.GetHashCode();
      if (wallInfo_ != null) hash ^= WallInfo.GetHashCode();
      if (towerInfo_ != null) hash ^= TowerInfo.GetHashCode();
      if (trenchInfo_ != null) hash ^= TrenchInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (MinX != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MinX);
      }
      if (MinY != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MinY);
      }
      if (MaxX != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MaxX);
      }
      if (MaxY != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MaxY);
      }
      if (material_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Material);
      }
      if (wallInfo_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(WallInfo);
      }
      if (towerInfo_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(TowerInfo);
      }
      if (trenchInfo_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(TrenchInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (MinX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinX);
      }
      if (MinY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinY);
      }
      if (MaxX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxX);
      }
      if (MaxY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxY);
      }
      if (material_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Material);
      }
      if (wallInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WallInfo);
      }
      if (towerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TowerInfo);
      }
      if (trenchInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrenchInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SiteRealizationBuilding other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.MinX != 0) {
        MinX = other.MinX;
      }
      if (other.MinY != 0) {
        MinY = other.MinY;
      }
      if (other.MaxX != 0) {
        MaxX = other.MaxX;
      }
      if (other.MaxY != 0) {
        MaxY = other.MaxY;
      }
      if (other.material_ != null) {
        if (material_ == null) {
          material_ = new global::RemoteFortressReader.MatPair();
        }
        Material.MergeFrom(other.Material);
      }
      if (other.wallInfo_ != null) {
        if (wallInfo_ == null) {
          wallInfo_ = new global::RemoteFortressReader.SiteRealizationBuildingWall();
        }
        WallInfo.MergeFrom(other.WallInfo);
      }
      if (other.towerInfo_ != null) {
        if (towerInfo_ == null) {
          towerInfo_ = new global::RemoteFortressReader.SiteRealizationBuildingTower();
        }
        TowerInfo.MergeFrom(other.TowerInfo);
      }
      if (other.trenchInfo_ != null) {
        if (trenchInfo_ == null) {
          trenchInfo_ = new global::RemoteFortressReader.SiteRealizationBuildingTrenches();
        }
        TrenchInfo.MergeFrom(other.TrenchInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            type_ = (global::RemoteFortressReader.SiteRealizationBuildingType) input.ReadEnum();
            break;
          }
          case 24: {
            MinX = input.ReadInt32();
            break;
          }
          case 32: {
            MinY = input.ReadInt32();
            break;
          }
          case 40: {
            MaxX = input.ReadInt32();
            break;
          }
          case 48: {
            MaxY = input.ReadInt32();
            break;
          }
          case 58: {
            if (material_ == null) {
              material_ = new global::RemoteFortressReader.MatPair();
            }
            input.ReadMessage(material_);
            break;
          }
          case 66: {
            if (wallInfo_ == null) {
              wallInfo_ = new global::RemoteFortressReader.SiteRealizationBuildingWall();
            }
            input.ReadMessage(wallInfo_);
            break;
          }
          case 74: {
            if (towerInfo_ == null) {
              towerInfo_ = new global::RemoteFortressReader.SiteRealizationBuildingTower();
            }
            input.ReadMessage(towerInfo_);
            break;
          }
          case 82: {
            if (trenchInfo_ == null) {
              trenchInfo_ = new global::RemoteFortressReader.SiteRealizationBuildingTrenches();
            }
            input.ReadMessage(trenchInfo_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegionTile : pb::IMessage<RegionTile> {
    private static readonly pb::MessageParser<RegionTile> _parser = new pb::MessageParser<RegionTile>(() => new RegionTile());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegionTile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionTile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionTile(RegionTile other) : this() {
      elevation_ = other.elevation_;
      rainfall_ = other.rainfall_;
      vegetation_ = other.vegetation_;
      temperature_ = other.temperature_;
      evilness_ = other.evilness_;
      drainage_ = other.drainage_;
      volcanism_ = other.volcanism_;
      savagery_ = other.savagery_;
      salinity_ = other.salinity_;
      RiverTiles = other.riverTiles_ != null ? other.RiverTiles.Clone() : null;
      waterElevation_ = other.waterElevation_;
      SurfaceMaterial = other.surfaceMaterial_ != null ? other.SurfaceMaterial.Clone() : null;
      plantMaterials_ = other.plantMaterials_.Clone();
      buildings_ = other.buildings_.Clone();
      stoneMaterials_ = other.stoneMaterials_.Clone();
      treeMaterials_ = other.treeMaterials_.Clone();
      snow_ = other.snow_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionTile Clone() {
      return new RegionTile(this);
    }

    /// <summary>Field number for the "elevation" field.</summary>
    public const int ElevationFieldNumber = 1;
    private int elevation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Elevation {
      get { return elevation_; }
      set {
        elevation_ = value;
      }
    }

    /// <summary>Field number for the "rainfall" field.</summary>
    public const int RainfallFieldNumber = 2;
    private int rainfall_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rainfall {
      get { return rainfall_; }
      set {
        rainfall_ = value;
      }
    }

    /// <summary>Field number for the "vegetation" field.</summary>
    public const int VegetationFieldNumber = 3;
    private int vegetation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Vegetation {
      get { return vegetation_; }
      set {
        vegetation_ = value;
      }
    }

    /// <summary>Field number for the "temperature" field.</summary>
    public const int TemperatureFieldNumber = 4;
    private int temperature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Temperature {
      get { return temperature_; }
      set {
        temperature_ = value;
      }
    }

    /// <summary>Field number for the "evilness" field.</summary>
    public const int EvilnessFieldNumber = 5;
    private int evilness_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Evilness {
      get { return evilness_; }
      set {
        evilness_ = value;
      }
    }

    /// <summary>Field number for the "drainage" field.</summary>
    public const int DrainageFieldNumber = 6;
    private int drainage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Drainage {
      get { return drainage_; }
      set {
        drainage_ = value;
      }
    }

    /// <summary>Field number for the "volcanism" field.</summary>
    public const int VolcanismFieldNumber = 7;
    private int volcanism_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Volcanism {
      get { return volcanism_; }
      set {
        volcanism_ = value;
      }
    }

    /// <summary>Field number for the "savagery" field.</summary>
    public const int SavageryFieldNumber = 8;
    private int savagery_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Savagery {
      get { return savagery_; }
      set {
        savagery_ = value;
      }
    }

    /// <summary>Field number for the "salinity" field.</summary>
    public const int SalinityFieldNumber = 9;
    private int salinity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Salinity {
      get { return salinity_; }
      set {
        salinity_ = value;
      }
    }

    /// <summary>Field number for the "river_tiles" field.</summary>
    public const int RiverTilesFieldNumber = 10;
    private global::RemoteFortressReader.RiverTile riverTiles_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RemoteFortressReader.RiverTile RiverTiles {
      get { return riverTiles_; }
      set {
        riverTiles_ = value;
      }
    }

    /// <summary>Field number for the "water_elevation" field.</summary>
    public const int WaterElevationFieldNumber = 11;
    private int waterElevation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WaterElevation {
      get { return waterElevation_; }
      set {
        waterElevation_ = value;
      }
    }

    /// <summary>Field number for the "surface_material" field.</summary>
    public const int SurfaceMaterialFieldNumber = 12;
    private global::RemoteFortressReader.MatPair surfaceMaterial_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RemoteFortressReader.MatPair SurfaceMaterial {
      get { return surfaceMaterial_; }
      set {
        surfaceMaterial_ = value;
      }
    }

    /// <summary>Field number for the "plant_materials" field.</summary>
    public const int PlantMaterialsFieldNumber = 13;
    private static readonly pb::FieldCodec<global::RemoteFortressReader.MatPair> _repeated_plantMaterials_codec
        = pb::FieldCodec.ForMessage(106, global::RemoteFortressReader.MatPair.Parser);
    private readonly pbc::RepeatedField<global::RemoteFortressReader.MatPair> plantMaterials_ = new pbc::RepeatedField<global::RemoteFortressReader.MatPair>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RemoteFortressReader.MatPair> PlantMaterials {
      get { return plantMaterials_; }
    }

    /// <summary>Field number for the "buildings" field.</summary>
    public const int BuildingsFieldNumber = 14;
    private static readonly pb::FieldCodec<global::RemoteFortressReader.SiteRealizationBuilding> _repeated_buildings_codec
        = pb::FieldCodec.ForMessage(114, global::RemoteFortressReader.SiteRealizationBuilding.Parser);
    private readonly pbc::RepeatedField<global::RemoteFortressReader.SiteRealizationBuilding> buildings_ = new pbc::RepeatedField<global::RemoteFortressReader.SiteRealizationBuilding>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RemoteFortressReader.SiteRealizationBuilding> Buildings {
      get { return buildings_; }
    }

    /// <summary>Field number for the "stone_materials" field.</summary>
    public const int StoneMaterialsFieldNumber = 15;
    private static readonly pb::FieldCodec<global::RemoteFortressReader.MatPair> _repeated_stoneMaterials_codec
        = pb::FieldCodec.ForMessage(122, global::RemoteFortressReader.MatPair.Parser);
    private readonly pbc::RepeatedField<global::RemoteFortressReader.MatPair> stoneMaterials_ = new pbc::RepeatedField<global::RemoteFortressReader.MatPair>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RemoteFortressReader.MatPair> StoneMaterials {
      get { return stoneMaterials_; }
    }

    /// <summary>Field number for the "tree_materials" field.</summary>
    public const int TreeMaterialsFieldNumber = 16;
    private static readonly pb::FieldCodec<global::RemoteFortressReader.MatPair> _repeated_treeMaterials_codec
        = pb::FieldCodec.ForMessage(130, global::RemoteFortressReader.MatPair.Parser);
    private readonly pbc::RepeatedField<global::RemoteFortressReader.MatPair> treeMaterials_ = new pbc::RepeatedField<global::RemoteFortressReader.MatPair>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RemoteFortressReader.MatPair> TreeMaterials {
      get { return treeMaterials_; }
    }

    /// <summary>Field number for the "snow" field.</summary>
    public const int SnowFieldNumber = 17;
    private int snow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Snow {
      get { return snow_; }
      set {
        snow_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegionTile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegionTile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Elevation != other.Elevation) return false;
      if (Rainfall != other.Rainfall) return false;
      if (Vegetation != other.Vegetation) return false;
      if (Temperature != other.Temperature) return false;
      if (Evilness != other.Evilness) return false;
      if (Drainage != other.Drainage) return false;
      if (Volcanism != other.Volcanism) return false;
      if (Savagery != other.Savagery) return false;
      if (Salinity != other.Salinity) return false;
      if (!object.Equals(RiverTiles, other.RiverTiles)) return false;
      if (WaterElevation != other.WaterElevation) return false;
      if (!object.Equals(SurfaceMaterial, other.SurfaceMaterial)) return false;
      if(!plantMaterials_.Equals(other.plantMaterials_)) return false;
      if(!buildings_.Equals(other.buildings_)) return false;
      if(!stoneMaterials_.Equals(other.stoneMaterials_)) return false;
      if(!treeMaterials_.Equals(other.treeMaterials_)) return false;
      if (Snow != other.Snow) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Elevation != 0) hash ^= Elevation.GetHashCode();
      if (Rainfall != 0) hash ^= Rainfall.GetHashCode();
      if (Vegetation != 0) hash ^= Vegetation.GetHashCode();
      if (Temperature != 0) hash ^= Temperature.GetHashCode();
      if (Evilness != 0) hash ^= Evilness.GetHashCode();
      if (Drainage != 0) hash ^= Drainage.GetHashCode();
      if (Volcanism != 0) hash ^= Volcanism.GetHashCode();
      if (Savagery != 0) hash ^= Savagery.GetHashCode();
      if (Salinity != 0) hash ^= Salinity.GetHashCode();
      if (riverTiles_ != null) hash ^= RiverTiles.GetHashCode();
      if (WaterElevation != 0) hash ^= WaterElevation.GetHashCode();
      if (surfaceMaterial_ != null) hash ^= SurfaceMaterial.GetHashCode();
      hash ^= plantMaterials_.GetHashCode();
      hash ^= buildings_.GetHashCode();
      hash ^= stoneMaterials_.GetHashCode();
      hash ^= treeMaterials_.GetHashCode();
      if (Snow != 0) hash ^= Snow.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Elevation != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Elevation);
      }
      if (Rainfall != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Rainfall);
      }
      if (Vegetation != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Vegetation);
      }
      if (Temperature != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Temperature);
      }
      if (Evilness != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Evilness);
      }
      if (Drainage != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Drainage);
      }
      if (Volcanism != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Volcanism);
      }
      if (Savagery != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Savagery);
      }
      if (Salinity != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Salinity);
      }
      if (riverTiles_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(RiverTiles);
      }
      if (WaterElevation != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(WaterElevation);
      }
      if (surfaceMaterial_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(SurfaceMaterial);
      }
      plantMaterials_.WriteTo(output, _repeated_plantMaterials_codec);
      buildings_.WriteTo(output, _repeated_buildings_codec);
      stoneMaterials_.WriteTo(output, _repeated_stoneMaterials_codec);
      treeMaterials_.WriteTo(output, _repeated_treeMaterials_codec);
      if (Snow != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Snow);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Elevation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Elevation);
      }
      if (Rainfall != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rainfall);
      }
      if (Vegetation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Vegetation);
      }
      if (Temperature != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Temperature);
      }
      if (Evilness != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Evilness);
      }
      if (Drainage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Drainage);
      }
      if (Volcanism != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Volcanism);
      }
      if (Savagery != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Savagery);
      }
      if (Salinity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Salinity);
      }
      if (riverTiles_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RiverTiles);
      }
      if (WaterElevation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WaterElevation);
      }
      if (surfaceMaterial_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SurfaceMaterial);
      }
      size += plantMaterials_.CalculateSize(_repeated_plantMaterials_codec);
      size += buildings_.CalculateSize(_repeated_buildings_codec);
      size += stoneMaterials_.CalculateSize(_repeated_stoneMaterials_codec);
      size += treeMaterials_.CalculateSize(_repeated_treeMaterials_codec);
      if (Snow != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Snow);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegionTile other) {
      if (other == null) {
        return;
      }
      if (other.Elevation != 0) {
        Elevation = other.Elevation;
      }
      if (other.Rainfall != 0) {
        Rainfall = other.Rainfall;
      }
      if (other.Vegetation != 0) {
        Vegetation = other.Vegetation;
      }
      if (other.Temperature != 0) {
        Temperature = other.Temperature;
      }
      if (other.Evilness != 0) {
        Evilness = other.Evilness;
      }
      if (other.Drainage != 0) {
        Drainage = other.Drainage;
      }
      if (other.Volcanism != 0) {
        Volcanism = other.Volcanism;
      }
      if (other.Savagery != 0) {
        Savagery = other.Savagery;
      }
      if (other.Salinity != 0) {
        Salinity = other.Salinity;
      }
      if (other.riverTiles_ != null) {
        if (riverTiles_ == null) {
          riverTiles_ = new global::RemoteFortressReader.RiverTile();
        }
        RiverTiles.MergeFrom(other.RiverTiles);
      }
      if (other.WaterElevation != 0) {
        WaterElevation = other.WaterElevation;
      }
      if (other.surfaceMaterial_ != null) {
        if (surfaceMaterial_ == null) {
          surfaceMaterial_ = new global::RemoteFortressReader.MatPair();
        }
        SurfaceMaterial.MergeFrom(other.SurfaceMaterial);
      }
      plantMaterials_.Add(other.plantMaterials_);
      buildings_.Add(other.buildings_);
      stoneMaterials_.Add(other.stoneMaterials_);
      treeMaterials_.Add(other.treeMaterials_);
      if (other.Snow != 0) {
        Snow = other.Snow;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Elevation = input.ReadInt32();
            break;
          }
          case 16: {
            Rainfall = input.ReadInt32();
            break;
          }
          case 24: {
            Vegetation = input.ReadInt32();
            break;
          }
          case 32: {
            Temperature = input.ReadInt32();
            break;
          }
          case 40: {
            Evilness = input.ReadInt32();
            break;
          }
          case 48: {
            Drainage = input.ReadInt32();
            break;
          }
          case 56: {
            Volcanism = input.ReadInt32();
            break;
          }
          case 64: {
            Savagery = input.ReadInt32();
            break;
          }
          case 72: {
            Salinity = input.ReadInt32();
            break;
          }
          case 82: {
            if (riverTiles_ == null) {
              riverTiles_ = new global::RemoteFortressReader.RiverTile();
            }
            input.ReadMessage(riverTiles_);
            break;
          }
          case 88: {
            WaterElevation = input.ReadInt32();
            break;
          }
          case 98: {
            if (surfaceMaterial_ == null) {
              surfaceMaterial_ = new global::RemoteFortressReader.MatPair();
            }
            input.ReadMessage(surfaceMaterial_);
            break;
          }
          case 106: {
            plantMaterials_.AddEntriesFrom(input, _repeated_plantMaterials_codec);
            break;
          }
          case 114: {
            buildings_.AddEntriesFrom(input, _repeated_buildings_codec);
            break;
          }
          case 122: {
            stoneMaterials_.AddEntriesFrom(input, _repeated_stoneMaterials_codec);
            break;
          }
          case 130: {
            treeMaterials_.AddEntriesFrom(input, _repeated_treeMaterials_codec);
            break;
          }
          case 136: {
            Snow = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegionMap : pb::IMessage<RegionMap> {
    private static readonly pb::MessageParser<RegionMap> _parser = new pb::MessageParser<RegionMap>(() => new RegionMap());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegionMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionMap(RegionMap other) : this() {
      mapX_ = other.mapX_;
      mapY_ = other.mapY_;
      name_ = other.name_;
      nameEnglish_ = other.nameEnglish_;
      tiles_ = other.tiles_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionMap Clone() {
      return new RegionMap(this);
    }

    /// <summary>Field number for the "map_x" field.</summary>
    public const int MapXFieldNumber = 1;
    private int mapX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapX {
      get { return mapX_; }
      set {
        mapX_ = value;
      }
    }

    /// <summary>Field number for the "map_y" field.</summary>
    public const int MapYFieldNumber = 2;
    private int mapY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapY {
      get { return mapY_; }
      set {
        mapY_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name_english" field.</summary>
    public const int NameEnglishFieldNumber = 4;
    private string nameEnglish_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NameEnglish {
      get { return nameEnglish_; }
      set {
        nameEnglish_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tiles" field.</summary>
    public const int TilesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::RemoteFortressReader.RegionTile> _repeated_tiles_codec
        = pb::FieldCodec.ForMessage(42, global::RemoteFortressReader.RegionTile.Parser);
    private readonly pbc::RepeatedField<global::RemoteFortressReader.RegionTile> tiles_ = new pbc::RepeatedField<global::RemoteFortressReader.RegionTile>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RemoteFortressReader.RegionTile> Tiles {
      get { return tiles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegionMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegionMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MapX != other.MapX) return false;
      if (MapY != other.MapY) return false;
      if (Name != other.Name) return false;
      if (NameEnglish != other.NameEnglish) return false;
      if(!tiles_.Equals(other.tiles_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MapX != 0) hash ^= MapX.GetHashCode();
      if (MapY != 0) hash ^= MapY.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (NameEnglish.Length != 0) hash ^= NameEnglish.GetHashCode();
      hash ^= tiles_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapX != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MapX);
      }
      if (MapY != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MapY);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (NameEnglish.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(NameEnglish);
      }
      tiles_.WriteTo(output, _repeated_tiles_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapX);
      }
      if (MapY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapY);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (NameEnglish.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NameEnglish);
      }
      size += tiles_.CalculateSize(_repeated_tiles_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegionMap other) {
      if (other == null) {
        return;
      }
      if (other.MapX != 0) {
        MapX = other.MapX;
      }
      if (other.MapY != 0) {
        MapY = other.MapY;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.NameEnglish.Length != 0) {
        NameEnglish = other.NameEnglish;
      }
      tiles_.Add(other.tiles_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MapX = input.ReadInt32();
            break;
          }
          case 16: {
            MapY = input.ReadInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            NameEnglish = input.ReadString();
            break;
          }
          case 42: {
            tiles_.AddEntriesFrom(input, _repeated_tiles_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegionMaps : pb::IMessage<RegionMaps> {
    private static readonly pb::MessageParser<RegionMaps> _parser = new pb::MessageParser<RegionMaps>(() => new RegionMaps());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegionMaps> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionMaps() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionMaps(RegionMaps other) : this() {
      worldMaps_ = other.worldMaps_.Clone();
      regionMaps_ = other.regionMaps_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionMaps Clone() {
      return new RegionMaps(this);
    }

    /// <summary>Field number for the "world_maps" field.</summary>
    public const int WorldMapsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::RemoteFortressReader.WorldMap> _repeated_worldMaps_codec
        = pb::FieldCodec.ForMessage(10, global::RemoteFortressReader.WorldMap.Parser);
    private readonly pbc::RepeatedField<global::RemoteFortressReader.WorldMap> worldMaps_ = new pbc::RepeatedField<global::RemoteFortressReader.WorldMap>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RemoteFortressReader.WorldMap> WorldMaps {
      get { return worldMaps_; }
    }

    /// <summary>Field number for the "region_maps" field.</summary>
    public const int RegionMaps_FieldNumber = 2;
    private static readonly pb::FieldCodec<global::RemoteFortressReader.RegionMap> _repeated_regionMaps_codec
        = pb::FieldCodec.ForMessage(18, global::RemoteFortressReader.RegionMap.Parser);
    private readonly pbc::RepeatedField<global::RemoteFortressReader.RegionMap> regionMaps_ = new pbc::RepeatedField<global::RemoteFortressReader.RegionMap>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RemoteFortressReader.RegionMap> RegionMaps_ {
      get { return regionMaps_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegionMaps);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegionMaps other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!worldMaps_.Equals(other.worldMaps_)) return false;
      if(!regionMaps_.Equals(other.regionMaps_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= worldMaps_.GetHashCode();
      hash ^= regionMaps_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      worldMaps_.WriteTo(output, _repeated_worldMaps_codec);
      regionMaps_.WriteTo(output, _repeated_regionMaps_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += worldMaps_.CalculateSize(_repeated_worldMaps_codec);
      size += regionMaps_.CalculateSize(_repeated_regionMaps_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegionMaps other) {
      if (other == null) {
        return;
      }
      worldMaps_.Add(other.worldMaps_);
      regionMaps_.Add(other.regionMaps_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            worldMaps_.AddEntriesFrom(input, _repeated_worldMaps_codec);
            break;
          }
          case 18: {
            regionMaps_.AddEntriesFrom(input, _repeated_regionMaps_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PatternDescriptor : pb::IMessage<PatternDescriptor> {
    private static readonly pb::MessageParser<PatternDescriptor> _parser = new pb::MessageParser<PatternDescriptor>(() => new PatternDescriptor());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PatternDescriptor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PatternDescriptor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PatternDescriptor(PatternDescriptor other) : this() {
      id_ = other.id_;
      colors_ = other.colors_.Clone();
      pattern_ = other.pattern_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PatternDescriptor Clone() {
      return new PatternDescriptor(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "colors" field.</summary>
    public const int ColorsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::RemoteFortressReader.ColorDefinition> _repeated_colors_codec
        = pb::FieldCodec.ForMessage(18, global::RemoteFortressReader.ColorDefinition.Parser);
    private readonly pbc::RepeatedField<global::RemoteFortressReader.ColorDefinition> colors_ = new pbc::RepeatedField<global::RemoteFortressReader.ColorDefinition>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RemoteFortressReader.ColorDefinition> Colors {
      get { return colors_; }
    }

    /// <summary>Field number for the "pattern" field.</summary>
    public const int PatternFieldNumber = 3;
    private global::RemoteFortressReader.PatternType pattern_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RemoteFortressReader.PatternType Pattern {
      get { return pattern_; }
      set {
        pattern_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PatternDescriptor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PatternDescriptor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!colors_.Equals(other.colors_)) return false;
      if (Pattern != other.Pattern) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      hash ^= colors_.GetHashCode();
      if (Pattern != 0) hash ^= Pattern.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      colors_.WriteTo(output, _repeated_colors_codec);
      if (Pattern != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Pattern);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      size += colors_.CalculateSize(_repeated_colors_codec);
      if (Pattern != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Pattern);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PatternDescriptor other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      colors_.Add(other.colors_);
      if (other.Pattern != 0) {
        Pattern = other.Pattern;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            colors_.AddEntriesFrom(input, _repeated_colors_codec);
            break;
          }
          case 24: {
            pattern_ = (global::RemoteFortressReader.PatternType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ColorModifierRaw : pb::IMessage<ColorModifierRaw> {
    private static readonly pb::MessageParser<ColorModifierRaw> _parser = new pb::MessageParser<ColorModifierRaw>(() => new ColorModifierRaw());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ColorModifierRaw> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColorModifierRaw() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColorModifierRaw(ColorModifierRaw other) : this() {
      patterns_ = other.patterns_.Clone();
      bodyPartId_ = other.bodyPartId_.Clone();
      tissueLayerId_ = other.tissueLayerId_.Clone();
      startDate_ = other.startDate_;
      endDate_ = other.endDate_;
      part_ = other.part_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColorModifierRaw Clone() {
      return new ColorModifierRaw(this);
    }

    /// <summary>Field number for the "patterns" field.</summary>
    public const int PatternsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::RemoteFortressReader.PatternDescriptor> _repeated_patterns_codec
        = pb::FieldCodec.ForMessage(10, global::RemoteFortressReader.PatternDescriptor.Parser);
    private readonly pbc::RepeatedField<global::RemoteFortressReader.PatternDescriptor> patterns_ = new pbc::RepeatedField<global::RemoteFortressReader.PatternDescriptor>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RemoteFortressReader.PatternDescriptor> Patterns {
      get { return patterns_; }
    }

    /// <summary>Field number for the "body_part_id" field.</summary>
    public const int BodyPartIdFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_bodyPartId_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> bodyPartId_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> BodyPartId {
      get { return bodyPartId_; }
    }

    /// <summary>Field number for the "tissue_layer_id" field.</summary>
    public const int TissueLayerIdFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_tissueLayerId_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> tissueLayerId_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TissueLayerId {
      get { return tissueLayerId_; }
    }

    /// <summary>Field number for the "start_date" field.</summary>
    public const int StartDateFieldNumber = 4;
    private int startDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartDate {
      get { return startDate_; }
      set {
        startDate_ = value;
      }
    }

    /// <summary>Field number for the "end_date" field.</summary>
    public const int EndDateFieldNumber = 5;
    private int endDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndDate {
      get { return endDate_; }
      set {
        endDate_ = value;
      }
    }

    /// <summary>Field number for the "part" field.</summary>
    public const int PartFieldNumber = 6;
    private string part_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Part {
      get { return part_; }
      set {
        part_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ColorModifierRaw);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ColorModifierRaw other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!patterns_.Equals(other.patterns_)) return false;
      if(!bodyPartId_.Equals(other.bodyPartId_)) return false;
      if(!tissueLayerId_.Equals(other.tissueLayerId_)) return false;
      if (StartDate != other.StartDate) return false;
      if (EndDate != other.EndDate) return false;
      if (Part != other.Part) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= patterns_.GetHashCode();
      hash ^= bodyPartId_.GetHashCode();
      hash ^= tissueLayerId_.GetHashCode();
      if (StartDate != 0) hash ^= StartDate.GetHashCode();
      if (EndDate != 0) hash ^= EndDate.GetHashCode();
      if (Part.Length != 0) hash ^= Part.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      patterns_.WriteTo(output, _repeated_patterns_codec);
      bodyPartId_.WriteTo(output, _repeated_bodyPartId_codec);
      tissueLayerId_.WriteTo(output, _repeated_tissueLayerId_codec);
      if (StartDate != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(StartDate);
      }
      if (EndDate != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(EndDate);
      }
      if (Part.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Part);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += patterns_.CalculateSize(_repeated_patterns_codec);
      size += bodyPartId_.CalculateSize(_repeated_bodyPartId_codec);
      size += tissueLayerId_.CalculateSize(_repeated_tissueLayerId_codec);
      if (StartDate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartDate);
      }
      if (EndDate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndDate);
      }
      if (Part.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Part);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ColorModifierRaw other) {
      if (other == null) {
        return;
      }
      patterns_.Add(other.patterns_);
      bodyPartId_.Add(other.bodyPartId_);
      tissueLayerId_.Add(other.tissueLayerId_);
      if (other.StartDate != 0) {
        StartDate = other.StartDate;
      }
      if (other.EndDate != 0) {
        EndDate = other.EndDate;
      }
      if (other.Part.Length != 0) {
        Part = other.Part;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            patterns_.AddEntriesFrom(input, _repeated_patterns_codec);
            break;
          }
          case 18:
          case 16: {
            bodyPartId_.AddEntriesFrom(input, _repeated_bodyPartId_codec);
            break;
          }
          case 26:
          case 24: {
            tissueLayerId_.AddEntriesFrom(input, _repeated_tissueLayerId_codec);
            break;
          }
          case 32: {
            StartDate = input.ReadInt32();
            break;
          }
          case 40: {
            EndDate = input.ReadInt32();
            break;
          }
          case 50: {
            Part = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BodyPartLayerRaw : pb::IMessage<BodyPartLayerRaw> {
    private static readonly pb::MessageParser<BodyPartLayerRaw> _parser = new pb::MessageParser<BodyPartLayerRaw>(() => new BodyPartLayerRaw());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BodyPartLayerRaw> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BodyPartLayerRaw() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BodyPartLayerRaw(BodyPartLayerRaw other) : this() {
      layerName_ = other.layerName_;
      tissueId_ = other.tissueId_;
      layerDepth_ = other.layerDepth_;
      bpModifiers_ = other.bpModifiers_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BodyPartLayerRaw Clone() {
      return new BodyPartLayerRaw(this);
    }

    /// <summary>Field number for the "layer_name" field.</summary>
    public const int LayerNameFieldNumber = 1;
    private string layerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LayerName {
      get { return layerName_; }
      set {
        layerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tissue_id" field.</summary>
    public const int TissueIdFieldNumber = 2;
    private int tissueId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TissueId {
      get { return tissueId_; }
      set {
        tissueId_ = value;
      }
    }

    /// <summary>Field number for the "layer_depth" field.</summary>
    public const int LayerDepthFieldNumber = 3;
    private int layerDepth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LayerDepth {
      get { return layerDepth_; }
      set {
        layerDepth_ = value;
      }
    }

    /// <summary>Field number for the "bp_modifiers" field.</summary>
    public const int BpModifiersFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_bpModifiers_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> bpModifiers_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> BpModifiers {
      get { return bpModifiers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BodyPartLayerRaw);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BodyPartLayerRaw other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LayerName != other.LayerName) return false;
      if (TissueId != other.TissueId) return false;
      if (LayerDepth != other.LayerDepth) return false;
      if(!bpModifiers_.Equals(other.bpModifiers_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LayerName.Length != 0) hash ^= LayerName.GetHashCode();
      if (TissueId != 0) hash ^= TissueId.GetHashCode();
      if (LayerDepth != 0) hash ^= LayerDepth.GetHashCode();
      hash ^= bpModifiers_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LayerName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LayerName);
      }
      if (TissueId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TissueId);
      }
      if (LayerDepth != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LayerDepth);
      }
      bpModifiers_.WriteTo(output, _repeated_bpModifiers_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LayerName);
      }
      if (TissueId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TissueId);
      }
      if (LayerDepth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LayerDepth);
      }
      size += bpModifiers_.CalculateSize(_repeated_bpModifiers_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BodyPartLayerRaw other) {
      if (other == null) {
        return;
      }
      if (other.LayerName.Length != 0) {
        LayerName = other.LayerName;
      }
      if (other.TissueId != 0) {
        TissueId = other.TissueId;
      }
      if (other.LayerDepth != 0) {
        LayerDepth = other.LayerDepth;
      }
      bpModifiers_.Add(other.bpModifiers_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            LayerName = input.ReadString();
            break;
          }
          case 16: {
            TissueId = input.ReadInt32();
            break;
          }
          case 24: {
            LayerDepth = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            bpModifiers_.AddEntriesFrom(input, _repeated_bpModifiers_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BodyPartRaw : pb::IMessage<BodyPartRaw> {
    private static readonly pb::MessageParser<BodyPartRaw> _parser = new pb::MessageParser<BodyPartRaw>(() => new BodyPartRaw());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BodyPartRaw> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BodyPartRaw() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BodyPartRaw(BodyPartRaw other) : this() {
      token_ = other.token_;
      category_ = other.category_;
      parent_ = other.parent_;
      flags_ = other.flags_.Clone();
      layers_ = other.layers_.Clone();
      relsize_ = other.relsize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BodyPartRaw Clone() {
      return new BodyPartRaw(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "category" field.</summary>
    public const int CategoryFieldNumber = 2;
    private string category_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Category {
      get { return category_; }
      set {
        category_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 3;
    private int parent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Parent {
      get { return parent_; }
      set {
        parent_ = value;
      }
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 4;
    private static readonly pb::FieldCodec<bool> _repeated_flags_codec
        = pb::FieldCodec.ForBool(34);
    private readonly pbc::RepeatedField<bool> flags_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> Flags {
      get { return flags_; }
    }

    /// <summary>Field number for the "layers" field.</summary>
    public const int LayersFieldNumber = 5;
    private static readonly pb::FieldCodec<global::RemoteFortressReader.BodyPartLayerRaw> _repeated_layers_codec
        = pb::FieldCodec.ForMessage(42, global::RemoteFortressReader.BodyPartLayerRaw.Parser);
    private readonly pbc::RepeatedField<global::RemoteFortressReader.BodyPartLayerRaw> layers_ = new pbc::RepeatedField<global::RemoteFortressReader.BodyPartLayerRaw>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RemoteFortressReader.BodyPartLayerRaw> Layers {
      get { return layers_; }
    }

    /// <summary>Field number for the "relsize" field.</summary>
    public const int RelsizeFieldNumber = 6;
    private int relsize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Relsize {
      get { return relsize_; }
      set {
        relsize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BodyPartRaw);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BodyPartRaw other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (Category != other.Category) return false;
      if (Parent != other.Parent) return false;
      if(!flags_.Equals(other.flags_)) return false;
      if(!layers_.Equals(other.layers_)) return false;
      if (Relsize != other.Relsize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (Category.Length != 0) hash ^= Category.GetHashCode();
      if (Parent != 0) hash ^= Parent.GetHashCode();
      hash ^= flags_.GetHashCode();
      hash ^= layers_.GetHashCode();
      if (Relsize != 0) hash ^= Relsize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      if (Category.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Category);
      }
      if (Parent != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Parent);
      }
      flags_.WriteTo(output, _repeated_flags_codec);
      layers_.WriteTo(output, _repeated_layers_codec);
      if (Relsize != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Relsize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (Category.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Category);
      }
      if (Parent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Parent);
      }
      size += flags_.CalculateSize(_repeated_flags_codec);
      size += layers_.CalculateSize(_repeated_layers_codec);
      if (Relsize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Relsize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BodyPartRaw other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.Category.Length != 0) {
        Category = other.Category;
      }
      if (other.Parent != 0) {
        Parent = other.Parent;
      }
      flags_.Add(other.flags_);
      layers_.Add(other.layers_);
      if (other.Relsize != 0) {
        Relsize = other.Relsize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 18: {
            Category = input.ReadString();
            break;
          }
          case 24: {
            Parent = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            flags_.AddEntriesFrom(input, _repeated_flags_codec);
            break;
          }
          case 42: {
            layers_.AddEntriesFrom(input, _repeated_layers_codec);
            break;
          }
          case 48: {
            Relsize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BpAppearanceModifier : pb::IMessage<BpAppearanceModifier> {
    private static readonly pb::MessageParser<BpAppearanceModifier> _parser = new pb::MessageParser<BpAppearanceModifier>(() => new BpAppearanceModifier());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BpAppearanceModifier> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BpAppearanceModifier() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BpAppearanceModifier(BpAppearanceModifier other) : this() {
      type_ = other.type_;
      modMin_ = other.modMin_;
      modMax_ = other.modMax_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BpAppearanceModifier Clone() {
      return new BpAppearanceModifier(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mod_min" field.</summary>
    public const int ModMinFieldNumber = 2;
    private int modMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ModMin {
      get { return modMin_; }
      set {
        modMin_ = value;
      }
    }

    /// <summary>Field number for the "mod_max" field.</summary>
    public const int ModMaxFieldNumber = 3;
    private int modMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ModMax {
      get { return modMax_; }
      set {
        modMax_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BpAppearanceModifier);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BpAppearanceModifier other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (ModMin != other.ModMin) return false;
      if (ModMax != other.ModMax) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (ModMin != 0) hash ^= ModMin.GetHashCode();
      if (ModMax != 0) hash ^= ModMax.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (ModMin != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ModMin);
      }
      if (ModMax != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ModMax);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (ModMin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModMin);
      }
      if (ModMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModMax);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BpAppearanceModifier other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.ModMin != 0) {
        ModMin = other.ModMin;
      }
      if (other.ModMax != 0) {
        ModMax = other.ModMax;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 16: {
            ModMin = input.ReadInt32();
            break;
          }
          case 24: {
            ModMax = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TissueRaw : pb::IMessage<TissueRaw> {
    private static readonly pb::MessageParser<TissueRaw> _parser = new pb::MessageParser<TissueRaw>(() => new TissueRaw());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TissueRaw> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TissueRaw() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TissueRaw(TissueRaw other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      Material = other.material_ != null ? other.Material.Clone() : null;
      subordinateToTissue_ = other.subordinateToTissue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TissueRaw Clone() {
      return new TissueRaw(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "material" field.</summary>
    public const int MaterialFieldNumber = 3;
    private global::RemoteFortressReader.MatPair material_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RemoteFortressReader.MatPair Material {
      get { return material_; }
      set {
        material_ = value;
      }
    }

    /// <summary>Field number for the "subordinate_to_tissue" field.</summary>
    public const int SubordinateToTissueFieldNumber = 4;
    private string subordinateToTissue_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubordinateToTissue {
      get { return subordinateToTissue_; }
      set {
        subordinateToTissue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TissueRaw);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TissueRaw other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(Material, other.Material)) return false;
      if (SubordinateToTissue != other.SubordinateToTissue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (material_ != null) hash ^= Material.GetHashCode();
      if (SubordinateToTissue.Length != 0) hash ^= SubordinateToTissue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (material_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Material);
      }
      if (SubordinateToTissue.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SubordinateToTissue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (material_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Material);
      }
      if (SubordinateToTissue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubordinateToTissue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TissueRaw other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.material_ != null) {
        if (material_ == null) {
          material_ = new global::RemoteFortressReader.MatPair();
        }
        Material.MergeFrom(other.Material);
      }
      if (other.SubordinateToTissue.Length != 0) {
        SubordinateToTissue = other.SubordinateToTissue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            if (material_ == null) {
              material_ = new global::RemoteFortressReader.MatPair();
            }
            input.ReadMessage(material_);
            break;
          }
          case 34: {
            SubordinateToTissue = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CasteRaw : pb::IMessage<CasteRaw> {
    private static readonly pb::MessageParser<CasteRaw> _parser = new pb::MessageParser<CasteRaw>(() => new CasteRaw());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CasteRaw> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CasteRaw() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CasteRaw(CasteRaw other) : this() {
      index_ = other.index_;
      casteId_ = other.casteId_;
      casteName_ = other.casteName_.Clone();
      babyName_ = other.babyName_.Clone();
      childName_ = other.childName_.Clone();
      gender_ = other.gender_;
      bodyParts_ = other.bodyParts_.Clone();
      totalRelsize_ = other.totalRelsize_;
      modifiers_ = other.modifiers_.Clone();
      modifierIdx_ = other.modifierIdx_.Clone();
      partIdx_ = other.partIdx_.Clone();
      layerIdx_ = other.layerIdx_.Clone();
      bodyAppearanceModifiers_ = other.bodyAppearanceModifiers_.Clone();
      colorModifiers_ = other.colorModifiers_.Clone();
      description_ = other.description_;
      adultSize_ = other.adultSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CasteRaw Clone() {
      return new CasteRaw(this);
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "caste_id" field.</summary>
    public const int CasteIdFieldNumber = 2;
    private string casteId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CasteId {
      get { return casteId_; }
      set {
        casteId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "caste_name" field.</summary>
    public const int CasteNameFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_casteName_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> casteName_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> CasteName {
      get { return casteName_; }
    }

    /// <summary>Field number for the "baby_name" field.</summary>
    public const int BabyNameFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_babyName_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> babyName_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> BabyName {
      get { return babyName_; }
    }

    /// <summary>Field number for the "child_name" field.</summary>
    public const int ChildNameFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_childName_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> childName_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ChildName {
      get { return childName_; }
    }

    /// <summary>Field number for the "gender" field.</summary>
    public const int GenderFieldNumber = 6;
    private int gender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gender {
      get { return gender_; }
      set {
        gender_ = value;
      }
    }

    /// <summary>Field number for the "body_parts" field.</summary>
    public const int BodyPartsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::RemoteFortressReader.BodyPartRaw> _repeated_bodyParts_codec
        = pb::FieldCodec.ForMessage(58, global::RemoteFortressReader.BodyPartRaw.Parser);
    private readonly pbc::RepeatedField<global::RemoteFortressReader.BodyPartRaw> bodyParts_ = new pbc::RepeatedField<global::RemoteFortressReader.BodyPartRaw>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RemoteFortressReader.BodyPartRaw> BodyParts {
      get { return bodyParts_; }
    }

    /// <summary>Field number for the "total_relsize" field.</summary>
    public const int TotalRelsizeFieldNumber = 8;
    private int totalRelsize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalRelsize {
      get { return totalRelsize_; }
      set {
        totalRelsize_ = value;
      }
    }

    /// <summary>Field number for the "modifiers" field.</summary>
    public const int ModifiersFieldNumber = 9;
    private static readonly pb::FieldCodec<global::RemoteFortressReader.BpAppearanceModifier> _repeated_modifiers_codec
        = pb::FieldCodec.ForMessage(74, global::RemoteFortressReader.BpAppearanceModifier.Parser);
    private readonly pbc::RepeatedField<global::RemoteFortressReader.BpAppearanceModifier> modifiers_ = new pbc::RepeatedField<global::RemoteFortressReader.BpAppearanceModifier>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RemoteFortressReader.BpAppearanceModifier> Modifiers {
      get { return modifiers_; }
    }

    /// <summary>Field number for the "modifier_idx" field.</summary>
    public const int ModifierIdxFieldNumber = 10;
    private static readonly pb::FieldCodec<int> _repeated_modifierIdx_codec
        = pb::FieldCodec.ForInt32(82);
    private readonly pbc::RepeatedField<int> modifierIdx_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ModifierIdx {
      get { return modifierIdx_; }
    }

    /// <summary>Field number for the "part_idx" field.</summary>
    public const int PartIdxFieldNumber = 11;
    private static readonly pb::FieldCodec<int> _repeated_partIdx_codec
        = pb::FieldCodec.ForInt32(90);
    private readonly pbc::RepeatedField<int> partIdx_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PartIdx {
      get { return partIdx_; }
    }

    /// <summary>Field number for the "layer_idx" field.</summary>
    public const int LayerIdxFieldNumber = 12;
    private static readonly pb::FieldCodec<int> _repeated_layerIdx_codec
        = pb::FieldCodec.ForInt32(98);
    private readonly pbc::RepeatedField<int> layerIdx_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> LayerIdx {
      get { return layerIdx_; }
    }

    /// <summary>Field number for the "body_appearance_modifiers" field.</summary>
    public const int BodyAppearanceModifiersFieldNumber = 13;
    private static readonly pb::FieldCodec<global::RemoteFortressReader.BpAppearanceModifier> _repeated_bodyAppearanceModifiers_codec
        = pb::FieldCodec.ForMessage(106, global::RemoteFortressReader.BpAppearanceModifier.Parser);
    private readonly pbc::RepeatedField<global::RemoteFortressReader.BpAppearanceModifier> bodyAppearanceModifiers_ = new pbc::RepeatedField<global::RemoteFortressReader.BpAppearanceModifier>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RemoteFortressReader.BpAppearanceModifier> BodyAppearanceModifiers {
      get { return bodyAppearanceModifiers_; }
    }

    /// <summary>Field number for the "color_modifiers" field.</summary>
    public const int ColorModifiersFieldNumber = 14;
    private static readonly pb::FieldCodec<global::RemoteFortressReader.ColorModifierRaw> _repeated_colorModifiers_codec
        = pb::FieldCodec.ForMessage(114, global::RemoteFortressReader.ColorModifierRaw.Parser);
    private readonly pbc::RepeatedField<global::RemoteFortressReader.ColorModifierRaw> colorModifiers_ = new pbc::RepeatedField<global::RemoteFortressReader.ColorModifierRaw>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RemoteFortressReader.ColorModifierRaw> ColorModifiers {
      get { return colorModifiers_; }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 15;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "adult_size" field.</summary>
    public const int AdultSizeFieldNumber = 16;
    private int adultSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AdultSize {
      get { return adultSize_; }
      set {
        adultSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CasteRaw);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CasteRaw other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (CasteId != other.CasteId) return false;
      if(!casteName_.Equals(other.casteName_)) return false;
      if(!babyName_.Equals(other.babyName_)) return false;
      if(!childName_.Equals(other.childName_)) return false;
      if (Gender != other.Gender) return false;
      if(!bodyParts_.Equals(other.bodyParts_)) return false;
      if (TotalRelsize != other.TotalRelsize) return false;
      if(!modifiers_.Equals(other.modifiers_)) return false;
      if(!modifierIdx_.Equals(other.modifierIdx_)) return false;
      if(!partIdx_.Equals(other.partIdx_)) return false;
      if(!layerIdx_.Equals(other.layerIdx_)) return false;
      if(!bodyAppearanceModifiers_.Equals(other.bodyAppearanceModifiers_)) return false;
      if(!colorModifiers_.Equals(other.colorModifiers_)) return false;
      if (Description != other.Description) return false;
      if (AdultSize != other.AdultSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (CasteId.Length != 0) hash ^= CasteId.GetHashCode();
      hash ^= casteName_.GetHashCode();
      hash ^= babyName_.GetHashCode();
      hash ^= childName_.GetHashCode();
      if (Gender != 0) hash ^= Gender.GetHashCode();
      hash ^= bodyParts_.GetHashCode();
      if (TotalRelsize != 0) hash ^= TotalRelsize.GetHashCode();
      hash ^= modifiers_.GetHashCode();
      hash ^= modifierIdx_.GetHashCode();
      hash ^= partIdx_.GetHashCode();
      hash ^= layerIdx_.GetHashCode();
      hash ^= bodyAppearanceModifiers_.GetHashCode();
      hash ^= colorModifiers_.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (AdultSize != 0) hash ^= AdultSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (CasteId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CasteId);
      }
      casteName_.WriteTo(output, _repeated_casteName_codec);
      babyName_.WriteTo(output, _repeated_babyName_codec);
      childName_.WriteTo(output, _repeated_childName_codec);
      if (Gender != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Gender);
      }
      bodyParts_.WriteTo(output, _repeated_bodyParts_codec);
      if (TotalRelsize != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(TotalRelsize);
      }
      modifiers_.WriteTo(output, _repeated_modifiers_codec);
      modifierIdx_.WriteTo(output, _repeated_modifierIdx_codec);
      partIdx_.WriteTo(output, _repeated_partIdx_codec);
      layerIdx_.WriteTo(output, _repeated_layerIdx_codec);
      bodyAppearanceModifiers_.WriteTo(output, _repeated_bodyAppearanceModifiers_codec);
      colorModifiers_.WriteTo(output, _repeated_colorModifiers_codec);
      if (Description.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Description);
      }
      if (AdultSize != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(AdultSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (CasteId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CasteId);
      }
      size += casteName_.CalculateSize(_repeated_casteName_codec);
      size += babyName_.CalculateSize(_repeated_babyName_codec);
      size += childName_.CalculateSize(_repeated_childName_codec);
      if (Gender != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gender);
      }
      size += bodyParts_.CalculateSize(_repeated_bodyParts_codec);
      if (TotalRelsize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalRelsize);
      }
      size += modifiers_.CalculateSize(_repeated_modifiers_codec);
      size += modifierIdx_.CalculateSize(_repeated_modifierIdx_codec);
      size += partIdx_.CalculateSize(_repeated_partIdx_codec);
      size += layerIdx_.CalculateSize(_repeated_layerIdx_codec);
      size += bodyAppearanceModifiers_.CalculateSize(_repeated_bodyAppearanceModifiers_codec);
      size += colorModifiers_.CalculateSize(_repeated_colorModifiers_codec);
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (AdultSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AdultSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CasteRaw other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.CasteId.Length != 0) {
        CasteId = other.CasteId;
      }
      casteName_.Add(other.casteName_);
      babyName_.Add(other.babyName_);
      childName_.Add(other.childName_);
      if (other.Gender != 0) {
        Gender = other.Gender;
      }
      bodyParts_.Add(other.bodyParts_);
      if (other.TotalRelsize != 0) {
        TotalRelsize = other.TotalRelsize;
      }
      modifiers_.Add(other.modifiers_);
      modifierIdx_.Add(other.modifierIdx_);
      partIdx_.Add(other.partIdx_);
      layerIdx_.Add(other.layerIdx_);
      bodyAppearanceModifiers_.Add(other.bodyAppearanceModifiers_);
      colorModifiers_.Add(other.colorModifiers_);
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.AdultSize != 0) {
        AdultSize = other.AdultSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 18: {
            CasteId = input.ReadString();
            break;
          }
          case 26: {
            casteName_.AddEntriesFrom(input, _repeated_casteName_codec);
            break;
          }
          case 34: {
            babyName_.AddEntriesFrom(input, _repeated_babyName_codec);
            break;
          }
          case 42: {
            childName_.AddEntriesFrom(input, _repeated_childName_codec);
            break;
          }
          case 48: {
            Gender = input.ReadInt32();
            break;
          }
          case 58: {
            bodyParts_.AddEntriesFrom(input, _repeated_bodyParts_codec);
            break;
          }
          case 64: {
            TotalRelsize = input.ReadInt32();
            break;
          }
          case 74: {
            modifiers_.AddEntriesFrom(input, _repeated_modifiers_codec);
            break;
          }
          case 82:
          case 80: {
            modifierIdx_.AddEntriesFrom(input, _repeated_modifierIdx_codec);
            break;
          }
          case 90:
          case 88: {
            partIdx_.AddEntriesFrom(input, _repeated_partIdx_codec);
            break;
          }
          case 98:
          case 96: {
            layerIdx_.AddEntriesFrom(input, _repeated_layerIdx_codec);
            break;
          }
          case 106: {
            bodyAppearanceModifiers_.AddEntriesFrom(input, _repeated_bodyAppearanceModifiers_codec);
            break;
          }
          case 114: {
            colorModifiers_.AddEntriesFrom(input, _repeated_colorModifiers_codec);
            break;
          }
          case 122: {
            Description = input.ReadString();
            break;
          }
          case 128: {
            AdultSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreatureRaw : pb::IMessage<CreatureRaw> {
    private static readonly pb::MessageParser<CreatureRaw> _parser = new pb::MessageParser<CreatureRaw>(() => new CreatureRaw());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreatureRaw> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatureRaw() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatureRaw(CreatureRaw other) : this() {
      index_ = other.index_;
      creatureId_ = other.creatureId_;
      name_ = other.name_.Clone();
      generalBabyName_ = other.generalBabyName_.Clone();
      generalChildName_ = other.generalChildName_.Clone();
      creatureTile_ = other.creatureTile_;
      creatureSoldierTile_ = other.creatureSoldierTile_;
      Color = other.color_ != null ? other.Color.Clone() : null;
      adultsize_ = other.adultsize_;
      caste_ = other.caste_.Clone();
      tissues_ = other.tissues_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatureRaw Clone() {
      return new CreatureRaw(this);
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "creature_id" field.</summary>
    public const int CreatureIdFieldNumber = 2;
    private string creatureId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreatureId {
      get { return creatureId_; }
      set {
        creatureId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_name_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> name_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Name {
      get { return name_; }
    }

    /// <summary>Field number for the "general_baby_name" field.</summary>
    public const int GeneralBabyNameFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_generalBabyName_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> generalBabyName_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> GeneralBabyName {
      get { return generalBabyName_; }
    }

    /// <summary>Field number for the "general_child_name" field.</summary>
    public const int GeneralChildNameFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_generalChildName_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> generalChildName_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> GeneralChildName {
      get { return generalChildName_; }
    }

    /// <summary>Field number for the "creature_tile" field.</summary>
    public const int CreatureTileFieldNumber = 6;
    private int creatureTile_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CreatureTile {
      get { return creatureTile_; }
      set {
        creatureTile_ = value;
      }
    }

    /// <summary>Field number for the "creature_soldier_tile" field.</summary>
    public const int CreatureSoldierTileFieldNumber = 7;
    private int creatureSoldierTile_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CreatureSoldierTile {
      get { return creatureSoldierTile_; }
      set {
        creatureSoldierTile_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 8;
    private global::RemoteFortressReader.ColorDefinition color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RemoteFortressReader.ColorDefinition Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "adultsize" field.</summary>
    public const int AdultsizeFieldNumber = 9;
    private int adultsize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Adultsize {
      get { return adultsize_; }
      set {
        adultsize_ = value;
      }
    }

    /// <summary>Field number for the "caste" field.</summary>
    public const int CasteFieldNumber = 10;
    private static readonly pb::FieldCodec<global::RemoteFortressReader.CasteRaw> _repeated_caste_codec
        = pb::FieldCodec.ForMessage(82, global::RemoteFortressReader.CasteRaw.Parser);
    private readonly pbc::RepeatedField<global::RemoteFortressReader.CasteRaw> caste_ = new pbc::RepeatedField<global::RemoteFortressReader.CasteRaw>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RemoteFortressReader.CasteRaw> Caste {
      get { return caste_; }
    }

    /// <summary>Field number for the "tissues" field.</summary>
    public const int TissuesFieldNumber = 11;
    private static readonly pb::FieldCodec<global::RemoteFortressReader.TissueRaw> _repeated_tissues_codec
        = pb::FieldCodec.ForMessage(90, global::RemoteFortressReader.TissueRaw.Parser);
    private readonly pbc::RepeatedField<global::RemoteFortressReader.TissueRaw> tissues_ = new pbc::RepeatedField<global::RemoteFortressReader.TissueRaw>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RemoteFortressReader.TissueRaw> Tissues {
      get { return tissues_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreatureRaw);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreatureRaw other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (CreatureId != other.CreatureId) return false;
      if(!name_.Equals(other.name_)) return false;
      if(!generalBabyName_.Equals(other.generalBabyName_)) return false;
      if(!generalChildName_.Equals(other.generalChildName_)) return false;
      if (CreatureTile != other.CreatureTile) return false;
      if (CreatureSoldierTile != other.CreatureSoldierTile) return false;
      if (!object.Equals(Color, other.Color)) return false;
      if (Adultsize != other.Adultsize) return false;
      if(!caste_.Equals(other.caste_)) return false;
      if(!tissues_.Equals(other.tissues_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (CreatureId.Length != 0) hash ^= CreatureId.GetHashCode();
      hash ^= name_.GetHashCode();
      hash ^= generalBabyName_.GetHashCode();
      hash ^= generalChildName_.GetHashCode();
      if (CreatureTile != 0) hash ^= CreatureTile.GetHashCode();
      if (CreatureSoldierTile != 0) hash ^= CreatureSoldierTile.GetHashCode();
      if (color_ != null) hash ^= Color.GetHashCode();
      if (Adultsize != 0) hash ^= Adultsize.GetHashCode();
      hash ^= caste_.GetHashCode();
      hash ^= tissues_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (CreatureId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CreatureId);
      }
      name_.WriteTo(output, _repeated_name_codec);
      generalBabyName_.WriteTo(output, _repeated_generalBabyName_codec);
      generalChildName_.WriteTo(output, _repeated_generalChildName_codec);
      if (CreatureTile != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CreatureTile);
      }
      if (CreatureSoldierTile != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(CreatureSoldierTile);
      }
      if (color_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Color);
      }
      if (Adultsize != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Adultsize);
      }
      caste_.WriteTo(output, _repeated_caste_codec);
      tissues_.WriteTo(output, _repeated_tissues_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (CreatureId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CreatureId);
      }
      size += name_.CalculateSize(_repeated_name_codec);
      size += generalBabyName_.CalculateSize(_repeated_generalBabyName_codec);
      size += generalChildName_.CalculateSize(_repeated_generalChildName_codec);
      if (CreatureTile != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CreatureTile);
      }
      if (CreatureSoldierTile != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CreatureSoldierTile);
      }
      if (color_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      if (Adultsize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Adultsize);
      }
      size += caste_.CalculateSize(_repeated_caste_codec);
      size += tissues_.CalculateSize(_repeated_tissues_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreatureRaw other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.CreatureId.Length != 0) {
        CreatureId = other.CreatureId;
      }
      name_.Add(other.name_);
      generalBabyName_.Add(other.generalBabyName_);
      generalChildName_.Add(other.generalChildName_);
      if (other.CreatureTile != 0) {
        CreatureTile = other.CreatureTile;
      }
      if (other.CreatureSoldierTile != 0) {
        CreatureSoldierTile = other.CreatureSoldierTile;
      }
      if (other.color_ != null) {
        if (color_ == null) {
          color_ = new global::RemoteFortressReader.ColorDefinition();
        }
        Color.MergeFrom(other.Color);
      }
      if (other.Adultsize != 0) {
        Adultsize = other.Adultsize;
      }
      caste_.Add(other.caste_);
      tissues_.Add(other.tissues_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 18: {
            CreatureId = input.ReadString();
            break;
          }
          case 26: {
            name_.AddEntriesFrom(input, _repeated_name_codec);
            break;
          }
          case 34: {
            generalBabyName_.AddEntriesFrom(input, _repeated_generalBabyName_codec);
            break;
          }
          case 42: {
            generalChildName_.AddEntriesFrom(input, _repeated_generalChildName_codec);
            break;
          }
          case 48: {
            CreatureTile = input.ReadInt32();
            break;
          }
          case 56: {
            CreatureSoldierTile = input.ReadInt32();
            break;
          }
          case 66: {
            if (color_ == null) {
              color_ = new global::RemoteFortressReader.ColorDefinition();
            }
            input.ReadMessage(color_);
            break;
          }
          case 72: {
            Adultsize = input.ReadInt32();
            break;
          }
          case 82: {
            caste_.AddEntriesFrom(input, _repeated_caste_codec);
            break;
          }
          case 90: {
            tissues_.AddEntriesFrom(input, _repeated_tissues_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreatureRawList : pb::IMessage<CreatureRawList> {
    private static readonly pb::MessageParser<CreatureRawList> _parser = new pb::MessageParser<CreatureRawList>(() => new CreatureRawList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreatureRawList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatureRawList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatureRawList(CreatureRawList other) : this() {
      creatureRaws_ = other.creatureRaws_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatureRawList Clone() {
      return new CreatureRawList(this);
    }

    /// <summary>Field number for the "creature_raws" field.</summary>
    public const int CreatureRawsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::RemoteFortressReader.CreatureRaw> _repeated_creatureRaws_codec
        = pb::FieldCodec.ForMessage(10, global::RemoteFortressReader.CreatureRaw.Parser);
    private readonly pbc::RepeatedField<global::RemoteFortressReader.CreatureRaw> creatureRaws_ = new pbc::RepeatedField<global::RemoteFortressReader.CreatureRaw>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RemoteFortressReader.CreatureRaw> CreatureRaws {
      get { return creatureRaws_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreatureRawList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreatureRawList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!creatureRaws_.Equals(other.creatureRaws_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= creatureRaws_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      creatureRaws_.WriteTo(output, _repeated_creatureRaws_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += creatureRaws_.CalculateSize(_repeated_creatureRaws_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreatureRawList other) {
      if (other == null) {
        return;
      }
      creatureRaws_.Add(other.creatureRaws_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            creatureRaws_.AddEntriesFrom(input, _repeated_creatureRaws_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Army : pb::IMessage<Army> {
    private static readonly pb::MessageParser<Army> _parser = new pb::MessageParser<Army>(() => new Army());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Army> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Army() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Army(Army other) : this() {
      id_ = other.id_;
      posX_ = other.posX_;
      posY_ = other.posY_;
      posZ_ = other.posZ_;
      Leader = other.leader_ != null ? other.Leader.Clone() : null;
      members_ = other.members_.Clone();
      flags_ = other.flags_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Army Clone() {
      return new Army(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "pos_x" field.</summary>
    public const int PosXFieldNumber = 2;
    private int posX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "pos_y" field.</summary>
    public const int PosYFieldNumber = 3;
    private int posY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "pos_z" field.</summary>
    public const int PosZFieldNumber = 4;
    private int posZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosZ {
      get { return posZ_; }
      set {
        posZ_ = value;
      }
    }

    /// <summary>Field number for the "leader" field.</summary>
    public const int LeaderFieldNumber = 5;
    private global::RemoteFortressReader.UnitDefinition leader_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RemoteFortressReader.UnitDefinition Leader {
      get { return leader_; }
      set {
        leader_ = value;
      }
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 6;
    private static readonly pb::FieldCodec<global::RemoteFortressReader.UnitDefinition> _repeated_members_codec
        = pb::FieldCodec.ForMessage(50, global::RemoteFortressReader.UnitDefinition.Parser);
    private readonly pbc::RepeatedField<global::RemoteFortressReader.UnitDefinition> members_ = new pbc::RepeatedField<global::RemoteFortressReader.UnitDefinition>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RemoteFortressReader.UnitDefinition> Members {
      get { return members_; }
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 7;
    private uint flags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Army);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Army other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (PosX != other.PosX) return false;
      if (PosY != other.PosY) return false;
      if (PosZ != other.PosZ) return false;
      if (!object.Equals(Leader, other.Leader)) return false;
      if(!members_.Equals(other.members_)) return false;
      if (Flags != other.Flags) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (PosX != 0) hash ^= PosX.GetHashCode();
      if (PosY != 0) hash ^= PosY.GetHashCode();
      if (PosZ != 0) hash ^= PosZ.GetHashCode();
      if (leader_ != null) hash ^= Leader.GetHashCode();
      hash ^= members_.GetHashCode();
      if (Flags != 0) hash ^= Flags.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (PosX != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PosX);
      }
      if (PosY != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PosY);
      }
      if (PosZ != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PosZ);
      }
      if (leader_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Leader);
      }
      members_.WriteTo(output, _repeated_members_codec);
      if (Flags != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Flags);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (PosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosX);
      }
      if (PosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosY);
      }
      if (PosZ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosZ);
      }
      if (leader_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Leader);
      }
      size += members_.CalculateSize(_repeated_members_codec);
      if (Flags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flags);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Army other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.PosX != 0) {
        PosX = other.PosX;
      }
      if (other.PosY != 0) {
        PosY = other.PosY;
      }
      if (other.PosZ != 0) {
        PosZ = other.PosZ;
      }
      if (other.leader_ != null) {
        if (leader_ == null) {
          leader_ = new global::RemoteFortressReader.UnitDefinition();
        }
        Leader.MergeFrom(other.Leader);
      }
      members_.Add(other.members_);
      if (other.Flags != 0) {
        Flags = other.Flags;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            PosX = input.ReadInt32();
            break;
          }
          case 24: {
            PosY = input.ReadInt32();
            break;
          }
          case 32: {
            PosZ = input.ReadInt32();
            break;
          }
          case 42: {
            if (leader_ == null) {
              leader_ = new global::RemoteFortressReader.UnitDefinition();
            }
            input.ReadMessage(leader_);
            break;
          }
          case 50: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
          case 56: {
            Flags = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ArmyList : pb::IMessage<ArmyList> {
    private static readonly pb::MessageParser<ArmyList> _parser = new pb::MessageParser<ArmyList>(() => new ArmyList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArmyList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmyList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmyList(ArmyList other) : this() {
      armies_ = other.armies_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmyList Clone() {
      return new ArmyList(this);
    }

    /// <summary>Field number for the "armies" field.</summary>
    public const int ArmiesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::RemoteFortressReader.Army> _repeated_armies_codec
        = pb::FieldCodec.ForMessage(10, global::RemoteFortressReader.Army.Parser);
    private readonly pbc::RepeatedField<global::RemoteFortressReader.Army> armies_ = new pbc::RepeatedField<global::RemoteFortressReader.Army>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RemoteFortressReader.Army> Armies {
      get { return armies_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArmyList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArmyList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!armies_.Equals(other.armies_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= armies_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      armies_.WriteTo(output, _repeated_armies_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += armies_.CalculateSize(_repeated_armies_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArmyList other) {
      if (other == null) {
        return;
      }
      armies_.Add(other.armies_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            armies_.AddEntriesFrom(input, _repeated_armies_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GrowthPrint : pb::IMessage<GrowthPrint> {
    private static readonly pb::MessageParser<GrowthPrint> _parser = new pb::MessageParser<GrowthPrint>(() => new GrowthPrint());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GrowthPrint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrowthPrint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrowthPrint(GrowthPrint other) : this() {
      priority_ = other.priority_;
      color_ = other.color_;
      timingStart_ = other.timingStart_;
      timingEnd_ = other.timingEnd_;
      tile_ = other.tile_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrowthPrint Clone() {
      return new GrowthPrint(this);
    }

    /// <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 1;
    private int priority_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 2;
    private int color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "timing_start" field.</summary>
    public const int TimingStartFieldNumber = 3;
    private int timingStart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TimingStart {
      get { return timingStart_; }
      set {
        timingStart_ = value;
      }
    }

    /// <summary>Field number for the "timing_end" field.</summary>
    public const int TimingEndFieldNumber = 4;
    private int timingEnd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TimingEnd {
      get { return timingEnd_; }
      set {
        timingEnd_ = value;
      }
    }

    /// <summary>Field number for the "tile" field.</summary>
    public const int TileFieldNumber = 5;
    private int tile_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tile {
      get { return tile_; }
      set {
        tile_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GrowthPrint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GrowthPrint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Priority != other.Priority) return false;
      if (Color != other.Color) return false;
      if (TimingStart != other.TimingStart) return false;
      if (TimingEnd != other.TimingEnd) return false;
      if (Tile != other.Tile) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Priority != 0) hash ^= Priority.GetHashCode();
      if (Color != 0) hash ^= Color.GetHashCode();
      if (TimingStart != 0) hash ^= TimingStart.GetHashCode();
      if (TimingEnd != 0) hash ^= TimingEnd.GetHashCode();
      if (Tile != 0) hash ^= Tile.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Priority != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Priority);
      }
      if (Color != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Color);
      }
      if (TimingStart != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TimingStart);
      }
      if (TimingEnd != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TimingEnd);
      }
      if (Tile != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Tile);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Priority != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Priority);
      }
      if (Color != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Color);
      }
      if (TimingStart != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimingStart);
      }
      if (TimingEnd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimingEnd);
      }
      if (Tile != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tile);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GrowthPrint other) {
      if (other == null) {
        return;
      }
      if (other.Priority != 0) {
        Priority = other.Priority;
      }
      if (other.Color != 0) {
        Color = other.Color;
      }
      if (other.TimingStart != 0) {
        TimingStart = other.TimingStart;
      }
      if (other.TimingEnd != 0) {
        TimingEnd = other.TimingEnd;
      }
      if (other.Tile != 0) {
        Tile = other.Tile;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Priority = input.ReadInt32();
            break;
          }
          case 16: {
            Color = input.ReadInt32();
            break;
          }
          case 24: {
            TimingStart = input.ReadInt32();
            break;
          }
          case 32: {
            TimingEnd = input.ReadInt32();
            break;
          }
          case 40: {
            Tile = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TreeGrowth : pb::IMessage<TreeGrowth> {
    private static readonly pb::MessageParser<TreeGrowth> _parser = new pb::MessageParser<TreeGrowth>(() => new TreeGrowth());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TreeGrowth> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TreeGrowth() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TreeGrowth(TreeGrowth other) : this() {
      index_ = other.index_;
      id_ = other.id_;
      name_ = other.name_;
      Mat = other.mat_ != null ? other.Mat.Clone() : null;
      prints_ = other.prints_.Clone();
      timingStart_ = other.timingStart_;
      timingEnd_ = other.timingEnd_;
      twigs_ = other.twigs_;
      lightBranches_ = other.lightBranches_;
      heavyBranches_ = other.heavyBranches_;
      trunk_ = other.trunk_;
      roots_ = other.roots_;
      cap_ = other.cap_;
      sapling_ = other.sapling_;
      trunkHeightStart_ = other.trunkHeightStart_;
      trunkHeightEnd_ = other.trunkHeightEnd_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TreeGrowth Clone() {
      return new TreeGrowth(this);
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mat" field.</summary>
    public const int MatFieldNumber = 4;
    private global::RemoteFortressReader.MatPair mat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RemoteFortressReader.MatPair Mat {
      get { return mat_; }
      set {
        mat_ = value;
      }
    }

    /// <summary>Field number for the "prints" field.</summary>
    public const int PrintsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::RemoteFortressReader.GrowthPrint> _repeated_prints_codec
        = pb::FieldCodec.ForMessage(42, global::RemoteFortressReader.GrowthPrint.Parser);
    private readonly pbc::RepeatedField<global::RemoteFortressReader.GrowthPrint> prints_ = new pbc::RepeatedField<global::RemoteFortressReader.GrowthPrint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RemoteFortressReader.GrowthPrint> Prints {
      get { return prints_; }
    }

    /// <summary>Field number for the "timing_start" field.</summary>
    public const int TimingStartFieldNumber = 6;
    private int timingStart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TimingStart {
      get { return timingStart_; }
      set {
        timingStart_ = value;
      }
    }

    /// <summary>Field number for the "timing_end" field.</summary>
    public const int TimingEndFieldNumber = 7;
    private int timingEnd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TimingEnd {
      get { return timingEnd_; }
      set {
        timingEnd_ = value;
      }
    }

    /// <summary>Field number for the "twigs" field.</summary>
    public const int TwigsFieldNumber = 8;
    private bool twigs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Twigs {
      get { return twigs_; }
      set {
        twigs_ = value;
      }
    }

    /// <summary>Field number for the "light_branches" field.</summary>
    public const int LightBranchesFieldNumber = 9;
    private bool lightBranches_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LightBranches {
      get { return lightBranches_; }
      set {
        lightBranches_ = value;
      }
    }

    /// <summary>Field number for the "heavy_branches" field.</summary>
    public const int HeavyBranchesFieldNumber = 10;
    private bool heavyBranches_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HeavyBranches {
      get { return heavyBranches_; }
      set {
        heavyBranches_ = value;
      }
    }

    /// <summary>Field number for the "trunk" field.</summary>
    public const int TrunkFieldNumber = 11;
    private bool trunk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Trunk {
      get { return trunk_; }
      set {
        trunk_ = value;
      }
    }

    /// <summary>Field number for the "roots" field.</summary>
    public const int RootsFieldNumber = 12;
    private bool roots_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Roots {
      get { return roots_; }
      set {
        roots_ = value;
      }
    }

    /// <summary>Field number for the "cap" field.</summary>
    public const int CapFieldNumber = 13;
    private bool cap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Cap {
      get { return cap_; }
      set {
        cap_ = value;
      }
    }

    /// <summary>Field number for the "sapling" field.</summary>
    public const int SaplingFieldNumber = 14;
    private bool sapling_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Sapling {
      get { return sapling_; }
      set {
        sapling_ = value;
      }
    }

    /// <summary>Field number for the "trunk_height_start" field.</summary>
    public const int TrunkHeightStartFieldNumber = 15;
    private int trunkHeightStart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TrunkHeightStart {
      get { return trunkHeightStart_; }
      set {
        trunkHeightStart_ = value;
      }
    }

    /// <summary>Field number for the "trunk_height_end" field.</summary>
    public const int TrunkHeightEndFieldNumber = 16;
    private int trunkHeightEnd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TrunkHeightEnd {
      get { return trunkHeightEnd_; }
      set {
        trunkHeightEnd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TreeGrowth);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TreeGrowth other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(Mat, other.Mat)) return false;
      if(!prints_.Equals(other.prints_)) return false;
      if (TimingStart != other.TimingStart) return false;
      if (TimingEnd != other.TimingEnd) return false;
      if (Twigs != other.Twigs) return false;
      if (LightBranches != other.LightBranches) return false;
      if (HeavyBranches != other.HeavyBranches) return false;
      if (Trunk != other.Trunk) return false;
      if (Roots != other.Roots) return false;
      if (Cap != other.Cap) return false;
      if (Sapling != other.Sapling) return false;
      if (TrunkHeightStart != other.TrunkHeightStart) return false;
      if (TrunkHeightEnd != other.TrunkHeightEnd) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (mat_ != null) hash ^= Mat.GetHashCode();
      hash ^= prints_.GetHashCode();
      if (TimingStart != 0) hash ^= TimingStart.GetHashCode();
      if (TimingEnd != 0) hash ^= TimingEnd.GetHashCode();
      if (Twigs != false) hash ^= Twigs.GetHashCode();
      if (LightBranches != false) hash ^= LightBranches.GetHashCode();
      if (HeavyBranches != false) hash ^= HeavyBranches.GetHashCode();
      if (Trunk != false) hash ^= Trunk.GetHashCode();
      if (Roots != false) hash ^= Roots.GetHashCode();
      if (Cap != false) hash ^= Cap.GetHashCode();
      if (Sapling != false) hash ^= Sapling.GetHashCode();
      if (TrunkHeightStart != 0) hash ^= TrunkHeightStart.GetHashCode();
      if (TrunkHeightEnd != 0) hash ^= TrunkHeightEnd.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (mat_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Mat);
      }
      prints_.WriteTo(output, _repeated_prints_codec);
      if (TimingStart != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TimingStart);
      }
      if (TimingEnd != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(TimingEnd);
      }
      if (Twigs != false) {
        output.WriteRawTag(64);
        output.WriteBool(Twigs);
      }
      if (LightBranches != false) {
        output.WriteRawTag(72);
        output.WriteBool(LightBranches);
      }
      if (HeavyBranches != false) {
        output.WriteRawTag(80);
        output.WriteBool(HeavyBranches);
      }
      if (Trunk != false) {
        output.WriteRawTag(88);
        output.WriteBool(Trunk);
      }
      if (Roots != false) {
        output.WriteRawTag(96);
        output.WriteBool(Roots);
      }
      if (Cap != false) {
        output.WriteRawTag(104);
        output.WriteBool(Cap);
      }
      if (Sapling != false) {
        output.WriteRawTag(112);
        output.WriteBool(Sapling);
      }
      if (TrunkHeightStart != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(TrunkHeightStart);
      }
      if (TrunkHeightEnd != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(TrunkHeightEnd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (mat_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mat);
      }
      size += prints_.CalculateSize(_repeated_prints_codec);
      if (TimingStart != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimingStart);
      }
      if (TimingEnd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimingEnd);
      }
      if (Twigs != false) {
        size += 1 + 1;
      }
      if (LightBranches != false) {
        size += 1 + 1;
      }
      if (HeavyBranches != false) {
        size += 1 + 1;
      }
      if (Trunk != false) {
        size += 1 + 1;
      }
      if (Roots != false) {
        size += 1 + 1;
      }
      if (Cap != false) {
        size += 1 + 1;
      }
      if (Sapling != false) {
        size += 1 + 1;
      }
      if (TrunkHeightStart != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TrunkHeightStart);
      }
      if (TrunkHeightEnd != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TrunkHeightEnd);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TreeGrowth other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.mat_ != null) {
        if (mat_ == null) {
          mat_ = new global::RemoteFortressReader.MatPair();
        }
        Mat.MergeFrom(other.Mat);
      }
      prints_.Add(other.prints_);
      if (other.TimingStart != 0) {
        TimingStart = other.TimingStart;
      }
      if (other.TimingEnd != 0) {
        TimingEnd = other.TimingEnd;
      }
      if (other.Twigs != false) {
        Twigs = other.Twigs;
      }
      if (other.LightBranches != false) {
        LightBranches = other.LightBranches;
      }
      if (other.HeavyBranches != false) {
        HeavyBranches = other.HeavyBranches;
      }
      if (other.Trunk != false) {
        Trunk = other.Trunk;
      }
      if (other.Roots != false) {
        Roots = other.Roots;
      }
      if (other.Cap != false) {
        Cap = other.Cap;
      }
      if (other.Sapling != false) {
        Sapling = other.Sapling;
      }
      if (other.TrunkHeightStart != 0) {
        TrunkHeightStart = other.TrunkHeightStart;
      }
      if (other.TrunkHeightEnd != 0) {
        TrunkHeightEnd = other.TrunkHeightEnd;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            if (mat_ == null) {
              mat_ = new global::RemoteFortressReader.MatPair();
            }
            input.ReadMessage(mat_);
            break;
          }
          case 42: {
            prints_.AddEntriesFrom(input, _repeated_prints_codec);
            break;
          }
          case 48: {
            TimingStart = input.ReadInt32();
            break;
          }
          case 56: {
            TimingEnd = input.ReadInt32();
            break;
          }
          case 64: {
            Twigs = input.ReadBool();
            break;
          }
          case 72: {
            LightBranches = input.ReadBool();
            break;
          }
          case 80: {
            HeavyBranches = input.ReadBool();
            break;
          }
          case 88: {
            Trunk = input.ReadBool();
            break;
          }
          case 96: {
            Roots = input.ReadBool();
            break;
          }
          case 104: {
            Cap = input.ReadBool();
            break;
          }
          case 112: {
            Sapling = input.ReadBool();
            break;
          }
          case 120: {
            TrunkHeightStart = input.ReadInt32();
            break;
          }
          case 128: {
            TrunkHeightEnd = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlantRaw : pb::IMessage<PlantRaw> {
    private static readonly pb::MessageParser<PlantRaw> _parser = new pb::MessageParser<PlantRaw>(() => new PlantRaw());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlantRaw> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlantRaw() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlantRaw(PlantRaw other) : this() {
      index_ = other.index_;
      id_ = other.id_;
      name_ = other.name_;
      growths_ = other.growths_.Clone();
      tile_ = other.tile_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlantRaw Clone() {
      return new PlantRaw(this);
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "growths" field.</summary>
    public const int GrowthsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::RemoteFortressReader.TreeGrowth> _repeated_growths_codec
        = pb::FieldCodec.ForMessage(34, global::RemoteFortressReader.TreeGrowth.Parser);
    private readonly pbc::RepeatedField<global::RemoteFortressReader.TreeGrowth> growths_ = new pbc::RepeatedField<global::RemoteFortressReader.TreeGrowth>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RemoteFortressReader.TreeGrowth> Growths {
      get { return growths_; }
    }

    /// <summary>Field number for the "tile" field.</summary>
    public const int TileFieldNumber = 5;
    private int tile_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tile {
      get { return tile_; }
      set {
        tile_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlantRaw);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlantRaw other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if(!growths_.Equals(other.growths_)) return false;
      if (Tile != other.Tile) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= growths_.GetHashCode();
      if (Tile != 0) hash ^= Tile.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      growths_.WriteTo(output, _repeated_growths_codec);
      if (Tile != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Tile);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += growths_.CalculateSize(_repeated_growths_codec);
      if (Tile != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tile);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlantRaw other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      growths_.Add(other.growths_);
      if (other.Tile != 0) {
        Tile = other.Tile;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            growths_.AddEntriesFrom(input, _repeated_growths_codec);
            break;
          }
          case 40: {
            Tile = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlantRawList : pb::IMessage<PlantRawList> {
    private static readonly pb::MessageParser<PlantRawList> _parser = new pb::MessageParser<PlantRawList>(() => new PlantRawList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlantRawList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlantRawList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlantRawList(PlantRawList other) : this() {
      plantRaws_ = other.plantRaws_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlantRawList Clone() {
      return new PlantRawList(this);
    }

    /// <summary>Field number for the "plant_raws" field.</summary>
    public const int PlantRawsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::RemoteFortressReader.PlantRaw> _repeated_plantRaws_codec
        = pb::FieldCodec.ForMessage(10, global::RemoteFortressReader.PlantRaw.Parser);
    private readonly pbc::RepeatedField<global::RemoteFortressReader.PlantRaw> plantRaws_ = new pbc::RepeatedField<global::RemoteFortressReader.PlantRaw>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RemoteFortressReader.PlantRaw> PlantRaws {
      get { return plantRaws_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlantRawList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlantRawList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!plantRaws_.Equals(other.plantRaws_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= plantRaws_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      plantRaws_.WriteTo(output, _repeated_plantRaws_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += plantRaws_.CalculateSize(_repeated_plantRaws_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlantRawList other) {
      if (other == null) {
        return;
      }
      plantRaws_.Add(other.plantRaws_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            plantRaws_.AddEntriesFrom(input, _repeated_plantRaws_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScreenTile : pb::IMessage<ScreenTile> {
    private static readonly pb::MessageParser<ScreenTile> _parser = new pb::MessageParser<ScreenTile>(() => new ScreenTile());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScreenTile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScreenTile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScreenTile(ScreenTile other) : this() {
      character_ = other.character_;
      foreground_ = other.foreground_;
      background_ = other.background_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScreenTile Clone() {
      return new ScreenTile(this);
    }

    /// <summary>Field number for the "character" field.</summary>
    public const int CharacterFieldNumber = 1;
    private uint character_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Character {
      get { return character_; }
      set {
        character_ = value;
      }
    }

    /// <summary>Field number for the "foreground" field.</summary>
    public const int ForegroundFieldNumber = 2;
    private uint foreground_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Foreground {
      get { return foreground_; }
      set {
        foreground_ = value;
      }
    }

    /// <summary>Field number for the "background" field.</summary>
    public const int BackgroundFieldNumber = 3;
    private uint background_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Background {
      get { return background_; }
      set {
        background_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScreenTile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScreenTile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Character != other.Character) return false;
      if (Foreground != other.Foreground) return false;
      if (Background != other.Background) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Character != 0) hash ^= Character.GetHashCode();
      if (Foreground != 0) hash ^= Foreground.GetHashCode();
      if (Background != 0) hash ^= Background.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Character != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Character);
      }
      if (Foreground != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Foreground);
      }
      if (Background != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Background);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Character != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Character);
      }
      if (Foreground != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Foreground);
      }
      if (Background != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Background);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScreenTile other) {
      if (other == null) {
        return;
      }
      if (other.Character != 0) {
        Character = other.Character;
      }
      if (other.Foreground != 0) {
        Foreground = other.Foreground;
      }
      if (other.Background != 0) {
        Background = other.Background;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Character = input.ReadUInt32();
            break;
          }
          case 16: {
            Foreground = input.ReadUInt32();
            break;
          }
          case 24: {
            Background = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScreenCapture : pb::IMessage<ScreenCapture> {
    private static readonly pb::MessageParser<ScreenCapture> _parser = new pb::MessageParser<ScreenCapture>(() => new ScreenCapture());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScreenCapture> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScreenCapture() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScreenCapture(ScreenCapture other) : this() {
      width_ = other.width_;
      height_ = other.height_;
      tiles_ = other.tiles_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScreenCapture Clone() {
      return new ScreenCapture(this);
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 1;
    private uint width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 2;
    private uint height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "tiles" field.</summary>
    public const int TilesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::RemoteFortressReader.ScreenTile> _repeated_tiles_codec
        = pb::FieldCodec.ForMessage(26, global::RemoteFortressReader.ScreenTile.Parser);
    private readonly pbc::RepeatedField<global::RemoteFortressReader.ScreenTile> tiles_ = new pbc::RepeatedField<global::RemoteFortressReader.ScreenTile>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RemoteFortressReader.ScreenTile> Tiles {
      get { return tiles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScreenCapture);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScreenCapture other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if(!tiles_.Equals(other.tiles_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      hash ^= tiles_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Width != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Height);
      }
      tiles_.WriteTo(output, _repeated_tiles_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Height);
      }
      size += tiles_.CalculateSize(_repeated_tiles_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScreenCapture other) {
      if (other == null) {
        return;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      tiles_.Add(other.tiles_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Width = input.ReadUInt32();
            break;
          }
          case 16: {
            Height = input.ReadUInt32();
            break;
          }
          case 26: {
            tiles_.AddEntriesFrom(input, _repeated_tiles_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class KeyboardEvent : pb::IMessage<KeyboardEvent> {
    private static readonly pb::MessageParser<KeyboardEvent> _parser = new pb::MessageParser<KeyboardEvent>(() => new KeyboardEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeyboardEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyboardEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyboardEvent(KeyboardEvent other) : this() {
      type_ = other.type_;
      which_ = other.which_;
      state_ = other.state_;
      scancode_ = other.scancode_;
      sym_ = other.sym_;
      mod_ = other.mod_;
      unicode_ = other.unicode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyboardEvent Clone() {
      return new KeyboardEvent(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "which" field.</summary>
    public const int WhichFieldNumber = 2;
    private uint which_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Which {
      get { return which_; }
      set {
        which_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private uint state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "scancode" field.</summary>
    public const int ScancodeFieldNumber = 4;
    private uint scancode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Scancode {
      get { return scancode_; }
      set {
        scancode_ = value;
      }
    }

    /// <summary>Field number for the "sym" field.</summary>
    public const int SymFieldNumber = 5;
    private uint sym_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Sym {
      get { return sym_; }
      set {
        sym_ = value;
      }
    }

    /// <summary>Field number for the "mod" field.</summary>
    public const int ModFieldNumber = 6;
    private uint mod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mod {
      get { return mod_; }
      set {
        mod_ = value;
      }
    }

    /// <summary>Field number for the "unicode" field.</summary>
    public const int UnicodeFieldNumber = 7;
    private uint unicode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Unicode {
      get { return unicode_; }
      set {
        unicode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeyboardEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeyboardEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Which != other.Which) return false;
      if (State != other.State) return false;
      if (Scancode != other.Scancode) return false;
      if (Sym != other.Sym) return false;
      if (Mod != other.Mod) return false;
      if (Unicode != other.Unicode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Which != 0) hash ^= Which.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (Scancode != 0) hash ^= Scancode.GetHashCode();
      if (Sym != 0) hash ^= Sym.GetHashCode();
      if (Mod != 0) hash ^= Mod.GetHashCode();
      if (Unicode != 0) hash ^= Unicode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (Which != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Which);
      }
      if (State != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(State);
      }
      if (Scancode != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Scancode);
      }
      if (Sym != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Sym);
      }
      if (Mod != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Mod);
      }
      if (Unicode != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Unicode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (Which != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Which);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(State);
      }
      if (Scancode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Scancode);
      }
      if (Sym != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Sym);
      }
      if (Mod != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mod);
      }
      if (Unicode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Unicode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeyboardEvent other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Which != 0) {
        Which = other.Which;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.Scancode != 0) {
        Scancode = other.Scancode;
      }
      if (other.Sym != 0) {
        Sym = other.Sym;
      }
      if (other.Mod != 0) {
        Mod = other.Mod;
      }
      if (other.Unicode != 0) {
        Unicode = other.Unicode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 16: {
            Which = input.ReadUInt32();
            break;
          }
          case 24: {
            State = input.ReadUInt32();
            break;
          }
          case 32: {
            Scancode = input.ReadUInt32();
            break;
          }
          case 40: {
            Sym = input.ReadUInt32();
            break;
          }
          case 48: {
            Mod = input.ReadUInt32();
            break;
          }
          case 56: {
            Unicode = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DigCommand : pb::IMessage<DigCommand> {
    private static readonly pb::MessageParser<DigCommand> _parser = new pb::MessageParser<DigCommand>(() => new DigCommand());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DigCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DigCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DigCommand(DigCommand other) : this() {
      designation_ = other.designation_;
      locations_ = other.locations_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DigCommand Clone() {
      return new DigCommand(this);
    }

    /// <summary>Field number for the "designation" field.</summary>
    public const int DesignationFieldNumber = 1;
    private global::RemoteFortressReader.TileDigDesignation designation_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RemoteFortressReader.TileDigDesignation Designation {
      get { return designation_; }
      set {
        designation_ = value;
      }
    }

    /// <summary>Field number for the "locations" field.</summary>
    public const int LocationsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::RemoteFortressReader.Coord> _repeated_locations_codec
        = pb::FieldCodec.ForMessage(18, global::RemoteFortressReader.Coord.Parser);
    private readonly pbc::RepeatedField<global::RemoteFortressReader.Coord> locations_ = new pbc::RepeatedField<global::RemoteFortressReader.Coord>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RemoteFortressReader.Coord> Locations {
      get { return locations_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DigCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DigCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Designation != other.Designation) return false;
      if(!locations_.Equals(other.locations_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Designation != 0) hash ^= Designation.GetHashCode();
      hash ^= locations_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Designation != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Designation);
      }
      locations_.WriteTo(output, _repeated_locations_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Designation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Designation);
      }
      size += locations_.CalculateSize(_repeated_locations_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DigCommand other) {
      if (other == null) {
        return;
      }
      if (other.Designation != 0) {
        Designation = other.Designation;
      }
      locations_.Add(other.locations_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            designation_ = (global::RemoteFortressReader.TileDigDesignation) input.ReadEnum();
            break;
          }
          case 18: {
            locations_.AddEntriesFrom(input, _repeated_locations_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SingleBool : pb::IMessage<SingleBool> {
    private static readonly pb::MessageParser<SingleBool> _parser = new pb::MessageParser<SingleBool>(() => new SingleBool());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SingleBool> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RemoteFortressReader.RemoteFortressReaderReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleBool() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleBool(SingleBool other) : this() {
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleBool Clone() {
      return new SingleBool(this);
    }

    /// <summary>Field number for the "Value" field.</summary>
    public const int ValueFieldNumber = 1;
    private bool value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SingleBool);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SingleBool other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != false) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != false) {
        output.WriteRawTag(8);
        output.WriteBool(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SingleBool other) {
      if (other == null) {
        return;
      }
      if (other.Value != false) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Value = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
