// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CoreProtocol.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Dfproto {

  /// <summary>Holder for reflection information generated from CoreProtocol.proto</summary>
  public static partial class CoreProtocolReflection {

    #region Descriptor
    /// <summary>File descriptor for CoreProtocol.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CoreProtocolReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJDb3JlUHJvdG9jb2wucHJvdG8SB2RmcHJvdG8iggMKEENvcmVUZXh0RnJh",
            "Z21lbnQSDAoEdGV4dBgBIAEoCRIuCgVjb2xvchgCIAEoDjIfLmRmcHJvdG8u",
            "Q29yZVRleHRGcmFnbWVudC5Db2xvciKvAgoFQ29sb3ISDwoLQ09MT1JfQkxB",
            "Q0sQABIOCgpDT0xPUl9CTFVFEAESDwoLQ09MT1JfR1JFRU4QAhIOCgpDT0xP",
            "Ul9DWUFOEAMSDQoJQ09MT1JfUkVEEAQSEQoNQ09MT1JfTUFHRU5UQRAFEg8K",
            "C0NPTE9SX0JST1dOEAYSDgoKQ09MT1JfR1JFWRAHEhIKDkNPTE9SX0RBUktH",
            "UkVZEAgSEwoPQ09MT1JfTElHSFRCTFVFEAkSFAoQQ09MT1JfTElHSFRHUkVF",
            "ThAKEhMKD0NPTE9SX0xJR0hUQ1lBThALEhIKDkNPTE9SX0xJR0hUUkVEEAwS",
            "FgoSQ09MT1JfTElHSFRNQUdFTlRBEA0SEAoMQ09MT1JfWUVMTE9XEA4SDwoL",
            "Q09MT1JfV0hJVEUQDyJEChRDb3JlVGV4dE5vdGlmaWNhdGlvbhIsCglmcmFn",
            "bWVudHMYASADKAsyGS5kZnByb3RvLkNvcmVUZXh0RnJhZ21lbnQi+gEKFUNv",
            "cmVFcnJvck5vdGlmaWNhdGlvbhI2CgRjb2RlGAEgASgOMiguZGZwcm90by5D",
            "b3JlRXJyb3JOb3RpZmljYXRpb24uRXJyb3JDb2RlIqgBCglFcnJvckNvZGUS",
            "CQoFQ1JfT0sQABIcCg9DUl9MSU5LX0ZBSUxVUkUQ/f//////////ARIbCg5D",
            "Ul9XT1VMRF9CUkVBSxD+//////////8BEh8KEkNSX05PVF9JTVBMRU1FTlRF",
            "RBD///////////8BEg4KCkNSX0ZBSUxVUkUQARISCg5DUl9XUk9OR19VU0FH",
            "RRACEhAKDENSX05PVF9GT1VORBADIg4KDEVtcHR5TWVzc2FnZSIbCgpJbnRN",
            "ZXNzYWdlEg0KBXZhbHVlGAEgASgFIh8KDkludExpc3RNZXNzYWdlEg0KBXZh",
            "bHVlGAEgAygFIh4KDVN0cmluZ01lc3NhZ2USDQoFdmFsdWUYASABKAkiIgoR",
            "U3RyaW5nTGlzdE1lc3NhZ2USDQoFdmFsdWUYASADKAkiWAoPQ29yZUJpbmRS",
            "ZXF1ZXN0Eg4KBm1ldGhvZBgBIAEoCRIRCglpbnB1dF9tc2cYAiABKAkSEgoK",
            "b3V0cHV0X21zZxgDIAEoCRIOCgZwbHVnaW4YBCABKAkiJAoNQ29yZUJpbmRS",
            "ZXBseRITCgthc3NpZ25lZF9pZBgBIAEoBSI7ChVDb3JlUnVuQ29tbWFuZFJl",
            "cXVlc3QSDwoHY29tbWFuZBgBIAEoCRIRCglhcmd1bWVudHMYAiADKAkiSAoR",
            "Q29yZVJ1bkx1YVJlcXVlc3QSDgoGbW9kdWxlGAEgASgJEhAKCGZ1bmN0aW9u",
            "GAIgASgJEhEKCWFyZ3VtZW50cxgDIAMoCUICSANiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Dfproto.CoreTextFragment), global::Dfproto.CoreTextFragment.Parser, new[]{ "Text", "Color" }, null, new[]{ typeof(global::Dfproto.CoreTextFragment.Types.Color) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Dfproto.CoreTextNotification), global::Dfproto.CoreTextNotification.Parser, new[]{ "Fragments" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Dfproto.CoreErrorNotification), global::Dfproto.CoreErrorNotification.Parser, new[]{ "Code" }, null, new[]{ typeof(global::Dfproto.CoreErrorNotification.Types.ErrorCode) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Dfproto.EmptyMessage), global::Dfproto.EmptyMessage.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Dfproto.IntMessage), global::Dfproto.IntMessage.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Dfproto.IntListMessage), global::Dfproto.IntListMessage.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Dfproto.StringMessage), global::Dfproto.StringMessage.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Dfproto.StringListMessage), global::Dfproto.StringListMessage.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Dfproto.CoreBindRequest), global::Dfproto.CoreBindRequest.Parser, new[]{ "Method", "InputMsg", "OutputMsg", "Plugin" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Dfproto.CoreBindReply), global::Dfproto.CoreBindReply.Parser, new[]{ "AssignedId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Dfproto.CoreRunCommandRequest), global::Dfproto.CoreRunCommandRequest.Parser, new[]{ "Command", "Arguments" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Dfproto.CoreRunLuaRequest), global::Dfproto.CoreRunLuaRequest.Parser, new[]{ "Module", "Function", "Arguments" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CoreTextFragment : pb::IMessage<CoreTextFragment> {
    private static readonly pb::MessageParser<CoreTextFragment> _parser = new pb::MessageParser<CoreTextFragment>(() => new CoreTextFragment());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CoreTextFragment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dfproto.CoreProtocolReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoreTextFragment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoreTextFragment(CoreTextFragment other) : this() {
      text_ = other.text_;
      color_ = other.color_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoreTextFragment Clone() {
      return new CoreTextFragment(this);
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 1;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 2;
    private global::Dfproto.CoreTextFragment.Types.Color color_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Dfproto.CoreTextFragment.Types.Color Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CoreTextFragment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CoreTextFragment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Text != other.Text) return false;
      if (Color != other.Color) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (Color != 0) hash ^= Color.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Text.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Text);
      }
      if (Color != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Color);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (Color != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Color);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CoreTextFragment other) {
      if (other == null) {
        return;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      if (other.Color != 0) {
        Color = other.Color;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Text = input.ReadString();
            break;
          }
          case 16: {
            color_ = (global::Dfproto.CoreTextFragment.Types.Color) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CoreTextFragment message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Color {
        [pbr::OriginalName("COLOR_BLACK")] Black = 0,
        [pbr::OriginalName("COLOR_BLUE")] Blue = 1,
        [pbr::OriginalName("COLOR_GREEN")] Green = 2,
        [pbr::OriginalName("COLOR_CYAN")] Cyan = 3,
        [pbr::OriginalName("COLOR_RED")] Red = 4,
        [pbr::OriginalName("COLOR_MAGENTA")] Magenta = 5,
        [pbr::OriginalName("COLOR_BROWN")] Brown = 6,
        [pbr::OriginalName("COLOR_GREY")] Grey = 7,
        [pbr::OriginalName("COLOR_DARKGREY")] Darkgrey = 8,
        [pbr::OriginalName("COLOR_LIGHTBLUE")] Lightblue = 9,
        [pbr::OriginalName("COLOR_LIGHTGREEN")] Lightgreen = 10,
        [pbr::OriginalName("COLOR_LIGHTCYAN")] Lightcyan = 11,
        [pbr::OriginalName("COLOR_LIGHTRED")] Lightred = 12,
        [pbr::OriginalName("COLOR_LIGHTMAGENTA")] Lightmagenta = 13,
        [pbr::OriginalName("COLOR_YELLOW")] Yellow = 14,
        [pbr::OriginalName("COLOR_WHITE")] White = 15,
      }

    }
    #endregion

  }

  public sealed partial class CoreTextNotification : pb::IMessage<CoreTextNotification> {
    private static readonly pb::MessageParser<CoreTextNotification> _parser = new pb::MessageParser<CoreTextNotification>(() => new CoreTextNotification());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CoreTextNotification> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dfproto.CoreProtocolReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoreTextNotification() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoreTextNotification(CoreTextNotification other) : this() {
      fragments_ = other.fragments_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoreTextNotification Clone() {
      return new CoreTextNotification(this);
    }

    /// <summary>Field number for the "fragments" field.</summary>
    public const int FragmentsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Dfproto.CoreTextFragment> _repeated_fragments_codec
        = pb::FieldCodec.ForMessage(10, global::Dfproto.CoreTextFragment.Parser);
    private readonly pbc::RepeatedField<global::Dfproto.CoreTextFragment> fragments_ = new pbc::RepeatedField<global::Dfproto.CoreTextFragment>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Dfproto.CoreTextFragment> Fragments {
      get { return fragments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CoreTextNotification);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CoreTextNotification other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!fragments_.Equals(other.fragments_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= fragments_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      fragments_.WriteTo(output, _repeated_fragments_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += fragments_.CalculateSize(_repeated_fragments_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CoreTextNotification other) {
      if (other == null) {
        return;
      }
      fragments_.Add(other.fragments_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            fragments_.AddEntriesFrom(input, _repeated_fragments_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CoreErrorNotification : pb::IMessage<CoreErrorNotification> {
    private static readonly pb::MessageParser<CoreErrorNotification> _parser = new pb::MessageParser<CoreErrorNotification>(() => new CoreErrorNotification());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CoreErrorNotification> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dfproto.CoreProtocolReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoreErrorNotification() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoreErrorNotification(CoreErrorNotification other) : this() {
      code_ = other.code_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoreErrorNotification Clone() {
      return new CoreErrorNotification(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Dfproto.CoreErrorNotification.Types.ErrorCode code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Dfproto.CoreErrorNotification.Types.ErrorCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CoreErrorNotification);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CoreErrorNotification other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CoreErrorNotification other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            code_ = (global::Dfproto.CoreErrorNotification.Types.ErrorCode) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CoreErrorNotification message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ErrorCode {
        [pbr::OriginalName("CR_OK")] CrOk = 0,
        [pbr::OriginalName("CR_LINK_FAILURE")] CrLinkFailure = -3,
        [pbr::OriginalName("CR_WOULD_BREAK")] CrWouldBreak = -2,
        [pbr::OriginalName("CR_NOT_IMPLEMENTED")] CrNotImplemented = -1,
        [pbr::OriginalName("CR_FAILURE")] CrFailure = 1,
        [pbr::OriginalName("CR_WRONG_USAGE")] CrWrongUsage = 2,
        [pbr::OriginalName("CR_NOT_FOUND")] CrNotFound = 3,
      }

    }
    #endregion

  }

  public sealed partial class EmptyMessage : pb::IMessage<EmptyMessage> {
    private static readonly pb::MessageParser<EmptyMessage> _parser = new pb::MessageParser<EmptyMessage>(() => new EmptyMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EmptyMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dfproto.CoreProtocolReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyMessage(EmptyMessage other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyMessage Clone() {
      return new EmptyMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EmptyMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EmptyMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EmptyMessage other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class IntMessage : pb::IMessage<IntMessage> {
    private static readonly pb::MessageParser<IntMessage> _parser = new pb::MessageParser<IntMessage>(() => new IntMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IntMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dfproto.CoreProtocolReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntMessage(IntMessage other) : this() {
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntMessage Clone() {
      return new IntMessage(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IntMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IntMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IntMessage other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IntListMessage : pb::IMessage<IntListMessage> {
    private static readonly pb::MessageParser<IntListMessage> _parser = new pb::MessageParser<IntListMessage>(() => new IntListMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IntListMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dfproto.CoreProtocolReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntListMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntListMessage(IntListMessage other) : this() {
      value_ = other.value_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntListMessage Clone() {
      return new IntListMessage(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_value_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> value_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Value {
      get { return value_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IntListMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IntListMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!value_.Equals(other.value_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= value_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      value_.WriteTo(output, _repeated_value_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += value_.CalculateSize(_repeated_value_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IntListMessage other) {
      if (other == null) {
        return;
      }
      value_.Add(other.value_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            value_.AddEntriesFrom(input, _repeated_value_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StringMessage : pb::IMessage<StringMessage> {
    private static readonly pb::MessageParser<StringMessage> _parser = new pb::MessageParser<StringMessage>(() => new StringMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StringMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dfproto.CoreProtocolReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringMessage(StringMessage other) : this() {
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringMessage Clone() {
      return new StringMessage(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StringMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StringMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StringMessage other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StringListMessage : pb::IMessage<StringListMessage> {
    private static readonly pb::MessageParser<StringListMessage> _parser = new pb::MessageParser<StringListMessage>(() => new StringListMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StringListMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dfproto.CoreProtocolReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringListMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringListMessage(StringListMessage other) : this() {
      value_ = other.value_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringListMessage Clone() {
      return new StringListMessage(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_value_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> value_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Value {
      get { return value_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StringListMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StringListMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!value_.Equals(other.value_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= value_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      value_.WriteTo(output, _repeated_value_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += value_.CalculateSize(_repeated_value_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StringListMessage other) {
      if (other == null) {
        return;
      }
      value_.Add(other.value_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            value_.AddEntriesFrom(input, _repeated_value_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// RPC BindMethod : CoreBindRequest -> CoreBindReply
  /// </summary>
  public sealed partial class CoreBindRequest : pb::IMessage<CoreBindRequest> {
    private static readonly pb::MessageParser<CoreBindRequest> _parser = new pb::MessageParser<CoreBindRequest>(() => new CoreBindRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CoreBindRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dfproto.CoreProtocolReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoreBindRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoreBindRequest(CoreBindRequest other) : this() {
      method_ = other.method_;
      inputMsg_ = other.inputMsg_;
      outputMsg_ = other.outputMsg_;
      plugin_ = other.plugin_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoreBindRequest Clone() {
      return new CoreBindRequest(this);
    }

    /// <summary>Field number for the "method" field.</summary>
    public const int MethodFieldNumber = 1;
    private string method_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Method {
      get { return method_; }
      set {
        method_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "input_msg" field.</summary>
    public const int InputMsgFieldNumber = 2;
    private string inputMsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InputMsg {
      get { return inputMsg_; }
      set {
        inputMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "output_msg" field.</summary>
    public const int OutputMsgFieldNumber = 3;
    private string outputMsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OutputMsg {
      get { return outputMsg_; }
      set {
        outputMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "plugin" field.</summary>
    public const int PluginFieldNumber = 4;
    private string plugin_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Plugin {
      get { return plugin_; }
      set {
        plugin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CoreBindRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CoreBindRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Method != other.Method) return false;
      if (InputMsg != other.InputMsg) return false;
      if (OutputMsg != other.OutputMsg) return false;
      if (Plugin != other.Plugin) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Method.Length != 0) hash ^= Method.GetHashCode();
      if (InputMsg.Length != 0) hash ^= InputMsg.GetHashCode();
      if (OutputMsg.Length != 0) hash ^= OutputMsg.GetHashCode();
      if (Plugin.Length != 0) hash ^= Plugin.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Method.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Method);
      }
      if (InputMsg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(InputMsg);
      }
      if (OutputMsg.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OutputMsg);
      }
      if (Plugin.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Plugin);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Method.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Method);
      }
      if (InputMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InputMsg);
      }
      if (OutputMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OutputMsg);
      }
      if (Plugin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Plugin);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CoreBindRequest other) {
      if (other == null) {
        return;
      }
      if (other.Method.Length != 0) {
        Method = other.Method;
      }
      if (other.InputMsg.Length != 0) {
        InputMsg = other.InputMsg;
      }
      if (other.OutputMsg.Length != 0) {
        OutputMsg = other.OutputMsg;
      }
      if (other.Plugin.Length != 0) {
        Plugin = other.Plugin;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Method = input.ReadString();
            break;
          }
          case 18: {
            InputMsg = input.ReadString();
            break;
          }
          case 26: {
            OutputMsg = input.ReadString();
            break;
          }
          case 34: {
            Plugin = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CoreBindReply : pb::IMessage<CoreBindReply> {
    private static readonly pb::MessageParser<CoreBindReply> _parser = new pb::MessageParser<CoreBindReply>(() => new CoreBindReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CoreBindReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dfproto.CoreProtocolReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoreBindReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoreBindReply(CoreBindReply other) : this() {
      assignedId_ = other.assignedId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoreBindReply Clone() {
      return new CoreBindReply(this);
    }

    /// <summary>Field number for the "assigned_id" field.</summary>
    public const int AssignedIdFieldNumber = 1;
    private int assignedId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AssignedId {
      get { return assignedId_; }
      set {
        assignedId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CoreBindReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CoreBindReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AssignedId != other.AssignedId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AssignedId != 0) hash ^= AssignedId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AssignedId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AssignedId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AssignedId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AssignedId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CoreBindReply other) {
      if (other == null) {
        return;
      }
      if (other.AssignedId != 0) {
        AssignedId = other.AssignedId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AssignedId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// RPC RunCommand : CoreRunCommandRequest -> EmptyMessage
  /// </summary>
  public sealed partial class CoreRunCommandRequest : pb::IMessage<CoreRunCommandRequest> {
    private static readonly pb::MessageParser<CoreRunCommandRequest> _parser = new pb::MessageParser<CoreRunCommandRequest>(() => new CoreRunCommandRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CoreRunCommandRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dfproto.CoreProtocolReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoreRunCommandRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoreRunCommandRequest(CoreRunCommandRequest other) : this() {
      command_ = other.command_;
      arguments_ = other.arguments_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoreRunCommandRequest Clone() {
      return new CoreRunCommandRequest(this);
    }

    /// <summary>Field number for the "command" field.</summary>
    public const int CommandFieldNumber = 1;
    private string command_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Command {
      get { return command_; }
      set {
        command_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "arguments" field.</summary>
    public const int ArgumentsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_arguments_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> arguments_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Arguments {
      get { return arguments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CoreRunCommandRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CoreRunCommandRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Command != other.Command) return false;
      if(!arguments_.Equals(other.arguments_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Command.Length != 0) hash ^= Command.GetHashCode();
      hash ^= arguments_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Command.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Command);
      }
      arguments_.WriteTo(output, _repeated_arguments_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Command.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Command);
      }
      size += arguments_.CalculateSize(_repeated_arguments_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CoreRunCommandRequest other) {
      if (other == null) {
        return;
      }
      if (other.Command.Length != 0) {
        Command = other.Command;
      }
      arguments_.Add(other.arguments_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Command = input.ReadString();
            break;
          }
          case 18: {
            arguments_.AddEntriesFrom(input, _repeated_arguments_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// RPC RunLua : CoreRunLuaRequest -> StringListMessage
  /// </summary>
  public sealed partial class CoreRunLuaRequest : pb::IMessage<CoreRunLuaRequest> {
    private static readonly pb::MessageParser<CoreRunLuaRequest> _parser = new pb::MessageParser<CoreRunLuaRequest>(() => new CoreRunLuaRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CoreRunLuaRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dfproto.CoreProtocolReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoreRunLuaRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoreRunLuaRequest(CoreRunLuaRequest other) : this() {
      module_ = other.module_;
      function_ = other.function_;
      arguments_ = other.arguments_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoreRunLuaRequest Clone() {
      return new CoreRunLuaRequest(this);
    }

    /// <summary>Field number for the "module" field.</summary>
    public const int ModuleFieldNumber = 1;
    private string module_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Module {
      get { return module_; }
      set {
        module_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "function" field.</summary>
    public const int FunctionFieldNumber = 2;
    private string function_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Function {
      get { return function_; }
      set {
        function_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "arguments" field.</summary>
    public const int ArgumentsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_arguments_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> arguments_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Arguments {
      get { return arguments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CoreRunLuaRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CoreRunLuaRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Module != other.Module) return false;
      if (Function != other.Function) return false;
      if(!arguments_.Equals(other.arguments_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Module.Length != 0) hash ^= Module.GetHashCode();
      if (Function.Length != 0) hash ^= Function.GetHashCode();
      hash ^= arguments_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Module.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Module);
      }
      if (Function.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Function);
      }
      arguments_.WriteTo(output, _repeated_arguments_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Module.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Module);
      }
      if (Function.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Function);
      }
      size += arguments_.CalculateSize(_repeated_arguments_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CoreRunLuaRequest other) {
      if (other == null) {
        return;
      }
      if (other.Module.Length != 0) {
        Module = other.Module;
      }
      if (other.Function.Length != 0) {
        Function = other.Function;
      }
      arguments_.Add(other.arguments_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Module = input.ReadString();
            break;
          }
          case 18: {
            Function = input.ReadString();
            break;
          }
          case 26: {
            arguments_.AddEntriesFrom(input, _repeated_arguments_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
