// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BasicApi.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Dfproto {

  /// <summary>Holder for reflection information generated from BasicApi.proto</summary>
  public static partial class BasicApiReflection {

    #region Descriptor
    /// <summary>File descriptor for BasicApi.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BasicApiReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5CYXNpY0FwaS5wcm90bxIHZGZwcm90bxoLQmFzaWMucHJvdG8i2gIKD0dl",
            "dFdvcmxkSW5mb091dBIrCgRtb2RlGAEgASgOMh0uZGZwcm90by5HZXRXb3Js",
            "ZEluZm9PdXQuTW9kZRIQCghzYXZlX2RpchgCIAEoCRIlCgp3b3JsZF9uYW1l",
            "GAMgASgLMhEuZGZwcm90by5OYW1lSW5mbxIOCgZjaXZfaWQYBCABKAUSDwoH",
            "c2l0ZV9pZBgFIAEoBRIQCghncm91cF9pZBgGIAEoBRIPCgdyYWNlX2lkGAcg",
            "ASgFEhYKDnBsYXllcl91bml0X2lkGAggASgFEhkKEXBsYXllcl9oaXN0Zmln",
            "X2lkGAkgASgFEh0KFWNvbXBhbmlvbl9oaXN0ZmlnX2lkcxgKIAMoBSJLCgRN",
            "b2RlEg0KCU1PREVfTk9ORRAAEg4KCk1PREVfRFdBUkYQARISCg5NT0RFX0FE",
            "VkVOVFVSRRACEhAKDE1PREVfTEVHRU5EUxADIoYECgxMaXN0RW51bXNPdXQS",
            "LQoObWF0ZXJpYWxfZmxhZ3MYASADKAsyFS5kZnByb3RvLkVudW1JdGVtTmFt",
            "ZRIuCg9pbm9yZ2FuaWNfZmxhZ3MYAiADKAsyFS5kZnByb3RvLkVudW1JdGVt",
            "TmFtZRIqCgt1bml0X2ZsYWdzMRgDIAMoCzIVLmRmcHJvdG8uRW51bUl0ZW1O",
            "YW1lEioKC3VuaXRfZmxhZ3MyGAQgAygLMhUuZGZwcm90by5FbnVtSXRlbU5h",
            "bWUSKgoLdW5pdF9mbGFnczMYBSADKAsyFS5kZnByb3RvLkVudW1JdGVtTmFt",
            "ZRIpCgp1bml0X2xhYm9yGAYgAygLMhUuZGZwcm90by5FbnVtSXRlbU5hbWUS",
            "KAoJam9iX3NraWxsGAcgAygLMhUuZGZwcm90by5FbnVtSXRlbU5hbWUSMAoR",
            "Y2llX2FkZF90YWdfbWFzazEYCCADKAsyFS5kZnByb3RvLkVudW1JdGVtTmFt",
            "ZRIwChFjaWVfYWRkX3RhZ19tYXNrMhgJIAMoCzIVLmRmcHJvdG8uRW51bUl0",
            "ZW1OYW1lEi8KEGRlYXRoX2luZm9fZmxhZ3MYCiADKAsyFS5kZnByb3RvLkVu",
            "dW1JdGVtTmFtZRIpCgpwcm9mZXNzaW9uGAsgAygLMhUuZGZwcm90by5FbnVt",
            "SXRlbU5hbWUijAEKEExpc3RKb2JTa2lsbHNPdXQSJAoFc2tpbGwYASADKAsy",
            "FS5kZnByb3RvLkpvYlNraWxsQXR0chIrCgpwcm9mZXNzaW9uGAIgAygLMhcu",
            "ZGZwcm90by5Qcm9mZXNzaW9uQXR0chIlCgVsYWJvchgDIAMoCzIWLmRmcHJv",
            "dG8uVW5pdExhYm9yQXR0ciKxAQoPTGlzdE1hdGVyaWFsc0luEiwKBG1hc2sY",
            "ASABKAsyHi5kZnByb3RvLkJhc2ljTWF0ZXJpYWxJbmZvTWFzaxIpCgdpZF9s",
            "aXN0GAIgAygLMhguZGZwcm90by5CYXNpY01hdGVyaWFsSWQSDwoHYnVpbHRp",
            "bhgDIAEoCBIRCglpbm9yZ2FuaWMYBCABKAgSEQoJY3JlYXR1cmVzGAUgASgI",
            "Eg4KBnBsYW50cxgGIAEoCCI9ChBMaXN0TWF0ZXJpYWxzT3V0EikKBXZhbHVl",
            "GAEgAygLMhouZGZwcm90by5CYXNpY01hdGVyaWFsSW5mbyKjAQoLTGlzdFVu",
            "aXRzSW4SKAoEbWFzaxgBIAEoCzIaLmRmcHJvdG8uQmFzaWNVbml0SW5mb01h",
            "c2sSDwoHaWRfbGlzdBgCIAMoBRIQCghzY2FuX2FsbBgFIAEoCBIMCgRyYWNl",
            "GAMgASgFEg4KBmNpdl9pZBgEIAEoBRIMCgRkZWFkGAYgASgIEg0KBWFsaXZl",
            "GAcgASgIEgwKBHNhbmUYCCABKAgiNQoMTGlzdFVuaXRzT3V0EiUKBXZhbHVl",
            "GAEgAygLMhYuZGZwcm90by5CYXNpY1VuaXRJbmZvIg4KDExpc3RTcXVhZHNJ",
            "biI3Cg1MaXN0U3F1YWRzT3V0EiYKBXZhbHVlGAEgAygLMhcuZGZwcm90by5C",
            "YXNpY1NxdWFkSW5mbyI6Cg9TZXRVbml0TGFib3JzSW4SJwoGY2hhbmdlGAEg",
            "AygLMhcuZGZwcm90by5Vbml0TGFib3JTdGF0ZUICSANiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Dfproto.BasicReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Dfproto.GetWorldInfoOut), global::Dfproto.GetWorldInfoOut.Parser, new[]{ "Mode", "SaveDir", "WorldName", "CivId", "SiteId", "GroupId", "RaceId", "PlayerUnitId", "PlayerHistfigId", "CompanionHistfigIds" }, null, new[]{ typeof(global::Dfproto.GetWorldInfoOut.Types.Mode) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Dfproto.ListEnumsOut), global::Dfproto.ListEnumsOut.Parser, new[]{ "MaterialFlags", "InorganicFlags", "UnitFlags1", "UnitFlags2", "UnitFlags3", "UnitLabor", "JobSkill", "CieAddTagMask1", "CieAddTagMask2", "DeathInfoFlags", "Profession" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Dfproto.ListJobSkillsOut), global::Dfproto.ListJobSkillsOut.Parser, new[]{ "Skill", "Profession", "Labor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Dfproto.ListMaterialsIn), global::Dfproto.ListMaterialsIn.Parser, new[]{ "Mask", "IdList", "Builtin", "Inorganic", "Creatures", "Plants" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Dfproto.ListMaterialsOut), global::Dfproto.ListMaterialsOut.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Dfproto.ListUnitsIn), global::Dfproto.ListUnitsIn.Parser, new[]{ "Mask", "IdList", "ScanAll", "Race", "CivId", "Dead", "Alive", "Sane" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Dfproto.ListUnitsOut), global::Dfproto.ListUnitsOut.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Dfproto.ListSquadsIn), global::Dfproto.ListSquadsIn.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Dfproto.ListSquadsOut), global::Dfproto.ListSquadsOut.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Dfproto.SetUnitLaborsIn), global::Dfproto.SetUnitLaborsIn.Parser, new[]{ "Change" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// RPC GetWorldInfo : EmptyMessage -> GetWorldInfoOut
  /// </summary>
  public sealed partial class GetWorldInfoOut : pb::IMessage<GetWorldInfoOut> {
    private static readonly pb::MessageParser<GetWorldInfoOut> _parser = new pb::MessageParser<GetWorldInfoOut>(() => new GetWorldInfoOut());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetWorldInfoOut> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dfproto.BasicApiReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetWorldInfoOut() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetWorldInfoOut(GetWorldInfoOut other) : this() {
      mode_ = other.mode_;
      saveDir_ = other.saveDir_;
      WorldName = other.worldName_ != null ? other.WorldName.Clone() : null;
      civId_ = other.civId_;
      siteId_ = other.siteId_;
      groupId_ = other.groupId_;
      raceId_ = other.raceId_;
      playerUnitId_ = other.playerUnitId_;
      playerHistfigId_ = other.playerHistfigId_;
      companionHistfigIds_ = other.companionHistfigIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetWorldInfoOut Clone() {
      return new GetWorldInfoOut(this);
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 1;
    private global::Dfproto.GetWorldInfoOut.Types.Mode mode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Dfproto.GetWorldInfoOut.Types.Mode Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    /// <summary>Field number for the "save_dir" field.</summary>
    public const int SaveDirFieldNumber = 2;
    private string saveDir_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SaveDir {
      get { return saveDir_; }
      set {
        saveDir_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "world_name" field.</summary>
    public const int WorldNameFieldNumber = 3;
    private global::Dfproto.NameInfo worldName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Dfproto.NameInfo WorldName {
      get { return worldName_; }
      set {
        worldName_ = value;
      }
    }

    /// <summary>Field number for the "civ_id" field.</summary>
    public const int CivIdFieldNumber = 4;
    private int civId_;
    /// <summary>
    /// Dwarf mode
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CivId {
      get { return civId_; }
      set {
        civId_ = value;
      }
    }

    /// <summary>Field number for the "site_id" field.</summary>
    public const int SiteIdFieldNumber = 5;
    private int siteId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SiteId {
      get { return siteId_; }
      set {
        siteId_ = value;
      }
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 6;
    private int groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "race_id" field.</summary>
    public const int RaceIdFieldNumber = 7;
    private int raceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RaceId {
      get { return raceId_; }
      set {
        raceId_ = value;
      }
    }

    /// <summary>Field number for the "player_unit_id" field.</summary>
    public const int PlayerUnitIdFieldNumber = 8;
    private int playerUnitId_;
    /// <summary>
    /// Adventure mode
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerUnitId {
      get { return playerUnitId_; }
      set {
        playerUnitId_ = value;
      }
    }

    /// <summary>Field number for the "player_histfig_id" field.</summary>
    public const int PlayerHistfigIdFieldNumber = 9;
    private int playerHistfigId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerHistfigId {
      get { return playerHistfigId_; }
      set {
        playerHistfigId_ = value;
      }
    }

    /// <summary>Field number for the "companion_histfig_ids" field.</summary>
    public const int CompanionHistfigIdsFieldNumber = 10;
    private static readonly pb::FieldCodec<int> _repeated_companionHistfigIds_codec
        = pb::FieldCodec.ForInt32(82);
    private readonly pbc::RepeatedField<int> companionHistfigIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> CompanionHistfigIds {
      get { return companionHistfigIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetWorldInfoOut);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetWorldInfoOut other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mode != other.Mode) return false;
      if (SaveDir != other.SaveDir) return false;
      if (!object.Equals(WorldName, other.WorldName)) return false;
      if (CivId != other.CivId) return false;
      if (SiteId != other.SiteId) return false;
      if (GroupId != other.GroupId) return false;
      if (RaceId != other.RaceId) return false;
      if (PlayerUnitId != other.PlayerUnitId) return false;
      if (PlayerHistfigId != other.PlayerHistfigId) return false;
      if(!companionHistfigIds_.Equals(other.companionHistfigIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mode != 0) hash ^= Mode.GetHashCode();
      if (SaveDir.Length != 0) hash ^= SaveDir.GetHashCode();
      if (worldName_ != null) hash ^= WorldName.GetHashCode();
      if (CivId != 0) hash ^= CivId.GetHashCode();
      if (SiteId != 0) hash ^= SiteId.GetHashCode();
      if (GroupId != 0) hash ^= GroupId.GetHashCode();
      if (RaceId != 0) hash ^= RaceId.GetHashCode();
      if (PlayerUnitId != 0) hash ^= PlayerUnitId.GetHashCode();
      if (PlayerHistfigId != 0) hash ^= PlayerHistfigId.GetHashCode();
      hash ^= companionHistfigIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mode);
      }
      if (SaveDir.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SaveDir);
      }
      if (worldName_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(WorldName);
      }
      if (CivId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CivId);
      }
      if (SiteId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SiteId);
      }
      if (GroupId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(GroupId);
      }
      if (RaceId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(RaceId);
      }
      if (PlayerUnitId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(PlayerUnitId);
      }
      if (PlayerHistfigId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(PlayerHistfigId);
      }
      companionHistfigIds_.WriteTo(output, _repeated_companionHistfigIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
      }
      if (SaveDir.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SaveDir);
      }
      if (worldName_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WorldName);
      }
      if (CivId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CivId);
      }
      if (SiteId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SiteId);
      }
      if (GroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupId);
      }
      if (RaceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RaceId);
      }
      if (PlayerUnitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerUnitId);
      }
      if (PlayerHistfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerHistfigId);
      }
      size += companionHistfigIds_.CalculateSize(_repeated_companionHistfigIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetWorldInfoOut other) {
      if (other == null) {
        return;
      }
      if (other.Mode != 0) {
        Mode = other.Mode;
      }
      if (other.SaveDir.Length != 0) {
        SaveDir = other.SaveDir;
      }
      if (other.worldName_ != null) {
        if (worldName_ == null) {
          worldName_ = new global::Dfproto.NameInfo();
        }
        WorldName.MergeFrom(other.WorldName);
      }
      if (other.CivId != 0) {
        CivId = other.CivId;
      }
      if (other.SiteId != 0) {
        SiteId = other.SiteId;
      }
      if (other.GroupId != 0) {
        GroupId = other.GroupId;
      }
      if (other.RaceId != 0) {
        RaceId = other.RaceId;
      }
      if (other.PlayerUnitId != 0) {
        PlayerUnitId = other.PlayerUnitId;
      }
      if (other.PlayerHistfigId != 0) {
        PlayerHistfigId = other.PlayerHistfigId;
      }
      companionHistfigIds_.Add(other.companionHistfigIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mode_ = (global::Dfproto.GetWorldInfoOut.Types.Mode) input.ReadEnum();
            break;
          }
          case 18: {
            SaveDir = input.ReadString();
            break;
          }
          case 26: {
            if (worldName_ == null) {
              worldName_ = new global::Dfproto.NameInfo();
            }
            input.ReadMessage(worldName_);
            break;
          }
          case 32: {
            CivId = input.ReadInt32();
            break;
          }
          case 40: {
            SiteId = input.ReadInt32();
            break;
          }
          case 48: {
            GroupId = input.ReadInt32();
            break;
          }
          case 56: {
            RaceId = input.ReadInt32();
            break;
          }
          case 64: {
            PlayerUnitId = input.ReadInt32();
            break;
          }
          case 72: {
            PlayerHistfigId = input.ReadInt32();
            break;
          }
          case 82:
          case 80: {
            companionHistfigIds_.AddEntriesFrom(input, _repeated_companionHistfigIds_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GetWorldInfoOut message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Mode {
        [pbr::OriginalName("MODE_NONE")] None = 0,
        [pbr::OriginalName("MODE_DWARF")] Dwarf = 1,
        [pbr::OriginalName("MODE_ADVENTURE")] Adventure = 2,
        [pbr::OriginalName("MODE_LEGENDS")] Legends = 3,
      }

    }
    #endregion

  }

  /// <summary>
  /// RPC ListEnums : EmptyMessage -> ListEnumsOut
  /// </summary>
  public sealed partial class ListEnumsOut : pb::IMessage<ListEnumsOut> {
    private static readonly pb::MessageParser<ListEnumsOut> _parser = new pb::MessageParser<ListEnumsOut>(() => new ListEnumsOut());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListEnumsOut> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dfproto.BasicApiReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListEnumsOut() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListEnumsOut(ListEnumsOut other) : this() {
      materialFlags_ = other.materialFlags_.Clone();
      inorganicFlags_ = other.inorganicFlags_.Clone();
      unitFlags1_ = other.unitFlags1_.Clone();
      unitFlags2_ = other.unitFlags2_.Clone();
      unitFlags3_ = other.unitFlags3_.Clone();
      unitLabor_ = other.unitLabor_.Clone();
      jobSkill_ = other.jobSkill_.Clone();
      cieAddTagMask1_ = other.cieAddTagMask1_.Clone();
      cieAddTagMask2_ = other.cieAddTagMask2_.Clone();
      deathInfoFlags_ = other.deathInfoFlags_.Clone();
      profession_ = other.profession_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListEnumsOut Clone() {
      return new ListEnumsOut(this);
    }

    /// <summary>Field number for the "material_flags" field.</summary>
    public const int MaterialFlagsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Dfproto.EnumItemName> _repeated_materialFlags_codec
        = pb::FieldCodec.ForMessage(10, global::Dfproto.EnumItemName.Parser);
    private readonly pbc::RepeatedField<global::Dfproto.EnumItemName> materialFlags_ = new pbc::RepeatedField<global::Dfproto.EnumItemName>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Dfproto.EnumItemName> MaterialFlags {
      get { return materialFlags_; }
    }

    /// <summary>Field number for the "inorganic_flags" field.</summary>
    public const int InorganicFlagsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Dfproto.EnumItemName> _repeated_inorganicFlags_codec
        = pb::FieldCodec.ForMessage(18, global::Dfproto.EnumItemName.Parser);
    private readonly pbc::RepeatedField<global::Dfproto.EnumItemName> inorganicFlags_ = new pbc::RepeatedField<global::Dfproto.EnumItemName>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Dfproto.EnumItemName> InorganicFlags {
      get { return inorganicFlags_; }
    }

    /// <summary>Field number for the "unit_flags1" field.</summary>
    public const int UnitFlags1FieldNumber = 3;
    private static readonly pb::FieldCodec<global::Dfproto.EnumItemName> _repeated_unitFlags1_codec
        = pb::FieldCodec.ForMessage(26, global::Dfproto.EnumItemName.Parser);
    private readonly pbc::RepeatedField<global::Dfproto.EnumItemName> unitFlags1_ = new pbc::RepeatedField<global::Dfproto.EnumItemName>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Dfproto.EnumItemName> UnitFlags1 {
      get { return unitFlags1_; }
    }

    /// <summary>Field number for the "unit_flags2" field.</summary>
    public const int UnitFlags2FieldNumber = 4;
    private static readonly pb::FieldCodec<global::Dfproto.EnumItemName> _repeated_unitFlags2_codec
        = pb::FieldCodec.ForMessage(34, global::Dfproto.EnumItemName.Parser);
    private readonly pbc::RepeatedField<global::Dfproto.EnumItemName> unitFlags2_ = new pbc::RepeatedField<global::Dfproto.EnumItemName>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Dfproto.EnumItemName> UnitFlags2 {
      get { return unitFlags2_; }
    }

    /// <summary>Field number for the "unit_flags3" field.</summary>
    public const int UnitFlags3FieldNumber = 5;
    private static readonly pb::FieldCodec<global::Dfproto.EnumItemName> _repeated_unitFlags3_codec
        = pb::FieldCodec.ForMessage(42, global::Dfproto.EnumItemName.Parser);
    private readonly pbc::RepeatedField<global::Dfproto.EnumItemName> unitFlags3_ = new pbc::RepeatedField<global::Dfproto.EnumItemName>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Dfproto.EnumItemName> UnitFlags3 {
      get { return unitFlags3_; }
    }

    /// <summary>Field number for the "unit_labor" field.</summary>
    public const int UnitLaborFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Dfproto.EnumItemName> _repeated_unitLabor_codec
        = pb::FieldCodec.ForMessage(50, global::Dfproto.EnumItemName.Parser);
    private readonly pbc::RepeatedField<global::Dfproto.EnumItemName> unitLabor_ = new pbc::RepeatedField<global::Dfproto.EnumItemName>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Dfproto.EnumItemName> UnitLabor {
      get { return unitLabor_; }
    }

    /// <summary>Field number for the "job_skill" field.</summary>
    public const int JobSkillFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Dfproto.EnumItemName> _repeated_jobSkill_codec
        = pb::FieldCodec.ForMessage(58, global::Dfproto.EnumItemName.Parser);
    private readonly pbc::RepeatedField<global::Dfproto.EnumItemName> jobSkill_ = new pbc::RepeatedField<global::Dfproto.EnumItemName>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Dfproto.EnumItemName> JobSkill {
      get { return jobSkill_; }
    }

    /// <summary>Field number for the "cie_add_tag_mask1" field.</summary>
    public const int CieAddTagMask1FieldNumber = 8;
    private static readonly pb::FieldCodec<global::Dfproto.EnumItemName> _repeated_cieAddTagMask1_codec
        = pb::FieldCodec.ForMessage(66, global::Dfproto.EnumItemName.Parser);
    private readonly pbc::RepeatedField<global::Dfproto.EnumItemName> cieAddTagMask1_ = new pbc::RepeatedField<global::Dfproto.EnumItemName>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Dfproto.EnumItemName> CieAddTagMask1 {
      get { return cieAddTagMask1_; }
    }

    /// <summary>Field number for the "cie_add_tag_mask2" field.</summary>
    public const int CieAddTagMask2FieldNumber = 9;
    private static readonly pb::FieldCodec<global::Dfproto.EnumItemName> _repeated_cieAddTagMask2_codec
        = pb::FieldCodec.ForMessage(74, global::Dfproto.EnumItemName.Parser);
    private readonly pbc::RepeatedField<global::Dfproto.EnumItemName> cieAddTagMask2_ = new pbc::RepeatedField<global::Dfproto.EnumItemName>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Dfproto.EnumItemName> CieAddTagMask2 {
      get { return cieAddTagMask2_; }
    }

    /// <summary>Field number for the "death_info_flags" field.</summary>
    public const int DeathInfoFlagsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Dfproto.EnumItemName> _repeated_deathInfoFlags_codec
        = pb::FieldCodec.ForMessage(82, global::Dfproto.EnumItemName.Parser);
    private readonly pbc::RepeatedField<global::Dfproto.EnumItemName> deathInfoFlags_ = new pbc::RepeatedField<global::Dfproto.EnumItemName>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Dfproto.EnumItemName> DeathInfoFlags {
      get { return deathInfoFlags_; }
    }

    /// <summary>Field number for the "profession" field.</summary>
    public const int ProfessionFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Dfproto.EnumItemName> _repeated_profession_codec
        = pb::FieldCodec.ForMessage(90, global::Dfproto.EnumItemName.Parser);
    private readonly pbc::RepeatedField<global::Dfproto.EnumItemName> profession_ = new pbc::RepeatedField<global::Dfproto.EnumItemName>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Dfproto.EnumItemName> Profession {
      get { return profession_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListEnumsOut);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListEnumsOut other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!materialFlags_.Equals(other.materialFlags_)) return false;
      if(!inorganicFlags_.Equals(other.inorganicFlags_)) return false;
      if(!unitFlags1_.Equals(other.unitFlags1_)) return false;
      if(!unitFlags2_.Equals(other.unitFlags2_)) return false;
      if(!unitFlags3_.Equals(other.unitFlags3_)) return false;
      if(!unitLabor_.Equals(other.unitLabor_)) return false;
      if(!jobSkill_.Equals(other.jobSkill_)) return false;
      if(!cieAddTagMask1_.Equals(other.cieAddTagMask1_)) return false;
      if(!cieAddTagMask2_.Equals(other.cieAddTagMask2_)) return false;
      if(!deathInfoFlags_.Equals(other.deathInfoFlags_)) return false;
      if(!profession_.Equals(other.profession_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= materialFlags_.GetHashCode();
      hash ^= inorganicFlags_.GetHashCode();
      hash ^= unitFlags1_.GetHashCode();
      hash ^= unitFlags2_.GetHashCode();
      hash ^= unitFlags3_.GetHashCode();
      hash ^= unitLabor_.GetHashCode();
      hash ^= jobSkill_.GetHashCode();
      hash ^= cieAddTagMask1_.GetHashCode();
      hash ^= cieAddTagMask2_.GetHashCode();
      hash ^= deathInfoFlags_.GetHashCode();
      hash ^= profession_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      materialFlags_.WriteTo(output, _repeated_materialFlags_codec);
      inorganicFlags_.WriteTo(output, _repeated_inorganicFlags_codec);
      unitFlags1_.WriteTo(output, _repeated_unitFlags1_codec);
      unitFlags2_.WriteTo(output, _repeated_unitFlags2_codec);
      unitFlags3_.WriteTo(output, _repeated_unitFlags3_codec);
      unitLabor_.WriteTo(output, _repeated_unitLabor_codec);
      jobSkill_.WriteTo(output, _repeated_jobSkill_codec);
      cieAddTagMask1_.WriteTo(output, _repeated_cieAddTagMask1_codec);
      cieAddTagMask2_.WriteTo(output, _repeated_cieAddTagMask2_codec);
      deathInfoFlags_.WriteTo(output, _repeated_deathInfoFlags_codec);
      profession_.WriteTo(output, _repeated_profession_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += materialFlags_.CalculateSize(_repeated_materialFlags_codec);
      size += inorganicFlags_.CalculateSize(_repeated_inorganicFlags_codec);
      size += unitFlags1_.CalculateSize(_repeated_unitFlags1_codec);
      size += unitFlags2_.CalculateSize(_repeated_unitFlags2_codec);
      size += unitFlags3_.CalculateSize(_repeated_unitFlags3_codec);
      size += unitLabor_.CalculateSize(_repeated_unitLabor_codec);
      size += jobSkill_.CalculateSize(_repeated_jobSkill_codec);
      size += cieAddTagMask1_.CalculateSize(_repeated_cieAddTagMask1_codec);
      size += cieAddTagMask2_.CalculateSize(_repeated_cieAddTagMask2_codec);
      size += deathInfoFlags_.CalculateSize(_repeated_deathInfoFlags_codec);
      size += profession_.CalculateSize(_repeated_profession_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListEnumsOut other) {
      if (other == null) {
        return;
      }
      materialFlags_.Add(other.materialFlags_);
      inorganicFlags_.Add(other.inorganicFlags_);
      unitFlags1_.Add(other.unitFlags1_);
      unitFlags2_.Add(other.unitFlags2_);
      unitFlags3_.Add(other.unitFlags3_);
      unitLabor_.Add(other.unitLabor_);
      jobSkill_.Add(other.jobSkill_);
      cieAddTagMask1_.Add(other.cieAddTagMask1_);
      cieAddTagMask2_.Add(other.cieAddTagMask2_);
      deathInfoFlags_.Add(other.deathInfoFlags_);
      profession_.Add(other.profession_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            materialFlags_.AddEntriesFrom(input, _repeated_materialFlags_codec);
            break;
          }
          case 18: {
            inorganicFlags_.AddEntriesFrom(input, _repeated_inorganicFlags_codec);
            break;
          }
          case 26: {
            unitFlags1_.AddEntriesFrom(input, _repeated_unitFlags1_codec);
            break;
          }
          case 34: {
            unitFlags2_.AddEntriesFrom(input, _repeated_unitFlags2_codec);
            break;
          }
          case 42: {
            unitFlags3_.AddEntriesFrom(input, _repeated_unitFlags3_codec);
            break;
          }
          case 50: {
            unitLabor_.AddEntriesFrom(input, _repeated_unitLabor_codec);
            break;
          }
          case 58: {
            jobSkill_.AddEntriesFrom(input, _repeated_jobSkill_codec);
            break;
          }
          case 66: {
            cieAddTagMask1_.AddEntriesFrom(input, _repeated_cieAddTagMask1_codec);
            break;
          }
          case 74: {
            cieAddTagMask2_.AddEntriesFrom(input, _repeated_cieAddTagMask2_codec);
            break;
          }
          case 82: {
            deathInfoFlags_.AddEntriesFrom(input, _repeated_deathInfoFlags_codec);
            break;
          }
          case 90: {
            profession_.AddEntriesFrom(input, _repeated_profession_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// RPC ListJobSkills : EmptyMessage -> ListJobSkillsOut
  /// </summary>
  public sealed partial class ListJobSkillsOut : pb::IMessage<ListJobSkillsOut> {
    private static readonly pb::MessageParser<ListJobSkillsOut> _parser = new pb::MessageParser<ListJobSkillsOut>(() => new ListJobSkillsOut());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListJobSkillsOut> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dfproto.BasicApiReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListJobSkillsOut() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListJobSkillsOut(ListJobSkillsOut other) : this() {
      skill_ = other.skill_.Clone();
      profession_ = other.profession_.Clone();
      labor_ = other.labor_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListJobSkillsOut Clone() {
      return new ListJobSkillsOut(this);
    }

    /// <summary>Field number for the "skill" field.</summary>
    public const int SkillFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Dfproto.JobSkillAttr> _repeated_skill_codec
        = pb::FieldCodec.ForMessage(10, global::Dfproto.JobSkillAttr.Parser);
    private readonly pbc::RepeatedField<global::Dfproto.JobSkillAttr> skill_ = new pbc::RepeatedField<global::Dfproto.JobSkillAttr>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Dfproto.JobSkillAttr> Skill {
      get { return skill_; }
    }

    /// <summary>Field number for the "profession" field.</summary>
    public const int ProfessionFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Dfproto.ProfessionAttr> _repeated_profession_codec
        = pb::FieldCodec.ForMessage(18, global::Dfproto.ProfessionAttr.Parser);
    private readonly pbc::RepeatedField<global::Dfproto.ProfessionAttr> profession_ = new pbc::RepeatedField<global::Dfproto.ProfessionAttr>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Dfproto.ProfessionAttr> Profession {
      get { return profession_; }
    }

    /// <summary>Field number for the "labor" field.</summary>
    public const int LaborFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Dfproto.UnitLaborAttr> _repeated_labor_codec
        = pb::FieldCodec.ForMessage(26, global::Dfproto.UnitLaborAttr.Parser);
    private readonly pbc::RepeatedField<global::Dfproto.UnitLaborAttr> labor_ = new pbc::RepeatedField<global::Dfproto.UnitLaborAttr>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Dfproto.UnitLaborAttr> Labor {
      get { return labor_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListJobSkillsOut);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListJobSkillsOut other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!skill_.Equals(other.skill_)) return false;
      if(!profession_.Equals(other.profession_)) return false;
      if(!labor_.Equals(other.labor_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= skill_.GetHashCode();
      hash ^= profession_.GetHashCode();
      hash ^= labor_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      skill_.WriteTo(output, _repeated_skill_codec);
      profession_.WriteTo(output, _repeated_profession_codec);
      labor_.WriteTo(output, _repeated_labor_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += skill_.CalculateSize(_repeated_skill_codec);
      size += profession_.CalculateSize(_repeated_profession_codec);
      size += labor_.CalculateSize(_repeated_labor_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListJobSkillsOut other) {
      if (other == null) {
        return;
      }
      skill_.Add(other.skill_);
      profession_.Add(other.profession_);
      labor_.Add(other.labor_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            skill_.AddEntriesFrom(input, _repeated_skill_codec);
            break;
          }
          case 18: {
            profession_.AddEntriesFrom(input, _repeated_profession_codec);
            break;
          }
          case 26: {
            labor_.AddEntriesFrom(input, _repeated_labor_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// RPC ListMaterials : ListMaterialsIn -> ListMaterialsOut
  /// </summary>
  public sealed partial class ListMaterialsIn : pb::IMessage<ListMaterialsIn> {
    private static readonly pb::MessageParser<ListMaterialsIn> _parser = new pb::MessageParser<ListMaterialsIn>(() => new ListMaterialsIn());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListMaterialsIn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dfproto.BasicApiReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListMaterialsIn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListMaterialsIn(ListMaterialsIn other) : this() {
      Mask = other.mask_ != null ? other.Mask.Clone() : null;
      idList_ = other.idList_.Clone();
      builtin_ = other.builtin_;
      inorganic_ = other.inorganic_;
      creatures_ = other.creatures_;
      plants_ = other.plants_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListMaterialsIn Clone() {
      return new ListMaterialsIn(this);
    }

    /// <summary>Field number for the "mask" field.</summary>
    public const int MaskFieldNumber = 1;
    private global::Dfproto.BasicMaterialInfoMask mask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Dfproto.BasicMaterialInfoMask Mask {
      get { return mask_; }
      set {
        mask_ = value;
      }
    }

    /// <summary>Field number for the "id_list" field.</summary>
    public const int IdListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Dfproto.BasicMaterialId> _repeated_idList_codec
        = pb::FieldCodec.ForMessage(18, global::Dfproto.BasicMaterialId.Parser);
    private readonly pbc::RepeatedField<global::Dfproto.BasicMaterialId> idList_ = new pbc::RepeatedField<global::Dfproto.BasicMaterialId>();
    /// <summary>
    /// Specific materials:
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Dfproto.BasicMaterialId> IdList {
      get { return idList_; }
    }

    /// <summary>Field number for the "builtin" field.</summary>
    public const int BuiltinFieldNumber = 3;
    private bool builtin_;
    /// <summary>
    /// Complete list by type:
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Builtin {
      get { return builtin_; }
      set {
        builtin_ = value;
      }
    }

    /// <summary>Field number for the "inorganic" field.</summary>
    public const int InorganicFieldNumber = 4;
    private bool inorganic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Inorganic {
      get { return inorganic_; }
      set {
        inorganic_ = value;
      }
    }

    /// <summary>Field number for the "creatures" field.</summary>
    public const int CreaturesFieldNumber = 5;
    private bool creatures_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Creatures {
      get { return creatures_; }
      set {
        creatures_ = value;
      }
    }

    /// <summary>Field number for the "plants" field.</summary>
    public const int PlantsFieldNumber = 6;
    private bool plants_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Plants {
      get { return plants_; }
      set {
        plants_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListMaterialsIn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListMaterialsIn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Mask, other.Mask)) return false;
      if(!idList_.Equals(other.idList_)) return false;
      if (Builtin != other.Builtin) return false;
      if (Inorganic != other.Inorganic) return false;
      if (Creatures != other.Creatures) return false;
      if (Plants != other.Plants) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (mask_ != null) hash ^= Mask.GetHashCode();
      hash ^= idList_.GetHashCode();
      if (Builtin != false) hash ^= Builtin.GetHashCode();
      if (Inorganic != false) hash ^= Inorganic.GetHashCode();
      if (Creatures != false) hash ^= Creatures.GetHashCode();
      if (Plants != false) hash ^= Plants.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (mask_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Mask);
      }
      idList_.WriteTo(output, _repeated_idList_codec);
      if (Builtin != false) {
        output.WriteRawTag(24);
        output.WriteBool(Builtin);
      }
      if (Inorganic != false) {
        output.WriteRawTag(32);
        output.WriteBool(Inorganic);
      }
      if (Creatures != false) {
        output.WriteRawTag(40);
        output.WriteBool(Creatures);
      }
      if (Plants != false) {
        output.WriteRawTag(48);
        output.WriteBool(Plants);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (mask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mask);
      }
      size += idList_.CalculateSize(_repeated_idList_codec);
      if (Builtin != false) {
        size += 1 + 1;
      }
      if (Inorganic != false) {
        size += 1 + 1;
      }
      if (Creatures != false) {
        size += 1 + 1;
      }
      if (Plants != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListMaterialsIn other) {
      if (other == null) {
        return;
      }
      if (other.mask_ != null) {
        if (mask_ == null) {
          mask_ = new global::Dfproto.BasicMaterialInfoMask();
        }
        Mask.MergeFrom(other.Mask);
      }
      idList_.Add(other.idList_);
      if (other.Builtin != false) {
        Builtin = other.Builtin;
      }
      if (other.Inorganic != false) {
        Inorganic = other.Inorganic;
      }
      if (other.Creatures != false) {
        Creatures = other.Creatures;
      }
      if (other.Plants != false) {
        Plants = other.Plants;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (mask_ == null) {
              mask_ = new global::Dfproto.BasicMaterialInfoMask();
            }
            input.ReadMessage(mask_);
            break;
          }
          case 18: {
            idList_.AddEntriesFrom(input, _repeated_idList_codec);
            break;
          }
          case 24: {
            Builtin = input.ReadBool();
            break;
          }
          case 32: {
            Inorganic = input.ReadBool();
            break;
          }
          case 40: {
            Creatures = input.ReadBool();
            break;
          }
          case 48: {
            Plants = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListMaterialsOut : pb::IMessage<ListMaterialsOut> {
    private static readonly pb::MessageParser<ListMaterialsOut> _parser = new pb::MessageParser<ListMaterialsOut>(() => new ListMaterialsOut());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListMaterialsOut> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dfproto.BasicApiReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListMaterialsOut() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListMaterialsOut(ListMaterialsOut other) : this() {
      value_ = other.value_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListMaterialsOut Clone() {
      return new ListMaterialsOut(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Dfproto.BasicMaterialInfo> _repeated_value_codec
        = pb::FieldCodec.ForMessage(10, global::Dfproto.BasicMaterialInfo.Parser);
    private readonly pbc::RepeatedField<global::Dfproto.BasicMaterialInfo> value_ = new pbc::RepeatedField<global::Dfproto.BasicMaterialInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Dfproto.BasicMaterialInfo> Value {
      get { return value_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListMaterialsOut);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListMaterialsOut other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!value_.Equals(other.value_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= value_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      value_.WriteTo(output, _repeated_value_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += value_.CalculateSize(_repeated_value_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListMaterialsOut other) {
      if (other == null) {
        return;
      }
      value_.Add(other.value_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            value_.AddEntriesFrom(input, _repeated_value_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// RPC ListUnits : ListUnitsIn -> ListUnitsOut
  /// </summary>
  public sealed partial class ListUnitsIn : pb::IMessage<ListUnitsIn> {
    private static readonly pb::MessageParser<ListUnitsIn> _parser = new pb::MessageParser<ListUnitsIn>(() => new ListUnitsIn());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListUnitsIn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dfproto.BasicApiReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListUnitsIn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListUnitsIn(ListUnitsIn other) : this() {
      Mask = other.mask_ != null ? other.Mask.Clone() : null;
      idList_ = other.idList_.Clone();
      scanAll_ = other.scanAll_;
      race_ = other.race_;
      civId_ = other.civId_;
      dead_ = other.dead_;
      alive_ = other.alive_;
      sane_ = other.sane_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListUnitsIn Clone() {
      return new ListUnitsIn(this);
    }

    /// <summary>Field number for the "mask" field.</summary>
    public const int MaskFieldNumber = 1;
    private global::Dfproto.BasicUnitInfoMask mask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Dfproto.BasicUnitInfoMask Mask {
      get { return mask_; }
      set {
        mask_ = value;
      }
    }

    /// <summary>Field number for the "id_list" field.</summary>
    public const int IdListFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_idList_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> idList_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// Specific units:
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> IdList {
      get { return idList_; }
    }

    /// <summary>Field number for the "scan_all" field.</summary>
    public const int ScanAllFieldNumber = 5;
    private bool scanAll_;
    /// <summary>
    /// All units matching:
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ScanAll {
      get { return scanAll_; }
      set {
        scanAll_ = value;
      }
    }

    /// <summary>Field number for the "race" field.</summary>
    public const int RaceFieldNumber = 3;
    private int race_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Race {
      get { return race_; }
      set {
        race_ = value;
      }
    }

    /// <summary>Field number for the "civ_id" field.</summary>
    public const int CivIdFieldNumber = 4;
    private int civId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CivId {
      get { return civId_; }
      set {
        civId_ = value;
      }
    }

    /// <summary>Field number for the "dead" field.</summary>
    public const int DeadFieldNumber = 6;
    private bool dead_;
    /// <summary>
    /// i.e. passive corpse
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Dead {
      get { return dead_; }
      set {
        dead_ = value;
      }
    }

    /// <summary>Field number for the "alive" field.</summary>
    public const int AliveFieldNumber = 7;
    private bool alive_;
    /// <summary>
    /// i.e. not dead or undead
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Alive {
      get { return alive_; }
      set {
        alive_ = value;
      }
    }

    /// <summary>Field number for the "sane" field.</summary>
    public const int SaneFieldNumber = 8;
    private bool sane_;
    /// <summary>
    /// not dead, ghost, zombie, or insane
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Sane {
      get { return sane_; }
      set {
        sane_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListUnitsIn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListUnitsIn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Mask, other.Mask)) return false;
      if(!idList_.Equals(other.idList_)) return false;
      if (ScanAll != other.ScanAll) return false;
      if (Race != other.Race) return false;
      if (CivId != other.CivId) return false;
      if (Dead != other.Dead) return false;
      if (Alive != other.Alive) return false;
      if (Sane != other.Sane) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (mask_ != null) hash ^= Mask.GetHashCode();
      hash ^= idList_.GetHashCode();
      if (ScanAll != false) hash ^= ScanAll.GetHashCode();
      if (Race != 0) hash ^= Race.GetHashCode();
      if (CivId != 0) hash ^= CivId.GetHashCode();
      if (Dead != false) hash ^= Dead.GetHashCode();
      if (Alive != false) hash ^= Alive.GetHashCode();
      if (Sane != false) hash ^= Sane.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (mask_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Mask);
      }
      idList_.WriteTo(output, _repeated_idList_codec);
      if (Race != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Race);
      }
      if (CivId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CivId);
      }
      if (ScanAll != false) {
        output.WriteRawTag(40);
        output.WriteBool(ScanAll);
      }
      if (Dead != false) {
        output.WriteRawTag(48);
        output.WriteBool(Dead);
      }
      if (Alive != false) {
        output.WriteRawTag(56);
        output.WriteBool(Alive);
      }
      if (Sane != false) {
        output.WriteRawTag(64);
        output.WriteBool(Sane);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (mask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mask);
      }
      size += idList_.CalculateSize(_repeated_idList_codec);
      if (ScanAll != false) {
        size += 1 + 1;
      }
      if (Race != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Race);
      }
      if (CivId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CivId);
      }
      if (Dead != false) {
        size += 1 + 1;
      }
      if (Alive != false) {
        size += 1 + 1;
      }
      if (Sane != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListUnitsIn other) {
      if (other == null) {
        return;
      }
      if (other.mask_ != null) {
        if (mask_ == null) {
          mask_ = new global::Dfproto.BasicUnitInfoMask();
        }
        Mask.MergeFrom(other.Mask);
      }
      idList_.Add(other.idList_);
      if (other.ScanAll != false) {
        ScanAll = other.ScanAll;
      }
      if (other.Race != 0) {
        Race = other.Race;
      }
      if (other.CivId != 0) {
        CivId = other.CivId;
      }
      if (other.Dead != false) {
        Dead = other.Dead;
      }
      if (other.Alive != false) {
        Alive = other.Alive;
      }
      if (other.Sane != false) {
        Sane = other.Sane;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (mask_ == null) {
              mask_ = new global::Dfproto.BasicUnitInfoMask();
            }
            input.ReadMessage(mask_);
            break;
          }
          case 18:
          case 16: {
            idList_.AddEntriesFrom(input, _repeated_idList_codec);
            break;
          }
          case 24: {
            Race = input.ReadInt32();
            break;
          }
          case 32: {
            CivId = input.ReadInt32();
            break;
          }
          case 40: {
            ScanAll = input.ReadBool();
            break;
          }
          case 48: {
            Dead = input.ReadBool();
            break;
          }
          case 56: {
            Alive = input.ReadBool();
            break;
          }
          case 64: {
            Sane = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListUnitsOut : pb::IMessage<ListUnitsOut> {
    private static readonly pb::MessageParser<ListUnitsOut> _parser = new pb::MessageParser<ListUnitsOut>(() => new ListUnitsOut());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListUnitsOut> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dfproto.BasicApiReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListUnitsOut() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListUnitsOut(ListUnitsOut other) : this() {
      value_ = other.value_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListUnitsOut Clone() {
      return new ListUnitsOut(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Dfproto.BasicUnitInfo> _repeated_value_codec
        = pb::FieldCodec.ForMessage(10, global::Dfproto.BasicUnitInfo.Parser);
    private readonly pbc::RepeatedField<global::Dfproto.BasicUnitInfo> value_ = new pbc::RepeatedField<global::Dfproto.BasicUnitInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Dfproto.BasicUnitInfo> Value {
      get { return value_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListUnitsOut);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListUnitsOut other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!value_.Equals(other.value_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= value_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      value_.WriteTo(output, _repeated_value_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += value_.CalculateSize(_repeated_value_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListUnitsOut other) {
      if (other == null) {
        return;
      }
      value_.Add(other.value_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            value_.AddEntriesFrom(input, _repeated_value_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// RPC ListSquads : ListSquadsIn -> ListSquadsOut
  /// </summary>
  public sealed partial class ListSquadsIn : pb::IMessage<ListSquadsIn> {
    private static readonly pb::MessageParser<ListSquadsIn> _parser = new pb::MessageParser<ListSquadsIn>(() => new ListSquadsIn());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListSquadsIn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dfproto.BasicApiReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListSquadsIn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListSquadsIn(ListSquadsIn other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListSquadsIn Clone() {
      return new ListSquadsIn(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListSquadsIn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListSquadsIn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListSquadsIn other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class ListSquadsOut : pb::IMessage<ListSquadsOut> {
    private static readonly pb::MessageParser<ListSquadsOut> _parser = new pb::MessageParser<ListSquadsOut>(() => new ListSquadsOut());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListSquadsOut> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dfproto.BasicApiReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListSquadsOut() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListSquadsOut(ListSquadsOut other) : this() {
      value_ = other.value_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListSquadsOut Clone() {
      return new ListSquadsOut(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Dfproto.BasicSquadInfo> _repeated_value_codec
        = pb::FieldCodec.ForMessage(10, global::Dfproto.BasicSquadInfo.Parser);
    private readonly pbc::RepeatedField<global::Dfproto.BasicSquadInfo> value_ = new pbc::RepeatedField<global::Dfproto.BasicSquadInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Dfproto.BasicSquadInfo> Value {
      get { return value_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListSquadsOut);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListSquadsOut other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!value_.Equals(other.value_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= value_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      value_.WriteTo(output, _repeated_value_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += value_.CalculateSize(_repeated_value_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListSquadsOut other) {
      if (other == null) {
        return;
      }
      value_.Add(other.value_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            value_.AddEntriesFrom(input, _repeated_value_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// RPC SetUnitLabors : SetUnitLaborsIn -> EmptyMessage
  /// </summary>
  public sealed partial class SetUnitLaborsIn : pb::IMessage<SetUnitLaborsIn> {
    private static readonly pb::MessageParser<SetUnitLaborsIn> _parser = new pb::MessageParser<SetUnitLaborsIn>(() => new SetUnitLaborsIn());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetUnitLaborsIn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dfproto.BasicApiReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetUnitLaborsIn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetUnitLaborsIn(SetUnitLaborsIn other) : this() {
      change_ = other.change_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetUnitLaborsIn Clone() {
      return new SetUnitLaborsIn(this);
    }

    /// <summary>Field number for the "change" field.</summary>
    public const int ChangeFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Dfproto.UnitLaborState> _repeated_change_codec
        = pb::FieldCodec.ForMessage(10, global::Dfproto.UnitLaborState.Parser);
    private readonly pbc::RepeatedField<global::Dfproto.UnitLaborState> change_ = new pbc::RepeatedField<global::Dfproto.UnitLaborState>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Dfproto.UnitLaborState> Change {
      get { return change_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetUnitLaborsIn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetUnitLaborsIn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!change_.Equals(other.change_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= change_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      change_.WriteTo(output, _repeated_change_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += change_.CalculateSize(_repeated_change_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetUnitLaborsIn other) {
      if (other == null) {
        return;
      }
      change_.Add(other.change_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            change_.AddEntriesFrom(input, _repeated_change_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
